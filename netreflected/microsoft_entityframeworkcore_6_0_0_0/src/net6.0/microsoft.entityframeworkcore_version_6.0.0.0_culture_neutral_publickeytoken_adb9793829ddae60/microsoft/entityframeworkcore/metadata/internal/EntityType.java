/*
 *  MIT License
 *
 *  Copyright (c) 2022 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package microsoft.entityframeworkcore.metadata.internal;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import microsoft.entityframeworkcore.metadata.internal.TypeBase;
import microsoft.entityframeworkcore.metadata.internal.Model;
import microsoft.entityframeworkcore.metadata.ConfigurationSource;
import microsoft.entityframeworkcore.ChangeTrackingStrategy;
import microsoft.entityframeworkcore.metadata.InstantiationBinding;
import microsoft.entityframeworkcore.metadata.internal.EntityType;
import microsoft.entityframeworkcore.metadata.internal.ForeignKey;
import microsoft.entityframeworkcore.metadata.internal.Property;
import microsoft.entityframeworkcore.metadata.internal.Key;
import microsoft.entityframeworkcore.metadata.IReadOnlyProperty;
import microsoft.entityframeworkcore.metadata.IReadOnlyPropertyImplementation;
import microsoft.entityframeworkcore.metadata.IReadOnlyKey;
import microsoft.entityframeworkcore.metadata.IReadOnlyKeyImplementation;
import microsoft.entityframeworkcore.metadata.IReadOnlyEntityType;
import microsoft.entityframeworkcore.metadata.IReadOnlyEntityTypeImplementation;
import microsoft.entityframeworkcore.metadata.internal.Index;
import microsoft.entityframeworkcore.metadata.internal.Navigation;
import microsoft.entityframeworkcore.metadata.MemberIdentity;
import system.reflection.MemberInfo;
import microsoft.entityframeworkcore.metadata.internal.ServiceProperty;
import microsoft.entityframeworkcore.metadata.internal.SkipNavigation;
import system.linq.expressions.LambdaExpression;
import microsoft.entityframeworkcore.metadata.IMutableEntityType;
import microsoft.entityframeworkcore.metadata.IMutableEntityTypeImplementation;
import microsoft.entityframeworkcore.metadata.IMutableForeignKey;
import microsoft.entityframeworkcore.metadata.IMutableForeignKeyImplementation;
import microsoft.entityframeworkcore.metadata.IMutableProperty;
import microsoft.entityframeworkcore.metadata.IMutablePropertyImplementation;
import microsoft.entityframeworkcore.metadata.IMutableKey;
import microsoft.entityframeworkcore.metadata.IMutableKeyImplementation;
import microsoft.entityframeworkcore.metadata.IReadOnlyForeignKey;
import microsoft.entityframeworkcore.metadata.IReadOnlyForeignKeyImplementation;
import microsoft.entityframeworkcore.metadata.IMutableIndex;
import microsoft.entityframeworkcore.metadata.IMutableIndexImplementation;
import microsoft.entityframeworkcore.metadata.IReadOnlyIndex;
import microsoft.entityframeworkcore.metadata.IReadOnlyIndexImplementation;
import microsoft.entityframeworkcore.metadata.IMutableServiceProperty;
import microsoft.entityframeworkcore.metadata.IMutableServicePropertyImplementation;
import microsoft.entityframeworkcore.metadata.IReadOnlyServiceProperty;
import microsoft.entityframeworkcore.metadata.IReadOnlyServicePropertyImplementation;
import microsoft.entityframeworkcore.metadata.IMutableSkipNavigation;
import microsoft.entityframeworkcore.metadata.IMutableSkipNavigationImplementation;
import microsoft.entityframeworkcore.metadata.IReadOnlySkipNavigation;
import microsoft.entityframeworkcore.metadata.IReadOnlySkipNavigationImplementation;
import microsoft.entityframeworkcore.infrastructure.MetadataDebugStringOptions;
import microsoft.entityframeworkcore.metadata.IConventionEntityType;
import microsoft.entityframeworkcore.metadata.IConventionEntityTypeImplementation;
import microsoft.entityframeworkcore.metadata.IConventionForeignKey;
import microsoft.entityframeworkcore.metadata.IConventionForeignKeyImplementation;
import microsoft.entityframeworkcore.metadata.IConventionProperty;
import microsoft.entityframeworkcore.metadata.IConventionPropertyImplementation;
import microsoft.entityframeworkcore.metadata.IConventionKey;
import microsoft.entityframeworkcore.metadata.IConventionKeyImplementation;
import microsoft.entityframeworkcore.metadata.IConventionIndex;
import microsoft.entityframeworkcore.metadata.IConventionIndexImplementation;
import microsoft.entityframeworkcore.metadata.IConventionServiceProperty;
import microsoft.entityframeworkcore.metadata.IConventionServicePropertyImplementation;
import microsoft.entityframeworkcore.metadata.IConventionSkipNavigation;
import microsoft.entityframeworkcore.metadata.IConventionSkipNavigationImplementation;
import microsoft.entityframeworkcore.metadata.IEntityType;
import microsoft.entityframeworkcore.metadata.IEntityTypeImplementation;
import microsoft.entityframeworkcore.metadata.IForeignKey;
import microsoft.entityframeworkcore.metadata.IForeignKeyImplementation;
import microsoft.entityframeworkcore.metadata.IIndex;
import microsoft.entityframeworkcore.metadata.IIndexImplementation;
import microsoft.entityframeworkcore.metadata.IKey;
import microsoft.entityframeworkcore.metadata.IKeyImplementation;
import microsoft.entityframeworkcore.infrastructure.DebugView;
import microsoft.entityframeworkcore.metadata.internal.InternalEntityTypeBuilder;
import microsoft.entityframeworkcore.metadata.internal.PropertyCounts;


/**
 * The base .NET class managing Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType, Microsoft.EntityFrameworkCore, Version=6.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60.
 * <p>
 * 
 * See: <a href="https://docs.microsoft.com/en-us/dotnet/api/Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType" target="_top">https://docs.microsoft.com/en-us/dotnet/api/Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType</a>
 */
public class EntityType extends TypeBase  {
    /**
     * Fully assembly qualified name: Microsoft.EntityFrameworkCore, Version=6.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60
     */
    public static final String assemblyFullName = "Microsoft.EntityFrameworkCore, Version=6.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60";
    /**
     * Assembly name: Microsoft.EntityFrameworkCore
     */
    public static final String assemblyShortName = "Microsoft.EntityFrameworkCore";
    /**
     * Qualified class name: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType
     */
    public static final String className = "Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    /**
     * The type managed from JCOBridge. See {@link JCType}
     */
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            String classToCreate = className + ", "
                    + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Creating %s", classToCreate);
            JCType typeCreated = bridge.GetType(classToCreate);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Created: %s",
                        (typeCreated != null) ? typeCreated.toString() : "Returned null value");
            return typeCreated;
        } catch (JCException e) {
            JCOReflector.writeLog(e);
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }
    /**
     * Internal constructor. Use with caution 
     */
    public EntityType(java.lang.Object instance) throws Throwable {
        super(instance);
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public java.lang.Object getJCOInstance() {
        return classInstance;
    }

    public void setJCOInstance(JCObject instance) {
        classInstance = instance;
        super.setJCOInstance(classInstance);
    }

    public JCType getJCOType() {
        return classType;
    }
    /**
     * Try to cast the {@link IJCOBridgeReflected} instance into {@link EntityType}, a cast assert is made to check if types are compatible.
     * @param from {@link IJCOBridgeReflected} instance to be casted
     * @return {@link EntityType} instance
     * @throws java.lang.Throwable in case of error during cast operation
     */
    public static EntityType cast(IJCOBridgeReflected from) throws Throwable {
        NetType.AssertCast(classType, from);
        return new EntityType(from.getJCOInstance());
    }

    // Constructors section
    
    public EntityType() throws Throwable {
    }

    public EntityType(java.lang.String name, Model model, boolean owned, ConfigurationSource configurationSource) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.InvalidOperationException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.OutOfMemoryException, system.FormatException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            setJCOInstance((JCObject)classType.NewObject(name, model == null ? null : model.getJCOInstance(), owned, configurationSource == null ? null : configurationSource.getJCOInstance()));
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public EntityType(java.lang.String name, NetType type, Model model, boolean owned, ConfigurationSource configurationSource) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.InvalidOperationException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.OutOfMemoryException, system.FormatException, system.runtime.interopservices.ExternalException, system.globalization.CultureNotFoundException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            setJCOInstance((JCObject)classType.NewObject(name, type == null ? null : type.getJCOInstance(), model == null ? null : model.getJCOInstance(), owned, configurationSource == null ? null : configurationSource.getJCOInstance()));
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public EntityType(NetType type, Model model, boolean owned, ConfigurationSource configurationSource) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.InvalidOperationException, system.OutOfMemoryException, system.FormatException, system.RankException, system.ArrayTypeMismatchException, system.runtime.interopservices.ExternalException, system.globalization.CultureNotFoundException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            setJCOInstance((JCObject)classType.NewObject(type == null ? null : type.getJCOInstance(), model == null ? null : model.getJCOInstance(), owned, configurationSource == null ? null : configurationSource.getJCOInstance()));
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



    
    // Methods section
    
    public boolean IsOwned() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("IsOwned");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ChangeTrackingStrategy GetChangeTrackingStrategy() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGetChangeTrackingStrategy = (JCObject)classInstance.Invoke("GetChangeTrackingStrategy");
            return new ChangeTrackingStrategy(objGetChangeTrackingStrategy);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public InstantiationBinding SetConstructorBinding(InstantiationBinding constructorBinding, ConfigurationSource configurationSource) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objSetConstructorBinding = (JCObject)classInstance.Invoke("SetConstructorBinding", constructorBinding == null ? null : constructorBinding.getJCOInstance(), configurationSource == null ? null : configurationSource.getJCOInstance());
            return new InstantiationBinding(objSetConstructorBinding);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public InstantiationBinding SetServiceOnlyConstructorBinding(InstantiationBinding constructorBinding, ConfigurationSource configurationSource) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objSetServiceOnlyConstructorBinding = (JCObject)classInstance.Invoke("SetServiceOnlyConstructorBinding", constructorBinding == null ? null : constructorBinding.getJCOInstance(), configurationSource == null ? null : configurationSource.getJCOInstance());
            return new InstantiationBinding(objSetServiceOnlyConstructorBinding);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public EntityType RootType() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objRootType = (JCObject)classInstance.Invoke("RootType");
            return new EntityType(objRootType);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public EntityType SetBaseType(EntityType newBaseType, ConfigurationSource configurationSource) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.IndexOutOfRangeException, system.ArrayTypeMismatchException, system.OutOfMemoryException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objSetBaseType = (JCObject)classInstance.Invoke("SetBaseType", newBaseType == null ? null : newBaseType.getJCOInstance(), configurationSource == null ? null : configurationSource.getJCOInstance());
            return new EntityType(objSetBaseType);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ForeignKey FindDeclaredOwnership() throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.ArgumentOutOfRangeException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objFindDeclaredOwnership = (JCObject)classInstance.Invoke("FindDeclaredOwnership");
            return new ForeignKey(objFindDeclaredOwnership);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ForeignKey FindForeignKey(IReadOnlyProperty property, IReadOnlyKey principalKey, IReadOnlyEntityType principalEntityType) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objFindForeignKey = (JCObject)classInstance.Invoke("FindForeignKey", property == null ? null : property.getJCOInstance(), principalKey == null ? null : principalKey.getJCOInstance(), principalEntityType == null ? null : principalEntityType.getJCOInstance());
            return new ForeignKey(objFindForeignKey);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ForeignKey FindOwnership() throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objFindOwnership = (JCObject)classInstance.Invoke("FindOwnership");
            return new ForeignKey(objFindOwnership);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ForeignKey RemoveForeignKey(ForeignKey foreignKey) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.OutOfMemoryException, system.globalization.CultureNotFoundException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objRemoveForeignKey = (JCObject)classInstance.Invoke("RemoveForeignKey", foreignKey == null ? null : foreignKey.getJCOInstance());
            return new ForeignKey(objRemoveForeignKey);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Index AddIndex(Property property, ConfigurationSource configurationSource) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.FormatException, system.ArrayTypeMismatchException, system.globalization.CultureNotFoundException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objAddIndex = (JCObject)classInstance.Invoke("AddIndex", property == null ? null : property.getJCOInstance(), configurationSource == null ? null : configurationSource.getJCOInstance());
            return new Index(objAddIndex);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Index AddIndex(Property property, java.lang.String name, ConfigurationSource configurationSource) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.FormatException, system.ArrayTypeMismatchException, system.globalization.CultureNotFoundException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objAddIndex = (JCObject)classInstance.Invoke("AddIndex", property == null ? null : property.getJCOInstance(), name, configurationSource == null ? null : configurationSource.getJCOInstance());
            return new Index(objAddIndex);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Index FindDeclaredIndex(java.lang.String name) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.NotSupportedException, system.ObjectDisposedException, system.RankException, system.OutOfMemoryException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objFindDeclaredIndex = (JCObject)classInstance.Invoke("FindDeclaredIndex", name);
            return new Index(objFindDeclaredIndex);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Index FindIndex(IReadOnlyProperty property) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objFindIndex = (JCObject)classInstance.Invoke("FindIndex", property == null ? null : property.getJCOInstance());
            return new Index(objFindIndex);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Index FindIndex(java.lang.String name) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.NotSupportedException, system.ObjectDisposedException, system.RankException, system.OutOfMemoryException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objFindIndex = (JCObject)classInstance.Invoke("FindIndex", name);
            return new Index(objFindIndex);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Index RemoveIndex(Index index) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.OutOfMemoryException, system.globalization.CultureNotFoundException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objRemoveIndex = (JCObject)classInstance.Invoke("RemoveIndex", index == null ? null : index.getJCOInstance());
            return new Index(objRemoveIndex);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Index RemoveIndex(java.lang.String name) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.NotSupportedException, system.ObjectDisposedException, system.RankException, system.OutOfMemoryException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objRemoveIndex = (JCObject)classInstance.Invoke("RemoveIndex", name);
            return new Index(objRemoveIndex);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Key AddKey(Property property, ConfigurationSource configurationSource) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.FormatException, system.globalization.CultureNotFoundException, system.ArrayTypeMismatchException, system.RankException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objAddKey = (JCObject)classInstance.Invoke("AddKey", property == null ? null : property.getJCOInstance(), configurationSource == null ? null : configurationSource.getJCOInstance());
            return new Key(objAddKey);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Key FindKey(IReadOnlyProperty property) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objFindKey = (JCObject)classInstance.Invoke("FindKey", property == null ? null : property.getJCOInstance());
            return new Key(objFindKey);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Key FindPrimaryKey() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objFindPrimaryKey = (JCObject)classInstance.Invoke("FindPrimaryKey");
            return new Key(objFindPrimaryKey);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Key RemoveKey(Key key) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.OutOfMemoryException, system.globalization.CultureNotFoundException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objRemoveKey = (JCObject)classInstance.Invoke("RemoveKey", key == null ? null : key.getJCOInstance());
            return new Key(objRemoveKey);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Key SetPrimaryKey(Property property, ConfigurationSource configurationSource) throws Throwable, system.NotSupportedException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.ArgumentException, system.IndexOutOfRangeException, system.ObjectDisposedException, system.InvalidOperationException, system.ArrayTypeMismatchException, system.OutOfMemoryException, system.RankException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objSetPrimaryKey = (JCObject)classInstance.Invoke("SetPrimaryKey", property == null ? null : property.getJCOInstance(), configurationSource == null ? null : configurationSource.getJCOInstance());
            return new Key(objSetPrimaryKey);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Navigation AddNavigation(MemberIdentity navigationMember, ForeignKey foreignKey, boolean pointsToPrincipal) throws Throwable, system.NotSupportedException, system.PlatformNotSupportedException, system.ArgumentOutOfRangeException, system.InvalidOperationException, system.ArgumentNullException, system.IndexOutOfRangeException, system.ArgumentException, system.OutOfMemoryException, system.FormatException, system.RankException, system.ArrayTypeMismatchException, system.globalization.CultureNotFoundException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objAddNavigation = (JCObject)classInstance.Invoke("AddNavigation", navigationMember == null ? null : navigationMember.getJCOInstance(), foreignKey == null ? null : foreignKey.getJCOInstance(), pointsToPrincipal);
            return new Navigation(objAddNavigation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Navigation AddNavigation(MemberInfo navigationMember, ForeignKey foreignKey, boolean pointsToPrincipal) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.OutOfMemoryException, system.globalization.CultureNotFoundException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objAddNavigation = (JCObject)classInstance.Invoke("AddNavigation", navigationMember == null ? null : navigationMember.getJCOInstance(), foreignKey == null ? null : foreignKey.getJCOInstance(), pointsToPrincipal);
            return new Navigation(objAddNavigation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Navigation AddNavigation(java.lang.String name, ForeignKey foreignKey, boolean pointsToPrincipal) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.NotSupportedException, system.ObjectDisposedException, system.RankException, system.OutOfMemoryException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objAddNavigation = (JCObject)classInstance.Invoke("AddNavigation", name, foreignKey == null ? null : foreignKey.getJCOInstance(), pointsToPrincipal);
            return new Navigation(objAddNavigation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Navigation FindDeclaredNavigation(java.lang.String name) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.NotSupportedException, system.ObjectDisposedException, system.RankException, system.OutOfMemoryException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objFindDeclaredNavigation = (JCObject)classInstance.Invoke("FindDeclaredNavigation", name);
            return new Navigation(objFindDeclaredNavigation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Navigation FindNavigation(MemberInfo memberInfo) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.OutOfMemoryException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objFindNavigation = (JCObject)classInstance.Invoke("FindNavigation", memberInfo == null ? null : memberInfo.getJCOInstance());
            return new Navigation(objFindNavigation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Navigation FindNavigation(java.lang.String name) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.OutOfMemoryException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objFindNavigation = (JCObject)classInstance.Invoke("FindNavigation", name);
            return new Navigation(objFindNavigation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Navigation RemoveNavigation(java.lang.String name) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.NotSupportedException, system.ObjectDisposedException, system.RankException, system.OutOfMemoryException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objRemoveNavigation = (JCObject)classInstance.Invoke("RemoveNavigation", name);
            return new Navigation(objRemoveNavigation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Property AddProperty(MemberInfo memberInfo, ConfigurationSource configurationSource) throws Throwable, system.NotSupportedException, system.PlatformNotSupportedException, system.ArgumentOutOfRangeException, system.InvalidOperationException, system.ArgumentNullException, system.IndexOutOfRangeException, system.ObjectDisposedException, system.ArgumentException, system.OutOfMemoryException, system.RankException, system.ArrayTypeMismatchException, system.globalization.CultureNotFoundException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objAddProperty = (JCObject)classInstance.Invoke("AddProperty", memberInfo == null ? null : memberInfo.getJCOInstance(), configurationSource == null ? null : configurationSource.getJCOInstance());
            return new Property(objAddProperty);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Property AddProperty(java.lang.String name, ConfigurationSource configurationSource) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.FormatException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentOutOfRangeException, system.InvalidOperationException, system.globalization.CultureNotFoundException, system.IndexOutOfRangeException, system.ObjectDisposedException, system.ArrayTypeMismatchException, system.OutOfMemoryException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objAddProperty = (JCObject)classInstance.Invoke("AddProperty", name, configurationSource == null ? null : configurationSource.getJCOInstance());
            return new Property(objAddProperty);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Property FindDeclaredProperty(java.lang.String name) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.NotSupportedException, system.ObjectDisposedException, system.RankException, system.OutOfMemoryException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objFindDeclaredProperty = (JCObject)classInstance.Invoke("FindDeclaredProperty", name);
            return new Property(objFindDeclaredProperty);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Property FindProperty(java.lang.String name) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.NotSupportedException, system.ObjectDisposedException, system.RankException, system.OutOfMemoryException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objFindProperty = (JCObject)classInstance.Invoke("FindProperty", name);
            return new Property(objFindProperty);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Property FindServiceProperty(MemberInfo memberInfo) throws Throwable, system.NotSupportedException, system.PlatformNotSupportedException, system.ArgumentOutOfRangeException, system.InvalidOperationException, system.ArgumentNullException, system.IndexOutOfRangeException, system.ArgumentException, system.ObjectDisposedException, system.OutOfMemoryException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objFindServiceProperty = (JCObject)classInstance.Invoke("FindServiceProperty", memberInfo == null ? null : memberInfo.getJCOInstance());
            return new Property(objFindServiceProperty);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Property RemoveProperty(Property property) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.OutOfMemoryException, system.globalization.CultureNotFoundException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objRemoveProperty = (JCObject)classInstance.Invoke("RemoveProperty", property == null ? null : property.getJCOInstance());
            return new Property(objRemoveProperty);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Property RemoveProperty(java.lang.String name) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.NotSupportedException, system.ObjectDisposedException, system.RankException, system.OutOfMemoryException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objRemoveProperty = (JCObject)classInstance.Invoke("RemoveProperty", name);
            return new Property(objRemoveProperty);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Property SetDiscriminatorProperty(Property property, ConfigurationSource configurationSource) throws Throwable, system.NotSupportedException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.ArgumentException, system.IndexOutOfRangeException, system.ObjectDisposedException, system.InvalidOperationException, system.ArrayTypeMismatchException, system.OutOfMemoryException, system.RankException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objSetDiscriminatorProperty = (JCObject)classInstance.Invoke("SetDiscriminatorProperty", property == null ? null : property.getJCOInstance(), configurationSource == null ? null : configurationSource.getJCOInstance());
            return new Property(objSetDiscriminatorProperty);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ServiceProperty AddServiceProperty(MemberInfo memberInfo, ConfigurationSource configurationSource) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.OutOfMemoryException, system.globalization.CultureNotFoundException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objAddServiceProperty = (JCObject)classInstance.Invoke("AddServiceProperty", memberInfo == null ? null : memberInfo.getJCOInstance(), configurationSource == null ? null : configurationSource.getJCOInstance());
            return new ServiceProperty(objAddServiceProperty);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ServiceProperty FindDeclaredServiceProperty(java.lang.String name) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.NotSupportedException, system.ObjectDisposedException, system.RankException, system.OutOfMemoryException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objFindDeclaredServiceProperty = (JCObject)classInstance.Invoke("FindDeclaredServiceProperty", name);
            return new ServiceProperty(objFindDeclaredServiceProperty);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ServiceProperty FindServiceProperty(java.lang.String name) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.NotSupportedException, system.ObjectDisposedException, system.RankException, system.OutOfMemoryException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objFindServiceProperty = (JCObject)classInstance.Invoke("FindServiceProperty", name);
            return new ServiceProperty(objFindServiceProperty);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ServiceProperty RemoveServiceProperty(ServiceProperty property) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.OutOfMemoryException, system.globalization.CultureNotFoundException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objRemoveServiceProperty = (JCObject)classInstance.Invoke("RemoveServiceProperty", property == null ? null : property.getJCOInstance());
            return new ServiceProperty(objRemoveServiceProperty);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ServiceProperty RemoveServiceProperty(java.lang.String name) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.NotSupportedException, system.ObjectDisposedException, system.RankException, system.OutOfMemoryException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objRemoveServiceProperty = (JCObject)classInstance.Invoke("RemoveServiceProperty", name);
            return new ServiceProperty(objRemoveServiceProperty);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SkipNavigation AddSkipNavigation(java.lang.String name, MemberInfo memberInfo, EntityType targetEntityType, boolean collection, boolean onDependent, ConfigurationSource configurationSource) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.NotSupportedException, system.ObjectDisposedException, system.RankException, system.OutOfMemoryException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objAddSkipNavigation = (JCObject)classInstance.Invoke("AddSkipNavigation", name, memberInfo == null ? null : memberInfo.getJCOInstance(), targetEntityType == null ? null : targetEntityType.getJCOInstance(), collection, onDependent, configurationSource == null ? null : configurationSource.getJCOInstance());
            return new SkipNavigation(objAddSkipNavigation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SkipNavigation FindDeclaredSkipNavigation(java.lang.String name) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.NotSupportedException, system.ObjectDisposedException, system.RankException, system.OutOfMemoryException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objFindDeclaredSkipNavigation = (JCObject)classInstance.Invoke("FindDeclaredSkipNavigation", name);
            return new SkipNavigation(objFindDeclaredSkipNavigation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SkipNavigation FindSkipNavigation(MemberInfo memberInfo) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.OutOfMemoryException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objFindSkipNavigation = (JCObject)classInstance.Invoke("FindSkipNavigation", memberInfo == null ? null : memberInfo.getJCOInstance());
            return new SkipNavigation(objFindSkipNavigation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SkipNavigation FindSkipNavigation(java.lang.String name) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.NotSupportedException, system.ObjectDisposedException, system.RankException, system.OutOfMemoryException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objFindSkipNavigation = (JCObject)classInstance.Invoke("FindSkipNavigation", name);
            return new SkipNavigation(objFindSkipNavigation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SkipNavigation RemoveSkipNavigation(SkipNavigation navigation) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.OutOfMemoryException, system.globalization.CultureNotFoundException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objRemoveSkipNavigation = (JCObject)classInstance.Invoke("RemoveSkipNavigation", navigation == null ? null : navigation.getJCOInstance());
            return new SkipNavigation(objRemoveSkipNavigation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SkipNavigation RemoveSkipNavigation(java.lang.String name) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.NotSupportedException, system.ObjectDisposedException, system.RankException, system.OutOfMemoryException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objRemoveSkipNavigation = (JCObject)classInstance.Invoke("RemoveSkipNavigation", name);
            return new SkipNavigation(objRemoveSkipNavigation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public LambdaExpression GetQueryFilter() throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.OutOfMemoryException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGetQueryFilter = (JCObject)classInstance.Invoke("GetQueryFilter");
            return new LambdaExpression(objGetQueryFilter);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public LambdaExpression SetDefiningQuery(LambdaExpression definingQuery, ConfigurationSource configurationSource) throws Throwable, system.ArgumentNullException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.ArgumentException, system.OutOfMemoryException, system.FormatException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objSetDefiningQuery = (JCObject)classInstance.Invoke("SetDefiningQuery", definingQuery == null ? null : definingQuery.getJCOInstance(), configurationSource == null ? null : configurationSource.getJCOInstance());
            return new LambdaExpression(objSetDefiningQuery);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public LambdaExpression SetQueryFilter(LambdaExpression queryFilter, ConfigurationSource configurationSource) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.FormatException, system.globalization.CultureNotFoundException, system.IndexOutOfRangeException, system.ArrayTypeMismatchException, system.OutOfMemoryException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objSetQueryFilter = (JCObject)classInstance.Invoke("SetQueryFilter", queryFilter == null ? null : queryFilter.getJCOInstance(), configurationSource == null ? null : configurationSource.getJCOInstance());
            return new LambdaExpression(objSetQueryFilter);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NetObject CheckDiscriminatorValue(IReadOnlyEntityType entityType, NetObject value) throws Throwable, system.NotSupportedException, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.InvalidOperationException, system.runtime.interopservices.ExternalException, system.globalization.CultureNotFoundException, system.ArgumentException, system.FormatException, system.ArrayTypeMismatchException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objCheckDiscriminatorValue = (JCObject)classType.Invoke("CheckDiscriminatorValue", entityType == null ? null : entityType.getJCOInstance(), value == null ? null : value.getJCOInstance());
            return new NetObject(objCheckDiscriminatorValue);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static java.lang.String CheckChangeTrackingStrategy(IReadOnlyEntityType entityType, ChangeTrackingStrategy value, boolean requireFullNotifications) throws Throwable, system.NotSupportedException, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.InvalidOperationException, system.runtime.interopservices.ExternalException, system.globalization.CultureNotFoundException, system.ArgumentException, system.FormatException, system.ArrayTypeMismatchException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (java.lang.String)classType.Invoke("CheckChangeTrackingStrategy", entityType == null ? null : entityType.getJCOInstance(), value == null ? null : value.getJCOInstance(), requireFullNotifications);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String CheckQueryFilter(LambdaExpression queryFilter) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.FormatException, system.globalization.CultureNotFoundException, system.IndexOutOfRangeException, system.ArrayTypeMismatchException, system.OutOfMemoryException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (java.lang.String)classInstance.Invoke("CheckQueryFilter", queryFilter == null ? null : queryFilter.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String GetDiscriminatorPropertyName() throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.OutOfMemoryException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (java.lang.String)classInstance.Invoke("GetDiscriminatorPropertyName");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String OnTypeMemberIgnored(java.lang.String name) throws Throwable, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ObjectDisposedException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.ArgumentException, system.ArrayTypeMismatchException, system.OutOfMemoryException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (java.lang.String)classInstance.Invoke("OnTypeMemberIgnored", name);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void OnForeignKeyUpdated(ForeignKey foreignKey) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.RankException, system.ArgumentException, system.ArrayTypeMismatchException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("OnForeignKeyUpdated", foreignKey == null ? null : foreignKey.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void OnForeignKeyUpdating(ForeignKey foreignKey) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.InvalidOperationException, system.PlatformNotSupportedException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("OnForeignKeyUpdating", foreignKey == null ? null : foreignKey.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void OnTypeRemoved() throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.OutOfMemoryException, system.globalization.CultureNotFoundException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("OnTypeRemoved");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void SetIsOwned(boolean value) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("SetIsOwned", value);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void SetRemovedFromModel() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("SetRemovedFromModel");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIMutableEntityType method available in IMutableEntityType to obtain an object with an invocable method
     */
    @Deprecated 
    public IMutableEntityType FindClosestCommonParent(IReadOnlyEntityType otherEntityType) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.OutOfMemoryException, system.FormatException {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIMutableEntityType to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIMutableEntityType method available in IMutableEntityType to obtain an object with an invocable method
     */
    @Deprecated 
    public IMutableEntityType GetRootType() throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIMutableEntityType to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIMutableEntityType method available in IMutableEntityType to obtain an object with an invocable method
     */
    @Deprecated 
    public IMutableEntityType LeastDerivedType(IReadOnlyEntityType otherEntityType) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.OutOfMemoryException, system.FormatException {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIMutableEntityType to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIMutableEntityType method available in IMutableEntityType to obtain an object with an invocable method
     */
    @Deprecated 
    public IMutableForeignKey AddForeignKey(IMutableProperty property, IMutableKey principalKey, IMutableEntityType principalEntityType) throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIMutableEntityType to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIMutableEntityType method available in IMutableEntityType to obtain an object with an invocable method
     */
    @Deprecated 
    public IMutableForeignKey RemoveForeignKey(IReadOnlyForeignKey foreignKey) throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIMutableEntityType to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIMutableEntityType method available in IMutableEntityType to obtain an object with an invocable method
     */
    @Deprecated 
    public IMutableIndex AddIndex(IMutableProperty property, java.lang.String name) throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIMutableEntityType to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIMutableEntityType method available in IMutableEntityType to obtain an object with an invocable method
     */
    @Deprecated 
    public IMutableIndex AddIndex(IMutableProperty property) throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIMutableEntityType to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIMutableEntityType method available in IMutableEntityType to obtain an object with an invocable method
     */
    @Deprecated 
    public IMutableIndex RemoveIndex(IReadOnlyIndex index) throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIMutableEntityType to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIMutableEntityType method available in IMutableEntityType to obtain an object with an invocable method
     */
    @Deprecated 
    public IMutableKey AddKey(IMutableProperty property) throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIMutableEntityType to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIMutableEntityType method available in IMutableEntityType to obtain an object with an invocable method
     */
    @Deprecated 
    public IMutableKey RemoveKey(IReadOnlyKey key) throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIMutableEntityType to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIMutableEntityType method available in IMutableEntityType to obtain an object with an invocable method
     */
    @Deprecated 
    public IMutableKey SetPrimaryKey(IMutableProperty property) throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIMutableEntityType to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIMutableEntityType method available in IMutableEntityType to obtain an object with an invocable method
     */
    @Deprecated 
    public IMutableProperty AddIndexerProperty(java.lang.String name, NetType propertyType) throws Throwable, system.NotSupportedException, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.InvalidOperationException, system.runtime.interopservices.ExternalException, system.globalization.CultureNotFoundException, system.ArgumentException, system.FormatException, system.ArrayTypeMismatchException {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIMutableEntityType to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIMutableEntityType method available in IMutableEntityType to obtain an object with an invocable method
     */
    @Deprecated 
    public IMutableProperty AddProperty(MemberInfo memberInfo) throws Throwable, system.NotSupportedException, system.PlatformNotSupportedException, system.ArgumentOutOfRangeException, system.InvalidOperationException {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIMutableEntityType to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIMutableEntityType method available in IMutableEntityType to obtain an object with an invocable method
     */
    @Deprecated 
    public IMutableProperty AddProperty(java.lang.String name, NetType propertyType, MemberInfo memberInfo) throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIMutableEntityType to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIMutableEntityType method available in IMutableEntityType to obtain an object with an invocable method
     */
    @Deprecated 
    public IMutableProperty AddProperty(java.lang.String name, NetType propertyType) throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIMutableEntityType to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIMutableEntityType method available in IMutableEntityType to obtain an object with an invocable method
     */
    @Deprecated 
    public IMutableProperty AddProperty(java.lang.String name) throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIMutableEntityType to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIMutableEntityType method available in IMutableEntityType to obtain an object with an invocable method
     */
    @Deprecated 
    public IMutableProperty FindDiscriminatorProperty() throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIMutableEntityType to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIMutableEntityType method available in IMutableEntityType to obtain an object with an invocable method
     */
    @Deprecated 
    public IMutableProperty FindProperty(MemberInfo memberInfo) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.OutOfMemoryException, system.FormatException {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIMutableEntityType to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIMutableEntityType method available in IMutableEntityType to obtain an object with an invocable method
     */
    @Deprecated 
    public IMutableProperty GetProperty(java.lang.String name) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.OutOfMemoryException, system.globalization.CultureNotFoundException, system.FormatException {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIMutableEntityType to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIMutableEntityType method available in IMutableEntityType to obtain an object with an invocable method
     */
    @Deprecated 
    public IMutableProperty RemoveProperty(IReadOnlyProperty property) throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIMutableEntityType to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIMutableEntityType method available in IMutableEntityType to obtain an object with an invocable method
     */
    @Deprecated 
    public IMutableServiceProperty AddServiceProperty(MemberInfo memberInfo) throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIMutableEntityType to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIMutableEntityType method available in IMutableEntityType to obtain an object with an invocable method
     */
    @Deprecated 
    public IMutableServiceProperty RemoveServiceProperty(IReadOnlyServiceProperty property) throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIMutableEntityType to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIMutableEntityType method available in IMutableEntityType to obtain an object with an invocable method
     */
    @Deprecated 
    public IMutableSkipNavigation AddSkipNavigation(java.lang.String name, MemberInfo memberInfo, IMutableEntityType targetEntityType, boolean collection, boolean onDependent) throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIMutableEntityType to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIMutableEntityType method available in IMutableEntityType to obtain an object with an invocable method
     */
    @Deprecated 
    public IMutableSkipNavigation RemoveSkipNavigation(IReadOnlySkipNavigation navigation) throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIMutableEntityType to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIMutableEntityType method available in IMutableEntityType to obtain an object with an invocable method
     */
    @Deprecated 
    public void RemoveDiscriminatorValue() throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIMutableEntityType to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIMutableEntityType method available in IMutableEntityType to obtain an object with an invocable method
     */
    @Deprecated 
    public void SetDiscriminatorProperty(IReadOnlyProperty property) throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIMutableEntityType to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIMutableEntityType method available in IMutableEntityType to obtain an object with an invocable method
     */
    @Deprecated 
    public void SetDiscriminatorValue(NetObject value) throws Throwable, system.NotSupportedException, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.InvalidOperationException, system.ArgumentException, system.globalization.CultureNotFoundException, system.IndexOutOfRangeException, system.ObjectDisposedException, system.ArrayTypeMismatchException, system.OutOfMemoryException {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIMutableEntityType to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIMutableEntityType method available in IMutableEntityType to obtain an object with an invocable method
     */
    @Deprecated 
    public void SetQueryFilter(LambdaExpression queryFilter) throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIMutableEntityType to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIReadOnlyEntityType method available in IReadOnlyEntityType to obtain an object with an invocable method
     */
    @Deprecated 
    public boolean GetIsDiscriminatorMappingComplete() throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIReadOnlyEntityType to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIReadOnlyEntityType method available in IReadOnlyEntityType to obtain an object with an invocable method
     */
    @Deprecated 
    public boolean HasDefiningNavigation() throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIReadOnlyEntityType to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIReadOnlyEntityType method available in IReadOnlyEntityType to obtain an object with an invocable method
     */
    @Deprecated 
    public boolean IsAssignableFrom(IReadOnlyEntityType derivedType) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.OutOfMemoryException {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIReadOnlyEntityType to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIReadOnlyEntityType method available in IReadOnlyEntityType to obtain an object with an invocable method
     */
    @Deprecated 
    public boolean IsInOwnershipPath(IReadOnlyEntityType targetType) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.OutOfMemoryException, system.FormatException {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIReadOnlyEntityType to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIReadOnlyEntityType method available in IReadOnlyEntityType to obtain an object with an invocable method
     */
    @Deprecated 
    public boolean IsStrictlyDerivedFrom(IReadOnlyEntityType baseType) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.OutOfMemoryException {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIReadOnlyEntityType to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIReadOnlyEntityType method available in IReadOnlyEntityType to obtain an object with an invocable method
     */
    @Deprecated 
    public NetObject GetDiscriminatorValue() throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIReadOnlyEntityType to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIReadOnlyEntityType method available in IReadOnlyEntityType to obtain an object with an invocable method
     */
    @Deprecated 
    public java.lang.String ToDebugString(MetadataDebugStringOptions options, int indent) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.ArrayTypeMismatchException, system.OutOfMemoryException, system.runtime.interopservices.ExternalException, system.globalization.CultureNotFoundException, system.FormatException {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIReadOnlyEntityType to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIConventionEntityType method available in IConventionEntityType to obtain an object with an invocable method
     */
    @Deprecated 
    public ConfigurationSource GetConfigurationSource() throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIConventionEntityType to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIConventionEntityType method available in IConventionEntityType to obtain an object with an invocable method
     */
    @Deprecated 
    public IConventionEntityType SetBaseType(IConventionEntityType entityType, boolean fromDataAnnotation) throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIConventionEntityType to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIConventionEntityType method available in IConventionEntityType to obtain an object with an invocable method
     */
    @Deprecated 
    public IConventionForeignKey AddForeignKey(IConventionProperty property, IConventionKey principalKey, IConventionEntityType principalEntityType, boolean fromDataAnnotation) throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIConventionEntityType to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIConventionEntityType method available in IConventionEntityType to obtain an object with an invocable method
     */
    @Deprecated 
    public IConventionIndex AddIndex(IConventionProperty property, boolean fromDataAnnotation) throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIConventionEntityType to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIConventionEntityType method available in IConventionEntityType to obtain an object with an invocable method
     */
    @Deprecated 
    public IConventionIndex AddIndex(IConventionProperty property, java.lang.String name, boolean fromDataAnnotation) throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIConventionEntityType to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIConventionEntityType method available in IConventionEntityType to obtain an object with an invocable method
     */
    @Deprecated 
    public IConventionKey AddKey(IConventionProperty property, boolean fromDataAnnotation) throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIConventionEntityType to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIConventionEntityType method available in IConventionEntityType to obtain an object with an invocable method
     */
    @Deprecated 
    public IConventionKey SetPrimaryKey(IConventionProperty property, boolean fromDataAnnotation) throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIConventionEntityType to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIConventionEntityType method available in IConventionEntityType to obtain an object with an invocable method
     */
    @Deprecated 
    public IConventionProperty AddIndexerProperty(java.lang.String name, NetType propertyType, boolean setTypeConfigurationSource, boolean fromDataAnnotation) throws Throwable, system.NotSupportedException, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.InvalidOperationException, system.runtime.interopservices.ExternalException, system.globalization.CultureNotFoundException, system.ArgumentException, system.FormatException, system.ArrayTypeMismatchException {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIConventionEntityType to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIConventionEntityType method available in IConventionEntityType to obtain an object with an invocable method
     */
    @Deprecated 
    public IConventionProperty AddProperty(MemberInfo memberInfo, boolean fromDataAnnotation) throws Throwable, system.NotSupportedException, system.PlatformNotSupportedException, system.ArgumentOutOfRangeException, system.InvalidOperationException {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIConventionEntityType to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIConventionEntityType method available in IConventionEntityType to obtain an object with an invocable method
     */
    @Deprecated 
    public IConventionProperty AddProperty(java.lang.String name, boolean fromDataAnnotation) throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIConventionEntityType to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIConventionEntityType method available in IConventionEntityType to obtain an object with an invocable method
     */
    @Deprecated 
    public IConventionProperty AddProperty(java.lang.String name, NetType propertyType, boolean setTypeConfigurationSource, boolean fromDataAnnotation) throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIConventionEntityType to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIConventionEntityType method available in IConventionEntityType to obtain an object with an invocable method
     */
    @Deprecated 
    public IConventionProperty AddProperty(java.lang.String name, NetType propertyType, MemberInfo memberInfo, boolean setTypeConfigurationSource, boolean fromDataAnnotation) throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIConventionEntityType to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIConventionEntityType method available in IConventionEntityType to obtain an object with an invocable method
     */
    @Deprecated 
    public IConventionProperty SetDiscriminatorProperty(IReadOnlyProperty property, boolean fromDataAnnotation) throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIConventionEntityType to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIConventionEntityType method available in IConventionEntityType to obtain an object with an invocable method
     */
    @Deprecated 
    public IConventionServiceProperty AddServiceProperty(MemberInfo memberInfo, boolean fromDataAnnotation) throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIConventionEntityType to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIConventionEntityType method available in IConventionEntityType to obtain an object with an invocable method
     */
    @Deprecated 
    public IConventionSkipNavigation AddSkipNavigation(java.lang.String name, MemberInfo memberInfo, IConventionEntityType targetEntityType, boolean collection, boolean onDependent, boolean fromDataAnnotation) throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIConventionEntityType to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIConventionEntityType method available in IConventionEntityType to obtain an object with an invocable method
     */
    @Deprecated 
    public LambdaExpression SetQueryFilter(LambdaExpression queryFilter, boolean fromDataAnnotation) throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIConventionEntityType to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIConventionEntityType method available in IConventionEntityType to obtain an object with an invocable method
     */
    @Deprecated 
    public NetObject SetDiscriminatorValue(NetObject value, boolean fromDataAnnotation) throws Throwable, system.NotSupportedException, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.InvalidOperationException, system.ArgumentException, system.globalization.CultureNotFoundException, system.IndexOutOfRangeException, system.ObjectDisposedException, system.ArrayTypeMismatchException, system.OutOfMemoryException {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIConventionEntityType to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIConventionEntityType method available in IConventionEntityType to obtain an object with an invocable method
     */
    @Deprecated 
    public void HasBaseType(IConventionEntityType entityType, boolean fromDataAnnotation) throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIConventionEntityType to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIEntityType method available in IEntityType to obtain an object with an invocable method
     */
    @Deprecated 
    public IEntityType FindClosestCommonParent(IEntityType otherEntityType) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.OutOfMemoryException, system.FormatException {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIEntityType to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIEntityType method available in IEntityType to obtain an object with an invocable method
     */
    @Deprecated 
    public IEntityType LeastDerivedType(IEntityType otherEntityType) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.OutOfMemoryException, system.FormatException {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIEntityType to obtain the full interface.");
    }


    
    // Properties section
    
    public boolean getIsImplicitlyCreatedJoinEntityType() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("IsImplicitlyCreatedJoinEntityType");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsInModel() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("IsInModel");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsKeyless() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("IsKeyless");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setIsKeyless(boolean IsKeyless) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.ArrayTypeMismatchException, system.OutOfMemoryException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("IsKeyless", IsKeyless);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DebugView getDebugView() throws Throwable, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.ArgumentException, system.ArrayTypeMismatchException, system.OutOfMemoryException, system.NotSupportedException, system.ArgumentNullException, system.globalization.CultureNotFoundException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("DebugView");
            return new DebugView(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public InstantiationBinding getConstructorBinding() throws Throwable, system.ArgumentNullException, system.ArgumentException, system.ObjectDisposedException, system.InvalidOperationException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.ArgumentOutOfRangeException, system.OutOfMemoryException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("ConstructorBinding");
            return new InstantiationBinding(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setConstructorBinding(InstantiationBinding ConstructorBinding) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("ConstructorBinding", ConstructorBinding == null ? null : ConstructorBinding.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public InstantiationBinding getServiceOnlyConstructorBinding() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("ServiceOnlyConstructorBinding");
            return new InstantiationBinding(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setServiceOnlyConstructorBinding(InstantiationBinding ServiceOnlyConstructorBinding) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("ServiceOnlyConstructorBinding", ServiceOnlyConstructorBinding == null ? null : ServiceOnlyConstructorBinding.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public EntityType getBaseType() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("BaseType");
            return new EntityType(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public EntityType getOwner() throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("Owner");
            return new EntityType(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public InternalEntityTypeBuilder getBuilder() throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ObjectDisposedException, system.FormatException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.ArrayTypeMismatchException, system.OutOfMemoryException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("Builder");
            return new InternalEntityTypeBuilder(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PropertyCounts getCounts() throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.InvalidOperationException, system.PlatformNotSupportedException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("Counts");
            return new PropertyCounts(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



    // Instance Events section
    

}