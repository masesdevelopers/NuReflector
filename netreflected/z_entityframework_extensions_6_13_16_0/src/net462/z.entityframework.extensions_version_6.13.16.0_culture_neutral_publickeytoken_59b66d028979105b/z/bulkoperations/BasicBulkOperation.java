/*
 *  MIT License
 *
 *  Copyright (c) 2022 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package z.bulkoperations;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import system.threading.tasks.Task;
import system.data.DataTable;
import system.data.DataRowState;
import system.threading.CancellationToken;
import system.data.common.DbConnection;
import system.data.common.DbTransaction;
import z.bulkoperations.BulkOperation;


/**
 * The base .NET class managing Z.BulkOperations.BasicBulkOperation, Z.EntityFramework.Extensions, Version=6.13.16.0, Culture=neutral, PublicKeyToken=59b66d028979105b.
 * <p>
 * 
 * See: <a href="https://docs.microsoft.com/en-us/dotnet/api/Z.BulkOperations.BasicBulkOperation" target="_top">https://docs.microsoft.com/en-us/dotnet/api/Z.BulkOperations.BasicBulkOperation</a>
 */
public class BasicBulkOperation extends NetObject implements AutoCloseable {
    /**
     * Fully assembly qualified name: Z.EntityFramework.Extensions, Version=6.13.16.0, Culture=neutral, PublicKeyToken=59b66d028979105b
     */
    public static final String assemblyFullName = "Z.EntityFramework.Extensions, Version=6.13.16.0, Culture=neutral, PublicKeyToken=59b66d028979105b";
    /**
     * Assembly name: Z.EntityFramework.Extensions
     */
    public static final String assemblyShortName = "Z.EntityFramework.Extensions";
    /**
     * Qualified class name: Z.BulkOperations.BasicBulkOperation
     */
    public static final String className = "Z.BulkOperations.BasicBulkOperation";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    /**
     * The type managed from JCOBridge. See {@link JCType}
     */
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            String classToCreate = className + ", "
                    + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Creating %s", classToCreate);
            JCType typeCreated = bridge.GetType(classToCreate);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Created: %s",
                        (typeCreated != null) ? typeCreated.toString() : "Returned null value");
            return typeCreated;
        } catch (JCException e) {
            JCOReflector.writeLog(e);
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }
    /**
     * Internal constructor. Use with caution 
     */
    public BasicBulkOperation(java.lang.Object instance) throws Throwable {
        super(instance);
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public java.lang.Object getJCOInstance() {
        return classInstance;
    }

    public void setJCOInstance(JCObject instance) {
        classInstance = instance;
        super.setJCOInstance(classInstance);
    }

    public JCType getJCOType() {
        return classType;
    }
    /**
     * Try to cast the {@link IJCOBridgeReflected} instance into {@link BasicBulkOperation}, a cast assert is made to check if types are compatible.
     * @param from {@link IJCOBridgeReflected} instance to be casted
     * @return {@link BasicBulkOperation} instance
     * @throws java.lang.Throwable in case of error during cast operation
     */
    public static BasicBulkOperation cast(IJCOBridgeReflected from) throws Throwable {
        NetType.AssertCast(classType, from);
        return new BasicBulkOperation(from.getJCOInstance());
    }

    // Constructors section
    
    public BasicBulkOperation() throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentException, system.ObjectDisposedException, system.threading.ThreadAbortException, system.InvalidOperationException, system.ArgumentNullException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            setJCOInstance((JCObject)classType.NewObject());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Methods section
    
    public Task BulkDeleteAsync(DataTable datasource, DataRowState dataRowState, CancellationToken cancellationToken) throws Throwable, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ArgumentOutOfRangeException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.data.DataException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.configuration.ConfigurationErrorsException, system.configuration.ConfigurationException, system.NotImplementedException, system.collections.generic.KeyNotFoundException, system.FormatException, system.OverflowException, system.OutOfMemoryException, system.ObjectDisposedException, system.OperationCanceledException, system.diagnostics.tracing.EventSourceException, system.threading.tasks.TaskSchedulerException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objBulkDeleteAsync = (JCObject)classInstance.Invoke("BulkDeleteAsync", datasource == null ? null : datasource.getJCOInstance(), dataRowState == null ? null : dataRowState.getJCOInstance(), cancellationToken == null ? null : cancellationToken.getJCOInstance());
            return new Task(objBulkDeleteAsync);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Task BulkDeleteAsync(NetObject datasource, CancellationToken cancellationToken) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.NotSupportedException, system.ArgumentException, system.globalization.CultureNotFoundException, system.configuration.ConfigurationErrorsException, system.configuration.ConfigurationException, system.NotImplementedException, system.InvalidOperationException, system.collections.generic.KeyNotFoundException, system.FormatException, system.OverflowException, system.OutOfMemoryException, system.IndexOutOfRangeException, system.ObjectDisposedException, system.OperationCanceledException, system.diagnostics.tracing.EventSourceException, system.threading.tasks.TaskSchedulerException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objBulkDeleteAsync = (JCObject)classInstance.Invoke("BulkDeleteAsync", datasource == null ? null : datasource.getJCOInstance(), cancellationToken == null ? null : cancellationToken.getJCOInstance());
            return new Task(objBulkDeleteAsync);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Task BulkDeleteAsync(CancellationToken cancellationToken) throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.resources.MissingManifestResourceException, system.ArgumentException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.configuration.ConfigurationErrorsException, system.configuration.ConfigurationException, system.NotImplementedException, system.InvalidOperationException, system.collections.generic.KeyNotFoundException, system.RankException, system.FormatException, system.OverflowException, system.IndexOutOfRangeException, system.OutOfMemoryException, system.PlatformNotSupportedException, system.security.cryptography.CryptographicException, system.ObjectDisposedException, system.OperationCanceledException, system.diagnostics.tracing.EventSourceException, system.threading.tasks.TaskSchedulerException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objBulkDeleteAsync = (JCObject)classInstance.Invoke("BulkDeleteAsync", cancellationToken == null ? null : cancellationToken.getJCOInstance());
            return new Task(objBulkDeleteAsync);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Task BulkInsertAsync(DataTable datasource, DataRowState dataRowState, CancellationToken cancellationToken) throws Throwable, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ArgumentOutOfRangeException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.data.DataException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.configuration.ConfigurationErrorsException, system.configuration.ConfigurationException, system.NotImplementedException, system.collections.generic.KeyNotFoundException, system.FormatException, system.OverflowException, system.OutOfMemoryException, system.ObjectDisposedException, system.OperationCanceledException, system.diagnostics.tracing.EventSourceException, system.threading.tasks.TaskSchedulerException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objBulkInsertAsync = (JCObject)classInstance.Invoke("BulkInsertAsync", datasource == null ? null : datasource.getJCOInstance(), dataRowState == null ? null : dataRowState.getJCOInstance(), cancellationToken == null ? null : cancellationToken.getJCOInstance());
            return new Task(objBulkInsertAsync);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Task BulkInsertAsync(NetObject datasource, CancellationToken cancellationToken) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.NotSupportedException, system.ArgumentException, system.globalization.CultureNotFoundException, system.configuration.ConfigurationErrorsException, system.configuration.ConfigurationException, system.NotImplementedException, system.InvalidOperationException, system.collections.generic.KeyNotFoundException, system.FormatException, system.OverflowException, system.OutOfMemoryException, system.IndexOutOfRangeException, system.ObjectDisposedException, system.OperationCanceledException, system.diagnostics.tracing.EventSourceException, system.threading.tasks.TaskSchedulerException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objBulkInsertAsync = (JCObject)classInstance.Invoke("BulkInsertAsync", datasource == null ? null : datasource.getJCOInstance(), cancellationToken == null ? null : cancellationToken.getJCOInstance());
            return new Task(objBulkInsertAsync);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Task BulkInsertAsync(CancellationToken cancellationToken) throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.resources.MissingManifestResourceException, system.ArgumentException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.configuration.ConfigurationErrorsException, system.configuration.ConfigurationException, system.NotImplementedException, system.InvalidOperationException, system.collections.generic.KeyNotFoundException, system.RankException, system.FormatException, system.OverflowException, system.IndexOutOfRangeException, system.OutOfMemoryException, system.PlatformNotSupportedException, system.security.cryptography.CryptographicException, system.ObjectDisposedException, system.OperationCanceledException, system.diagnostics.tracing.EventSourceException, system.threading.tasks.TaskSchedulerException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objBulkInsertAsync = (JCObject)classInstance.Invoke("BulkInsertAsync", cancellationToken == null ? null : cancellationToken.getJCOInstance());
            return new Task(objBulkInsertAsync);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Task BulkMergeAsync(DataTable datasource, DataRowState dataRowState, CancellationToken cancellationToken) throws Throwable, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ArgumentOutOfRangeException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.data.DataException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.configuration.ConfigurationErrorsException, system.configuration.ConfigurationException, system.NotImplementedException, system.collections.generic.KeyNotFoundException, system.FormatException, system.OverflowException, system.OutOfMemoryException, system.ObjectDisposedException, system.OperationCanceledException, system.diagnostics.tracing.EventSourceException, system.threading.tasks.TaskSchedulerException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objBulkMergeAsync = (JCObject)classInstance.Invoke("BulkMergeAsync", datasource == null ? null : datasource.getJCOInstance(), dataRowState == null ? null : dataRowState.getJCOInstance(), cancellationToken == null ? null : cancellationToken.getJCOInstance());
            return new Task(objBulkMergeAsync);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Task BulkMergeAsync(NetObject datasource, CancellationToken cancellationToken) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.NotSupportedException, system.ArgumentException, system.globalization.CultureNotFoundException, system.configuration.ConfigurationErrorsException, system.configuration.ConfigurationException, system.NotImplementedException, system.InvalidOperationException, system.collections.generic.KeyNotFoundException, system.FormatException, system.OverflowException, system.OutOfMemoryException, system.IndexOutOfRangeException, system.ObjectDisposedException, system.OperationCanceledException, system.diagnostics.tracing.EventSourceException, system.threading.tasks.TaskSchedulerException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objBulkMergeAsync = (JCObject)classInstance.Invoke("BulkMergeAsync", datasource == null ? null : datasource.getJCOInstance(), cancellationToken == null ? null : cancellationToken.getJCOInstance());
            return new Task(objBulkMergeAsync);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Task BulkMergeAsync(CancellationToken cancellationToken) throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.resources.MissingManifestResourceException, system.ArgumentException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.configuration.ConfigurationErrorsException, system.configuration.ConfigurationException, system.NotImplementedException, system.InvalidOperationException, system.collections.generic.KeyNotFoundException, system.RankException, system.FormatException, system.OverflowException, system.IndexOutOfRangeException, system.OutOfMemoryException, system.PlatformNotSupportedException, system.security.cryptography.CryptographicException, system.ObjectDisposedException, system.OperationCanceledException, system.diagnostics.tracing.EventSourceException, system.threading.tasks.TaskSchedulerException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objBulkMergeAsync = (JCObject)classInstance.Invoke("BulkMergeAsync", cancellationToken == null ? null : cancellationToken.getJCOInstance());
            return new Task(objBulkMergeAsync);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Task BulkSaveChangesAsync(DataTable dt, CancellationToken cancellationToken) throws Throwable, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ArgumentOutOfRangeException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.data.DataException, system.NotSupportedException, system.configuration.ConfigurationErrorsException, system.configuration.ConfigurationException, system.NotImplementedException, system.collections.generic.KeyNotFoundException, system.FormatException, system.OutOfMemoryException, system.ObjectDisposedException, system.OperationCanceledException, system.diagnostics.tracing.EventSourceException, system.threading.tasks.TaskSchedulerException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objBulkSaveChangesAsync = (JCObject)classInstance.Invoke("BulkSaveChangesAsync", dt == null ? null : dt.getJCOInstance(), cancellationToken == null ? null : cancellationToken.getJCOInstance());
            return new Task(objBulkSaveChangesAsync);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Task BulkSynchronizeAsync(NetObject datasource, CancellationToken cancellationToken) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.NotSupportedException, system.ArgumentException, system.globalization.CultureNotFoundException, system.configuration.ConfigurationErrorsException, system.configuration.ConfigurationException, system.NotImplementedException, system.InvalidOperationException, system.collections.generic.KeyNotFoundException, system.FormatException, system.OverflowException, system.OutOfMemoryException, system.IndexOutOfRangeException, system.ObjectDisposedException, system.OperationCanceledException, system.diagnostics.tracing.EventSourceException, system.threading.tasks.TaskSchedulerException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objBulkSynchronizeAsync = (JCObject)classInstance.Invoke("BulkSynchronizeAsync", datasource == null ? null : datasource.getJCOInstance(), cancellationToken == null ? null : cancellationToken.getJCOInstance());
            return new Task(objBulkSynchronizeAsync);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Task BulkSynchronizeAsync(CancellationToken cancellationToken) throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.resources.MissingManifestResourceException, system.ArgumentException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.configuration.ConfigurationErrorsException, system.configuration.ConfigurationException, system.NotImplementedException, system.InvalidOperationException, system.collections.generic.KeyNotFoundException, system.RankException, system.FormatException, system.OverflowException, system.IndexOutOfRangeException, system.OutOfMemoryException, system.PlatformNotSupportedException, system.security.cryptography.CryptographicException, system.ObjectDisposedException, system.OperationCanceledException, system.diagnostics.tracing.EventSourceException, system.threading.tasks.TaskSchedulerException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objBulkSynchronizeAsync = (JCObject)classInstance.Invoke("BulkSynchronizeAsync", cancellationToken == null ? null : cancellationToken.getJCOInstance());
            return new Task(objBulkSynchronizeAsync);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Task BulkUpdateAsync(DataTable datasource, DataRowState dataRowState, CancellationToken cancellationToken) throws Throwable, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ArgumentOutOfRangeException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.data.DataException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.configuration.ConfigurationErrorsException, system.configuration.ConfigurationException, system.NotImplementedException, system.collections.generic.KeyNotFoundException, system.FormatException, system.OverflowException, system.OutOfMemoryException, system.ObjectDisposedException, system.OperationCanceledException, system.diagnostics.tracing.EventSourceException, system.threading.tasks.TaskSchedulerException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objBulkUpdateAsync = (JCObject)classInstance.Invoke("BulkUpdateAsync", datasource == null ? null : datasource.getJCOInstance(), dataRowState == null ? null : dataRowState.getJCOInstance(), cancellationToken == null ? null : cancellationToken.getJCOInstance());
            return new Task(objBulkUpdateAsync);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Task BulkUpdateAsync(NetObject datasource, CancellationToken cancellationToken) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.NotSupportedException, system.ArgumentException, system.globalization.CultureNotFoundException, system.configuration.ConfigurationErrorsException, system.configuration.ConfigurationException, system.NotImplementedException, system.InvalidOperationException, system.collections.generic.KeyNotFoundException, system.FormatException, system.OverflowException, system.OutOfMemoryException, system.IndexOutOfRangeException, system.ObjectDisposedException, system.OperationCanceledException, system.diagnostics.tracing.EventSourceException, system.threading.tasks.TaskSchedulerException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objBulkUpdateAsync = (JCObject)classInstance.Invoke("BulkUpdateAsync", datasource == null ? null : datasource.getJCOInstance(), cancellationToken == null ? null : cancellationToken.getJCOInstance());
            return new Task(objBulkUpdateAsync);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Task BulkUpdateAsync(CancellationToken cancellationToken) throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.resources.MissingManifestResourceException, system.ArgumentException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.configuration.ConfigurationErrorsException, system.configuration.ConfigurationException, system.NotImplementedException, system.InvalidOperationException, system.collections.generic.KeyNotFoundException, system.RankException, system.FormatException, system.OverflowException, system.IndexOutOfRangeException, system.OutOfMemoryException, system.PlatformNotSupportedException, system.security.cryptography.CryptographicException, system.ObjectDisposedException, system.OperationCanceledException, system.diagnostics.tracing.EventSourceException, system.threading.tasks.TaskSchedulerException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objBulkUpdateAsync = (JCObject)classInstance.Invoke("BulkUpdateAsync", cancellationToken == null ? null : cancellationToken.getJCOInstance());
            return new Task(objBulkUpdateAsync);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void BulkDelete() throws Throwable, system.ArgumentNullException, system.FormatException, system.ArgumentOutOfRangeException, system.ArgumentException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.IndexOutOfRangeException, system.MulticastNotSupportedException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.configuration.ConfigurationErrorsException, system.configuration.ConfigurationException, system.NotImplementedException, system.collections.generic.KeyNotFoundException, system.RankException, system.threading.AbandonedMutexException, system.InvalidTimeZoneException, system.OverflowException, system.OutOfMemoryException, system.PlatformNotSupportedException, system.security.cryptography.CryptographicException, system.OperationCanceledException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("BulkDelete");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void BulkDelete(DataTable datasource, DataRowState dataRowState) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotSupportedException, system.FormatException, system.OverflowException, system.data.DataException, system.MulticastNotSupportedException, system.configuration.ConfigurationErrorsException, system.configuration.ConfigurationException, system.NotImplementedException, system.collections.generic.KeyNotFoundException, system.RankException, system.OutOfMemoryException, system.PlatformNotSupportedException, system.security.cryptography.CryptographicException, system.OperationCanceledException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("BulkDelete", datasource == null ? null : datasource.getJCOInstance(), dataRowState == null ? null : dataRowState.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void BulkDelete(NetObject datasource) throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.IndexOutOfRangeException, system.ArgumentException, system.MulticastNotSupportedException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.configuration.ConfigurationErrorsException, system.configuration.ConfigurationException, system.NotImplementedException, system.collections.generic.KeyNotFoundException, system.RankException, system.OutOfMemoryException, system.FormatException, system.OverflowException, system.PlatformNotSupportedException, system.security.cryptography.CryptographicException, system.ObjectDisposedException, system.OperationCanceledException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("BulkDelete", datasource == null ? null : datasource.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void BulkInsert() throws Throwable, system.ArgumentNullException, system.FormatException, system.ArgumentOutOfRangeException, system.ArgumentException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.IndexOutOfRangeException, system.MulticastNotSupportedException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.configuration.ConfigurationErrorsException, system.configuration.ConfigurationException, system.NotImplementedException, system.collections.generic.KeyNotFoundException, system.RankException, system.threading.AbandonedMutexException, system.InvalidTimeZoneException, system.OverflowException, system.OutOfMemoryException, system.PlatformNotSupportedException, system.security.cryptography.CryptographicException, system.OperationCanceledException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("BulkInsert");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void BulkInsert(DataTable datasource, DataRowState dataRowState) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotSupportedException, system.FormatException, system.OverflowException, system.data.DataException, system.MulticastNotSupportedException, system.configuration.ConfigurationErrorsException, system.configuration.ConfigurationException, system.NotImplementedException, system.collections.generic.KeyNotFoundException, system.RankException, system.OutOfMemoryException, system.PlatformNotSupportedException, system.security.cryptography.CryptographicException, system.OperationCanceledException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("BulkInsert", datasource == null ? null : datasource.getJCOInstance(), dataRowState == null ? null : dataRowState.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void BulkInsert(NetObject datasource) throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.IndexOutOfRangeException, system.ArgumentException, system.MulticastNotSupportedException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.configuration.ConfigurationErrorsException, system.configuration.ConfigurationException, system.NotImplementedException, system.collections.generic.KeyNotFoundException, system.RankException, system.OutOfMemoryException, system.FormatException, system.OverflowException, system.PlatformNotSupportedException, system.security.cryptography.CryptographicException, system.ObjectDisposedException, system.OperationCanceledException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("BulkInsert", datasource == null ? null : datasource.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void BulkMerge() throws Throwable, system.ArgumentNullException, system.FormatException, system.ArgumentOutOfRangeException, system.ArgumentException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.IndexOutOfRangeException, system.MulticastNotSupportedException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.configuration.ConfigurationErrorsException, system.configuration.ConfigurationException, system.NotImplementedException, system.collections.generic.KeyNotFoundException, system.RankException, system.threading.AbandonedMutexException, system.InvalidTimeZoneException, system.OverflowException, system.OutOfMemoryException, system.PlatformNotSupportedException, system.security.cryptography.CryptographicException, system.OperationCanceledException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("BulkMerge");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void BulkMerge(DataTable datasource, DataRowState dataRowState) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotSupportedException, system.FormatException, system.OverflowException, system.data.DataException, system.MulticastNotSupportedException, system.configuration.ConfigurationErrorsException, system.configuration.ConfigurationException, system.NotImplementedException, system.collections.generic.KeyNotFoundException, system.RankException, system.OutOfMemoryException, system.PlatformNotSupportedException, system.security.cryptography.CryptographicException, system.OperationCanceledException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("BulkMerge", datasource == null ? null : datasource.getJCOInstance(), dataRowState == null ? null : dataRowState.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void BulkMerge(NetObject datasource) throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.IndexOutOfRangeException, system.ArgumentException, system.MulticastNotSupportedException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.configuration.ConfigurationErrorsException, system.configuration.ConfigurationException, system.NotImplementedException, system.collections.generic.KeyNotFoundException, system.RankException, system.OutOfMemoryException, system.FormatException, system.OverflowException, system.PlatformNotSupportedException, system.security.cryptography.CryptographicException, system.ObjectDisposedException, system.OperationCanceledException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("BulkMerge", datasource == null ? null : datasource.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void BulkSaveChanges(DataTable dt) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotSupportedException, system.FormatException, system.OverflowException, system.data.DataException, system.configuration.ConfigurationErrorsException, system.configuration.ConfigurationException, system.NotImplementedException, system.collections.generic.KeyNotFoundException, system.RankException, system.OutOfMemoryException, system.PlatformNotSupportedException, system.security.cryptography.CryptographicException, system.OperationCanceledException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("BulkSaveChanges", dt == null ? null : dt.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void BulkSynchronize() throws Throwable, system.ArgumentNullException, system.FormatException, system.ArgumentOutOfRangeException, system.ArgumentException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.IndexOutOfRangeException, system.MulticastNotSupportedException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.configuration.ConfigurationErrorsException, system.configuration.ConfigurationException, system.NotImplementedException, system.collections.generic.KeyNotFoundException, system.RankException, system.threading.AbandonedMutexException, system.InvalidTimeZoneException, system.OverflowException, system.OutOfMemoryException, system.PlatformNotSupportedException, system.security.cryptography.CryptographicException, system.OperationCanceledException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("BulkSynchronize");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void BulkSynchronize(NetObject datasource) throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.IndexOutOfRangeException, system.ArgumentException, system.MulticastNotSupportedException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.configuration.ConfigurationErrorsException, system.configuration.ConfigurationException, system.NotImplementedException, system.collections.generic.KeyNotFoundException, system.RankException, system.OutOfMemoryException, system.FormatException, system.OverflowException, system.PlatformNotSupportedException, system.security.cryptography.CryptographicException, system.ObjectDisposedException, system.OperationCanceledException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("BulkSynchronize", datasource == null ? null : datasource.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void BulkUpdate() throws Throwable, system.ArgumentNullException, system.FormatException, system.ArgumentOutOfRangeException, system.ArgumentException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.IndexOutOfRangeException, system.MulticastNotSupportedException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.configuration.ConfigurationErrorsException, system.configuration.ConfigurationException, system.NotImplementedException, system.collections.generic.KeyNotFoundException, system.RankException, system.threading.AbandonedMutexException, system.InvalidTimeZoneException, system.OverflowException, system.OutOfMemoryException, system.PlatformNotSupportedException, system.security.cryptography.CryptographicException, system.OperationCanceledException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("BulkUpdate");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void BulkUpdate(DataTable datasource, DataRowState dataRowState) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotSupportedException, system.FormatException, system.OverflowException, system.data.DataException, system.MulticastNotSupportedException, system.configuration.ConfigurationErrorsException, system.configuration.ConfigurationException, system.NotImplementedException, system.collections.generic.KeyNotFoundException, system.RankException, system.OutOfMemoryException, system.PlatformNotSupportedException, system.security.cryptography.CryptographicException, system.OperationCanceledException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("BulkUpdate", datasource == null ? null : datasource.getJCOInstance(), dataRowState == null ? null : dataRowState.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void BulkUpdate(NetObject datasource) throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.IndexOutOfRangeException, system.ArgumentException, system.MulticastNotSupportedException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.configuration.ConfigurationErrorsException, system.configuration.ConfigurationException, system.NotImplementedException, system.collections.generic.KeyNotFoundException, system.RankException, system.OutOfMemoryException, system.FormatException, system.OverflowException, system.PlatformNotSupportedException, system.security.cryptography.CryptographicException, system.ObjectDisposedException, system.OperationCanceledException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("BulkUpdate", datasource == null ? null : datasource.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Dispose() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("Dispose");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void close() throws Exception {
        try {
            if (classInstance == null)
                throw new UnsupportedOperationException("classInstance is null.");
            try {
                classInstance.Invoke("Dispose");
            }
            catch (JCNativeException jcne) {
                throw translateException(jcne);
            }
        } catch (Throwable t) {
            throw new Exception(t);
        }
    }
    
    // Properties section
    
    public int getBatchSize() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (int)classInstance.Get("BatchSize");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setBatchSize(int BatchSize) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("BatchSize", BatchSize);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbConnection getConnection() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("Connection");
            return new DbConnection(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setConnection(DbConnection Connection) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("Connection", Connection == null ? null : Connection.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbTransaction getTransaction() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("Transaction");
            return new DbTransaction(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setTransaction(DbTransaction Transaction) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("Transaction", Transaction == null ? null : Transaction.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetObject getDataSource() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("DataSource");
            return new NetObject(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setDataSource(NetObject DataSource) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("DataSource", DataSource == null ? null : DataSource.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getDestinationTableName() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (java.lang.String)classInstance.Get("DestinationTableName");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setDestinationTableName(java.lang.String DestinationTableName) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("DestinationTableName", DestinationTableName);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public BulkOperation getAdvanced() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("Advanced");
            return new BulkOperation(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



    // Instance Events section
    

}