/*
 *  MIT License
 *
 *  Copyright (c) 2022 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package z.bulkoperations;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;

// Import section
// PACKAGE_IMPORT_SECTION

/**
 * The base .NET class managing Z.BulkOperations.DebugLogType, Z.EntityFramework.Extensions, Version=6.13.16.0, Culture=neutral, PublicKeyToken=59b66d028979105b.
 * <p>
 * 
 * See: <a href="https://docs.microsoft.com/en-us/dotnet/api/Z.BulkOperations.DebugLogType" target="_top">https://docs.microsoft.com/en-us/dotnet/api/Z.BulkOperations.DebugLogType</a>
 */
public class DebugLogType extends NetObject  {
    /**
     * Fully assembly qualified name: Z.EntityFramework.Extensions, Version=6.13.16.0, Culture=neutral, PublicKeyToken=59b66d028979105b
     */
    public static final String assemblyFullName = "Z.EntityFramework.Extensions, Version=6.13.16.0, Culture=neutral, PublicKeyToken=59b66d028979105b";
    /**
     * Assembly name: Z.EntityFramework.Extensions
     */
    public static final String assemblyShortName = "Z.EntityFramework.Extensions";
    /**
     * Qualified class name: Z.BulkOperations.DebugLogType
     */
    public static final String className = "Z.BulkOperations.DebugLogType";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    /**
     * The type managed from JCOBridge. See {@link JCType}
     */
    public static JCType classType = createType();
    static JCEnum enumReflected = createEnum();
    JCEnum classInstance = null;

    static JCType createType() {
        try {
            String classToCreate = className + ", "
                    + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Creating %s", classToCreate);
            JCType typeCreated = bridge.GetType(classToCreate);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Created: %s",
                        (typeCreated != null) ? typeCreated.toString() : "Returned null value");
            return typeCreated;
        } catch (JCException e) {
            JCOReflector.writeLog(e);
            return null;
        }
    }

    static JCEnum createEnum() {
        try {
            String enumToCreate = className + ", "
                    + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Creating Enum %s", enumToCreate);
            JCEnum enumCreated = bridge.GetEnum(enumToCreate);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Created Enum: %s",
                        (enumCreated != null) ? enumCreated.toString() : "Returned null value");
            return enumCreated;
        } catch (JCException e) {
            JCOReflector.writeLog(e);
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }
    /**
     * Internal constructor. Use with caution 
     */
    public DebugLogType(java.lang.Object instance) {
        super(instance);
        if (instance instanceof JCObject) {
            try {
                String enumName = NetEnum.GetName(classType, (JCObject)instance);
                classInstance = enumReflected.fromValue(enumName);
            } catch (Throwable t) {
                JCOReflector.writeLog(t);
                classInstance = enumReflected;
            }
        } else if (instance instanceof JCEnum) {
            classInstance = (JCEnum)instance;
        }
    }

    public DebugLogType() {
        super();
        // add reference to assemblyName.dll file
        try {
            addReference(JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
        } catch (Throwable jcne) {
            JCOReflector.writeLog(jcne);
        }
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public java.lang.Object getJCOInstance() {
        return classInstance;
    }

    public JCType getJCOType() {
        return classType;
    }

    final static DebugLogType getFrom(JCEnum object, String value) {
        try {
            return new DebugLogType(object.fromValue(value));
        } catch (JCException e) {
            return new DebugLogType(object);
        }
    }

    // Enum fields section
    
    public static DebugLogType AccessorIterator_IsEmpty_IsTrue = getFrom(enumReflected, "AccessorIterator_IsEmpty_IsTrue");
    public static DebugLogType AccessorIterator_IsEmpty_IsFalse = getFrom(enumReflected, "AccessorIterator_IsEmpty_IsFalse");
    public static DebugLogType AccessorIterator_IsEnumerable_IsTrue = getFrom(enumReflected, "AccessorIterator_IsEnumerable_IsTrue");
    public static DebugLogType AccessorIterator_IsEnumerable_IsFalse = getFrom(enumReflected, "AccessorIterator_IsEnumerable_IsFalse");
    public static DebugLogType AccessorIterator_IsStreaming_IsTrue = getFrom(enumReflected, "AccessorIterator_IsStreaming_IsTrue");
    public static DebugLogType AccessorIterator_IsStreaming_IsFalse = getFrom(enumReflected, "AccessorIterator_IsStreaming_IsFalse");
    public static DebugLogType AccessorIterator_IsStreamingAllowed_IsTrue = getFrom(enumReflected, "AccessorIterator_IsStreamingAllowed_IsTrue");
    public static DebugLogType AccessorIterator_IsStreamingAllowed_IsFalse = getFrom(enumReflected, "AccessorIterator_IsStreamingAllowed_IsFalse");
    public static DebugLogType AccessorIterator_ResolveEnumerableToList_IsTrue = getFrom(enumReflected, "AccessorIterator_ResolveEnumerableToList_IsTrue");
    public static DebugLogType AccessorIterator_ResolveEnumerableToList_IsFalse = getFrom(enumReflected, "AccessorIterator_ResolveEnumerableToList_IsFalse");
    public static DebugLogType AccessorIterator_ResolveToMemory_IsTrue = getFrom(enumReflected, "AccessorIterator_ResolveToMemory_IsTrue");
    public static DebugLogType AccessorIterator_ResolveToMemory_IsFalse = getFrom(enumReflected, "AccessorIterator_ResolveToMemory_IsFalse");
    public static DebugLogType AutoMap_HasColumnMapping_IsTrue = getFrom(enumReflected, "AutoMap_HasColumnMapping_IsTrue");
    public static DebugLogType AutoMap_HasColumnMapping_IsFalse = getFrom(enumReflected, "AutoMap_HasColumnMapping_IsFalse");
    public static DebugLogType AutoMap_IsByIndexerName_IsTrue = getFrom(enumReflected, "AutoMap_IsByIndexerName_IsTrue");
    public static DebugLogType AutoMap_IsByIndexerName_IsFalse = getFrom(enumReflected, "AutoMap_IsByIndexerName_IsFalse");
    public static DebugLogType AutoMap_IsByName_IsTrue = getFrom(enumReflected, "AutoMap_IsByName_IsTrue");
    public static DebugLogType AutoMap_IsByName_IsFalse = getFrom(enumReflected, "AutoMap_IsByName_IsFalse");
    public static DebugLogType AutoMap_IsByOrdinal_IsTrue = getFrom(enumReflected, "AutoMap_IsByOrdinal_IsTrue");
    public static DebugLogType AutoMap_IsByOrdinal_IsFalse = getFrom(enumReflected, "AutoMap_IsByOrdinal_IsFalse");
    public static DebugLogType AutoMap_ResolveSetByIndexerName_IsTrue = getFrom(enumReflected, "AutoMap_ResolveSetByIndexerName_IsTrue");
    public static DebugLogType AutoMap_ResolveSetByIndexerName_IsFalse = getFrom(enumReflected, "AutoMap_ResolveSetByIndexerName_IsFalse");
    public static DebugLogType AutoMap_ResolveSetByName_IsTrue = getFrom(enumReflected, "AutoMap_ResolveSetByName_IsTrue");
    public static DebugLogType AutoMap_ResolveSetByName_IsFalse = getFrom(enumReflected, "AutoMap_ResolveSetByName_IsFalse");
    public static DebugLogType AutoMap_ResolveSetByOrdinal_IsTrue = getFrom(enumReflected, "AutoMap_ResolveSetByOrdinal_IsTrue");
    public static DebugLogType AutoMap_ResolveSetByOrdinal_IsFalse = getFrom(enumReflected, "AutoMap_ResolveSetByOrdinal_IsFalse");
    public static DebugLogType Batch_ValidateIsBatchDelayIntervalInRange_IsTrue = getFrom(enumReflected, "Batch_ValidateIsBatchDelayIntervalInRange_IsTrue");
    public static DebugLogType Batch_ValidateIsBatchDelayIntervalInRange_IsFalse = getFrom(enumReflected, "Batch_ValidateIsBatchDelayIntervalInRange_IsFalse");
    public static DebugLogType Batch_ValidateIsBatchSizeInRange_IsTrue = getFrom(enumReflected, "Batch_ValidateIsBatchSizeInRange_IsTrue");
    public static DebugLogType Batch_ValidateIsBatchSizeInRange_IsFalse = getFrom(enumReflected, "Batch_ValidateIsBatchSizeInRange_IsFalse");
    public static DebugLogType Batch_ValidateIsBatchTimeoutInRange_IsTrue = getFrom(enumReflected, "Batch_ValidateIsBatchTimeoutInRange_IsTrue");
    public static DebugLogType Batch_ValidateIsBatchTimeoutInRange_IsFalse = getFrom(enumReflected, "Batch_ValidateIsBatchTimeoutInRange_IsFalse");
    public static DebugLogType ColumnExpression_HasConcurrency_IsTrue = getFrom(enumReflected, "ColumnExpression_HasConcurrency_IsTrue");
    public static DebugLogType ColumnExpression_HasConcurrency_IsFalse = getFrom(enumReflected, "ColumnExpression_HasConcurrency_IsFalse");
    public static DebugLogType ColumnExpression_HasInput_IsTrue = getFrom(enumReflected, "ColumnExpression_HasInput_IsTrue");
    public static DebugLogType ColumnExpression_HasInput_IsFalse = getFrom(enumReflected, "ColumnExpression_HasInput_IsFalse");
    public static DebugLogType ColumnName_HasInput_IsTrue = getFrom(enumReflected, "ColumnName_HasInput_IsTrue");
    public static DebugLogType ColumnName_HasInput_IsFalse = getFrom(enumReflected, "ColumnName_HasInput_IsFalse");
    public static DebugLogType ColumnExpression_HasOutput_IsTrue = getFrom(enumReflected, "ColumnExpression_HasOutput_IsTrue");
    public static DebugLogType ColumnExpression_HasOutput_IsFalse = getFrom(enumReflected, "ColumnExpression_HasOutput_IsFalse");
    public static DebugLogType ColumnName_HasOutput_IsTrue = getFrom(enumReflected, "ColumnName_HasOutput_IsTrue");
    public static DebugLogType ColumnName_HasOutput_IsFalse = getFrom(enumReflected, "ColumnName_HasOutput_IsFalse");
    public static DebugLogType ColumnExpression_HasPrimaryKey_IsTrue = getFrom(enumReflected, "ColumnExpression_HasPrimaryKey_IsTrue");
    public static DebugLogType ColumnExpression_HasPrimaryKey_IsFalse = getFrom(enumReflected, "ColumnExpression_HasPrimaryKey_IsFalse");
    public static DebugLogType ColumnName_HasPrimaryKey_IsTrue = getFrom(enumReflected, "ColumnName_HasPrimaryKey_IsTrue");
    public static DebugLogType ColumnName_HasPrimaryKey_IsFalse = getFrom(enumReflected, "ColumnName_HasPrimaryKey_IsFalse");
    public static DebugLogType ColumnExpression_HasSynchronizeDeleteKey_IsTrue = getFrom(enumReflected, "ColumnExpression_HasSynchronizeDeleteKey_IsTrue");
    public static DebugLogType ColumnExpression_HasSynchronizeDeleteKey_IsFalse = getFrom(enumReflected, "ColumnExpression_HasSynchronizeDeleteKey_IsFalse");
    public static DebugLogType ColumnExpression_ResolveSetConcurrency_IsTrue = getFrom(enumReflected, "ColumnExpression_ResolveSetConcurrency_IsTrue");
    public static DebugLogType ColumnExpression_ResolveSetConcurrency_IsFalse = getFrom(enumReflected, "ColumnExpression_ResolveSetConcurrency_IsFalse");
    public static DebugLogType ColumnExpression_ResolveSetInput_IsTrue = getFrom(enumReflected, "ColumnExpression_ResolveSetInput_IsTrue");
    public static DebugLogType ColumnExpression_ResolveSetInput_IsFalse = getFrom(enumReflected, "ColumnExpression_ResolveSetInput_IsFalse");
    public static DebugLogType ColumnStagingTableFormulaExpression_IsTrue = getFrom(enumReflected, "ColumnStagingTableFormulaExpression_IsTrue");
    public static DebugLogType ColumnStagingTableFormulaExpression_IsFalse = getFrom(enumReflected, "ColumnStagingTableFormulaExpression_IsFalse");
    public static DebugLogType ColumnExpression_ResolveSetOutput_IsTrue = getFrom(enumReflected, "ColumnExpression_ResolveSetOutput_IsTrue");
    public static DebugLogType ColumnExpression_ResolveSetOutput_IsFalse = getFrom(enumReflected, "ColumnExpression_ResolveSetOutput_IsFalse");
    public static DebugLogType ColumnExpression_ResolveSetPrimaryKey_IsTrue = getFrom(enumReflected, "ColumnExpression_ResolveSetPrimaryKey_IsTrue");
    public static DebugLogType ColumnExpression_ResolveSetPrimaryKey_IsFalse = getFrom(enumReflected, "ColumnExpression_ResolveSetPrimaryKey_IsFalse");
    public static DebugLogType ColumnExpression_ResolveSetSynchronizeDeleteKey_IsTrue = getFrom(enumReflected, "ColumnExpression_ResolveSetSynchronizeDeleteKey_IsTrue");
    public static DebugLogType ColumnExpression_ResolveSetSynchronizeDeleteKey_IsFalse = getFrom(enumReflected, "ColumnExpression_ResolveSetSynchronizeDeleteKey_IsFalse");
    public static DebugLogType ColumnMapping_HasColumn_IsTrue = getFrom(enumReflected, "ColumnMapping_HasColumn_IsTrue");
    public static DebugLogType ColumnMapping_HasColumn_IsFalse = getFrom(enumReflected, "ColumnMapping_HasColumn_IsFalse");
    public static DebugLogType ColumnMapping_IsStagingColumnRequired_IsTrue = getFrom(enumReflected, "ColumnMapping_IsStagingColumnRequired_IsTrue");
    public static DebugLogType ColumnMapping_IsStagingColumnRequired_IsFalse = getFrom(enumReflected, "ColumnMapping_IsStagingColumnRequired_IsFalse");
    public static DebugLogType ColumnMapping_ResolveAddStagingColumn_IsTrue = getFrom(enumReflected, "ColumnMapping_ResolveAddStagingColumn_IsTrue");
    public static DebugLogType ColumnMapping_ResolveAddStagingColumn_IsFalse = getFrom(enumReflected, "ColumnMapping_ResolveAddStagingColumn_IsFalse");
    public static DebugLogType ColumnMapping_ResolveCombineColumnMappings_IsTrue = getFrom(enumReflected, "ColumnMapping_ResolveCombineColumnMappings_IsTrue");
    public static DebugLogType ColumnMapping_ResolveCombineColumnMappings_IsFalse = getFrom(enumReflected, "ColumnMapping_ResolveCombineColumnMappings_IsFalse");
    public static DebugLogType ColumnMapping_ResolveSetInsertColumn_IsTrue = getFrom(enumReflected, "ColumnMapping_ResolveSetInsertColumn_IsTrue");
    public static DebugLogType ColumnMapping_ResolveSetInsertColumn_IsFalse = getFrom(enumReflected, "ColumnMapping_ResolveSetInsertColumn_IsFalse");
    public static DebugLogType ColumnMapping_ResolveSetMapping_IsTrue = getFrom(enumReflected, "ColumnMapping_ResolveSetMapping_IsTrue");
    public static DebugLogType ColumnMapping_ResolveSetMapping_IsFalse = getFrom(enumReflected, "ColumnMapping_ResolveSetMapping_IsFalse");
    public static DebugLogType ColumnMapping_ResolveSetOutputDeletedColumn_IsTrue = getFrom(enumReflected, "ColumnMapping_ResolveSetOutputDeletedColumn_IsTrue");
    public static DebugLogType ColumnMapping_ResolveSetOutputDeletedColumn_IsFalse = getFrom(enumReflected, "ColumnMapping_ResolveSetOutputDeletedColumn_IsFalse");
    public static DebugLogType ColumnMapping_ResolveSetOutputInsertedColumn_IsTrue = getFrom(enumReflected, "ColumnMapping_ResolveSetOutputInsertedColumn_IsTrue");
    public static DebugLogType ColumnMapping_ResolveSetOutputInsertedColumn_IsFalse = getFrom(enumReflected, "ColumnMapping_ResolveSetOutputInsertedColumn_IsFalse");
    public static DebugLogType ColumnMapping_ResolveSetStagingColumn_IsTrue = getFrom(enumReflected, "ColumnMapping_ResolveSetStagingColumn_IsTrue");
    public static DebugLogType ColumnMapping_ResolveSetStagingColumn_IsFalse = getFrom(enumReflected, "ColumnMapping_ResolveSetStagingColumn_IsFalse");
    public static DebugLogType ColumnMapping_ResolveSetStagingPKColumn_IsTrue = getFrom(enumReflected, "ColumnMapping_ResolveSetStagingPKColumn_IsTrue");
    public static DebugLogType ColumnMapping_ResolveSetStagingPKColumn_IsFalse = getFrom(enumReflected, "ColumnMapping_ResolveSetStagingPKColumn_IsFalse");
    public static DebugLogType ColumnMapping_ResolveSetUpdateColumn_IsTrue = getFrom(enumReflected, "ColumnMapping_ResolveSetUpdateColumn_IsTrue");
    public static DebugLogType ColumnMapping_ResolveSetUpdateColumn_IsFalse = getFrom(enumReflected, "ColumnMapping_ResolveSetUpdateColumn_IsFalse");
    public static DebugLogType ColumnMappingDestination_HasExpression_IsTrue = getFrom(enumReflected, "ColumnMappingDestination_HasExpression_IsTrue");
    public static DebugLogType ColumnMappingDestination_HasExpression_IsFalse = getFrom(enumReflected, "ColumnMappingDestination_HasExpression_IsFalse");
    public static DebugLogType ColumnMappingDestination_HasName_IsTrue = getFrom(enumReflected, "ColumnMappingDestination_HasName_IsTrue");
    public static DebugLogType ColumnMappingDestination_HasName_IsFalse = getFrom(enumReflected, "ColumnMappingDestination_HasName_IsFalse");
    public static DebugLogType ColumnMappingDestination_HasOrdinal_IsTrue = getFrom(enumReflected, "ColumnMappingDestination_HasOrdinal_IsTrue");
    public static DebugLogType ColumnMappingDestination_HasOrdinal_IsFalse = getFrom(enumReflected, "ColumnMappingDestination_HasOrdinal_IsFalse");
    public static DebugLogType ColumnMappingDestination_IsCaseSensitive_IsTrue = getFrom(enumReflected, "ColumnMappingDestination_IsCaseSensitive_IsTrue");
    public static DebugLogType ColumnMappingDestination_IsCaseSensitive_IsFalse = getFrom(enumReflected, "ColumnMappingDestination_IsCaseSensitive_IsFalse");
    public static DebugLogType ColumnMappingDestination_ResolveDestination_IsTrue = getFrom(enumReflected, "ColumnMappingDestination_ResolveDestination_IsTrue");
    public static DebugLogType ColumnMappingDestination_ResolveDestination_IsFalse = getFrom(enumReflected, "ColumnMappingDestination_ResolveDestination_IsFalse");
    public static DebugLogType ColumnMappingDestination_ResolveDestinationCaseSensitive_IsTrue = getFrom(enumReflected, "ColumnMappingDestination_ResolveDestinationCaseSensitive_IsTrue");
    public static DebugLogType ColumnMappingDestination_ResolveDestinationCaseSensitive_IsFalse = getFrom(enumReflected, "ColumnMappingDestination_ResolveDestinationCaseSensitive_IsFalse");
    public static DebugLogType ColumnMappingDestination_ResolveSetFromExpression_IsTrue = getFrom(enumReflected, "ColumnMappingDestination_ResolveSetFromExpression_IsTrue");
    public static DebugLogType ColumnMappingDestination_ResolveSetFromExpression_IsFalse = getFrom(enumReflected, "ColumnMappingDestination_ResolveSetFromExpression_IsFalse");
    public static DebugLogType ColumnMappingDestination_ResolveSetFromName_IsTrue = getFrom(enumReflected, "ColumnMappingDestination_ResolveSetFromName_IsTrue");
    public static DebugLogType ColumnMappingDestination_ResolveSetFromName_IsFalse = getFrom(enumReflected, "ColumnMappingDestination_ResolveSetFromName_IsFalse");
    public static DebugLogType ColumnMappingDestination_ResolveSetFromOrdinal_IsTrue = getFrom(enumReflected, "ColumnMappingDestination_ResolveSetFromOrdinal_IsTrue");
    public static DebugLogType ColumnMappingDestination_ResolveSetFromOrdinal_IsFalse = getFrom(enumReflected, "ColumnMappingDestination_ResolveSetFromOrdinal_IsFalse");
    public static DebugLogType ColumnMappingDestination_ValidateIsAllMappingSingle_IsTrue = getFrom(enumReflected, "ColumnMappingDestination_ValidateIsAllMappingSingle_IsTrue");
    public static DebugLogType ColumnMappingDestination_ValidateIsAllMappingSingle_IsFalse = getFrom(enumReflected, "ColumnMappingDestination_ValidateIsAllMappingSingle_IsFalse");
    public static DebugLogType ColumnMappingDestination_ValidateIsAllSetted_IsTrue = getFrom(enumReflected, "ColumnMappingDestination_ValidateIsAllSetted_IsTrue");
    public static DebugLogType ColumnMappingDestination_ValidateIsAllSetted_IsFalse = getFrom(enumReflected, "ColumnMappingDestination_ValidateIsAllSetted_IsFalse");
    public static DebugLogType ColumnMappingDestination_ValidateIsOrdinalInRange_IsTrue = getFrom(enumReflected, "ColumnMappingDestination_ValidateIsOrdinalInRange_IsTrue");
    public static DebugLogType ColumnMappingDestination_ValidateIsOrdinalInRange_IsFalse = getFrom(enumReflected, "ColumnMappingDestination_ValidateIsOrdinalInRange_IsFalse");
    public static DebugLogType Column_HasGuidIdentity_IsTrue = getFrom(enumReflected, "Column_HasGuidIdentity_IsTrue");
    public static DebugLogType Column_HasGuidIdentity_IsFalse = getFrom(enumReflected, "Column_HasGuidIdentity_IsFalse");
    public static DebugLogType Column_ResolveGuidIdentity_IsTrue = getFrom(enumReflected, "Column_ResolveGuidIdentity_IsTrue");
    public static DebugLogType Column_ResolveGuidIdentity_IsFalse = getFrom(enumReflected, "Column_ResolveGuidIdentity_IsFalse");
    public static DebugLogType ColumnMappingSource_HasExpression_IsTrue = getFrom(enumReflected, "ColumnMappingSource_HasExpression_IsTrue");
    public static DebugLogType ColumnMappingSource_HasExpression_IsFalse = getFrom(enumReflected, "ColumnMappingSource_HasExpression_IsFalse");
    public static DebugLogType ColumnMappingSource_HasName_IsTrue = getFrom(enumReflected, "ColumnMappingSource_HasName_IsTrue");
    public static DebugLogType ColumnMappingSource_HasName_IsFalse = getFrom(enumReflected, "ColumnMappingSource_HasName_IsFalse");
    public static DebugLogType ColumnMappingSource_HasOrdinal_IsTrue = getFrom(enumReflected, "ColumnMappingSource_HasOrdinal_IsTrue");
    public static DebugLogType ColumnMappingSource_HasOrdinal_IsFalse = getFrom(enumReflected, "ColumnMappingSource_HasOrdinal_IsFalse");
    public static DebugLogType ColumnMappingSource_HasSourceValue_IsTrue = getFrom(enumReflected, "ColumnMappingSource_HasSourceValue_IsTrue");
    public static DebugLogType ColumnMappingSource_HasSourceValue_IsFalse = getFrom(enumReflected, "ColumnMappingSource_HasSourceValue_IsFalse");
    public static DebugLogType ColumnMappingSource_HasSourceValueFactory_IsTrue = getFrom(enumReflected, "ColumnMappingSource_HasSourceValueFactory_IsTrue");
    public static DebugLogType ColumnMappingSource_HasSourceValueFactory_IsFalse = getFrom(enumReflected, "ColumnMappingSource_HasSourceValueFactory_IsFalse");
    public static DebugLogType ColumnMappingSource_IsOrdinalImplicitSupported_IsTrue = getFrom(enumReflected, "ColumnMappingSource_IsOrdinalImplicitSupported_IsTrue");
    public static DebugLogType ColumnMappingSource_IsOrdinalImplicitSupported_IsFalse = getFrom(enumReflected, "ColumnMappingSource_IsOrdinalImplicitSupported_IsFalse");
    public static DebugLogType ColumnMappingSource_ResolveSetFromExpression_IsTrue = getFrom(enumReflected, "ColumnMappingSource_ResolveSetFromExpression_IsTrue");
    public static DebugLogType ColumnMappingSource_ResolveSetFromExpression_IsFalse = getFrom(enumReflected, "ColumnMappingSource_ResolveSetFromExpression_IsFalse");
    public static DebugLogType ColumnMappingSource_ResolveSetFromName_IsTrue = getFrom(enumReflected, "ColumnMappingSource_ResolveSetFromName_IsTrue");
    public static DebugLogType ColumnMappingSource_ResolveSetFromName_IsFalse = getFrom(enumReflected, "ColumnMappingSource_ResolveSetFromName_IsFalse");
    public static DebugLogType ColumnMappingSource_ResolveSetFromOrdinal_IsTrue = getFrom(enumReflected, "ColumnMappingSource_ResolveSetFromOrdinal_IsTrue");
    public static DebugLogType ColumnMappingSource_ResolveSetFromOrdinal_IsFalse = getFrom(enumReflected, "ColumnMappingSource_ResolveSetFromOrdinal_IsFalse");
    public static DebugLogType ColumnMappingSource_ResolveSetFromValue_IsTrue = getFrom(enumReflected, "ColumnMappingSource_ResolveSetFromValue_IsTrue");
    public static DebugLogType ColumnMappingSource_ResolveSetFromValue_IsFalse = getFrom(enumReflected, "ColumnMappingSource_ResolveSetFromValue_IsFalse");
    public static DebugLogType ColumnMappingSource_ResolveSetFromValueFactory_IsTrue = getFrom(enumReflected, "ColumnMappingSource_ResolveSetFromValueFactory_IsTrue");
    public static DebugLogType ColumnMappingSource_ResolveSetFromValueFactory_IsFalse = getFrom(enumReflected, "ColumnMappingSource_ResolveSetFromValueFactory_IsFalse");
    public static DebugLogType ColumnMappingSource_ValidateIsAllSetted_IsTrue = getFrom(enumReflected, "ColumnMappingSource_ValidateIsAllSetted_IsTrue");
    public static DebugLogType ColumnMappingSource_ValidateIsAllSetted_IsFalse = getFrom(enumReflected, "ColumnMappingSource_ValidateIsAllSetted_IsFalse");
    public static DebugLogType ColumnMappingSource_ValidateIsOrdinalInRange_IsTrue = getFrom(enumReflected, "ColumnMappingSource_ValidateIsOrdinalInRange_IsTrue");
    public static DebugLogType ColumnMappingSource_ValidateIsOrdinalInRange_IsFalse = getFrom(enumReflected, "ColumnMappingSource_ValidateIsOrdinalInRange_IsFalse");
    public static DebugLogType Connection_IsConnectionString_IsTrue = getFrom(enumReflected, "Connection_IsConnectionString_IsTrue");
    public static DebugLogType Connection_IsConnectionString_IsFalse = getFrom(enumReflected, "Connection_IsConnectionString_IsFalse");
    public static DebugLogType Connection_IsDynamicRequired_IsTrue = getFrom(enumReflected, "Connection_IsDynamicRequired_IsTrue");
    public static DebugLogType Connection_IsDynamicRequired_IsFalse = getFrom(enumReflected, "Connection_IsDynamicRequired_IsFalse");
    public static DebugLogType Connection_IsInstance_IsTrue = getFrom(enumReflected, "Connection_IsInstance_IsTrue");
    public static DebugLogType Connection_IsInstance_IsFalse = getFrom(enumReflected, "Connection_IsInstance_IsFalse");
    public static DebugLogType Connection_IsNameSetted_IsTrue = getFrom(enumReflected, "Connection_IsNameSetted_IsTrue");
    public static DebugLogType Connection_IsNameSetted_IsFalse = getFrom(enumReflected, "Connection_IsNameSetted_IsFalse");
    public static DebugLogType Connection_IsProviderNameSetted_IsTrue = getFrom(enumReflected, "Connection_IsProviderNameSetted_IsTrue");
    public static DebugLogType Connection_IsProviderNameSetted_IsFalse = getFrom(enumReflected, "Connection_IsProviderNameSetted_IsFalse");
    public static DebugLogType Connection_IsTypeSetted_IsTrue = getFrom(enumReflected, "Connection_IsTypeSetted_IsTrue");
    public static DebugLogType Connection_IsTypeSetted_IsFalse = getFrom(enumReflected, "Connection_IsTypeSetted_IsFalse");
    public static DebugLogType Connection_ResolveSetConnectionStringFromKey_IsTrue = getFrom(enumReflected, "Connection_ResolveSetConnectionStringFromKey_IsTrue");
    public static DebugLogType Connection_ResolveSetConnectionStringFromKey_IsFalse = getFrom(enumReflected, "Connection_ResolveSetConnectionStringFromKey_IsFalse");
    public static DebugLogType Connection_ResolveSetTypeByConnection_IsTrue = getFrom(enumReflected, "Connection_ResolveSetTypeByConnection_IsTrue");
    public static DebugLogType Connection_ResolveSetTypeByConnection_IsFalse = getFrom(enumReflected, "Connection_ResolveSetTypeByConnection_IsFalse");
    public static DebugLogType Connection_ResolveSetTypeFromAssembly_IsTrue = getFrom(enumReflected, "Connection_ResolveSetTypeFromAssembly_IsTrue");
    public static DebugLogType Connection_ResolveSetTypeFromAssembly_IsFalse = getFrom(enumReflected, "Connection_ResolveSetTypeFromAssembly_IsFalse");
    public static DebugLogType Connection_TryResolveSetTypeByProviderName_IsTrue = getFrom(enumReflected, "Connection_TryResolveSetTypeByProviderName_IsTrue");
    public static DebugLogType Connection_TryResolveSetTypeByProviderName_IsFalse = getFrom(enumReflected, "Connection_TryResolveSetTypeByProviderName_IsFalse");
    public static DebugLogType Connection_ValidateIsDynamic_IsTrue = getFrom(enumReflected, "Connection_ValidateIsDynamic_IsTrue");
    public static DebugLogType Connection_ValidateIsDynamic_IsFalse = getFrom(enumReflected, "Connection_ValidateIsDynamic_IsFalse");
    public static DebugLogType Connection_ValidateIsExclusive_IsTrue = getFrom(enumReflected, "Connection_ValidateIsExclusive_IsTrue");
    public static DebugLogType Connection_ValidateIsExclusive_IsFalse = getFrom(enumReflected, "Connection_ValidateIsExclusive_IsFalse");
    public static DebugLogType Connection_ValidateIsNameExists_IsTrue = getFrom(enumReflected, "Connection_ValidateIsNameExists_IsTrue");
    public static DebugLogType Connection_ValidateIsNameExists_IsFalse = getFrom(enumReflected, "Connection_ValidateIsNameExists_IsFalse");
    public static DebugLogType Connection_ValidateIsSetted_IsTrue = getFrom(enumReflected, "Connection_ValidateIsSetted_IsTrue");
    public static DebugLogType Connection_ValidateIsSetted_IsFalse = getFrom(enumReflected, "Connection_ValidateIsSetted_IsFalse");
    public static DebugLogType Connection_ValidateIsStateOpen_IsTrue = getFrom(enumReflected, "Connection_ValidateIsStateOpen_IsTrue");
    public static DebugLogType Connection_ValidateIsStateOpen_IsFalse = getFrom(enumReflected, "Connection_ValidateIsStateOpen_IsFalse");
    public static DebugLogType DataSource_ResolveToAccessorIterator_IsTrue = getFrom(enumReflected, "DataSource_ResolveToAccessorIterator_IsTrue");
    public static DebugLogType DataSource_ResolveToAccessorIterator_IsFalse = getFrom(enumReflected, "DataSource_ResolveToAccessorIterator_IsFalse");
    public static DebugLogType DataSource_ValidateIsSetted_IsTrue = getFrom(enumReflected, "DataSource_ValidateIsSetted_IsTrue");
    public static DebugLogType DataSource_ValidateIsSetted_IsFalse = getFrom(enumReflected, "DataSource_ValidateIsSetted_IsFalse");
    public static DebugLogType DestinationTableName_IsSetted_IsTrue = getFrom(enumReflected, "DestinationTableName_IsSetted_IsTrue");
    public static DebugLogType DestinationTableName_IsSetted_IsFalse = getFrom(enumReflected, "DestinationTableName_IsSetted_IsFalse");
    public static DebugLogType DestinationTableName_TryResolveFromDataSource_IsTrue = getFrom(enumReflected, "DestinationTableName_TryResolveFromDataSource_IsTrue");
    public static DebugLogType DestinationTableName_TryResolveFromDataSource_IsFalse = getFrom(enumReflected, "DestinationTableName_TryResolveFromDataSource_IsFalse");
    public static DebugLogType DestinationTableName_ValidateIsSetted_IsTrue = getFrom(enumReflected, "DestinationTableName_ValidateIsSetted_IsTrue");
    public static DebugLogType DestinationTableName_ValidateIsSetted_IsFalse = getFrom(enumReflected, "DestinationTableName_ValidateIsSetted_IsFalse");
    public static DebugLogType InformationSchemaTable_IsInMemory_IsTrue = getFrom(enumReflected, "InformationSchemaTable_IsInMemory_IsTrue");
    public static DebugLogType InformationSchemaTable_IsInMemory_IsFalse = getFrom(enumReflected, "InformationSchemaTable_IsInMemory_IsFalse");
    public static DebugLogType InformationSchemaTable_ResolveAddToMemory_IsTrue = getFrom(enumReflected, "InformationSchemaTable_ResolveAddToMemory_IsTrue");
    public static DebugLogType InformationSchemaTable_ResolveAddToMemory_IsFalse = getFrom(enumReflected, "InformationSchemaTable_ResolveAddToMemory_IsFalse");
    public static DebugLogType InformationSchemaTable_ResolveSetFromDatabase_IsTrue = getFrom(enumReflected, "InformationSchemaTable_ResolveSetFromDatabase_IsTrue");
    public static DebugLogType InformationSchemaTable_ResolveSetFromDatabase_IsFalse = getFrom(enumReflected, "InformationSchemaTable_ResolveSetFromDatabase_IsFalse");
    public static DebugLogType InformationSchemaTable_ResolveSetFromMemory_IsTrue = getFrom(enumReflected, "InformationSchemaTable_ResolveSetFromMemory_IsTrue");
    public static DebugLogType InformationSchemaTable_ResolveSetFromMemory_IsFalse = getFrom(enumReflected, "InformationSchemaTable_ResolveSetFromMemory_IsFalse");
    public static DebugLogType InformationSchemaTable_ResolveSetKey_IsTrue = getFrom(enumReflected, "InformationSchemaTable_ResolveSetKey_IsTrue");
    public static DebugLogType InformationSchemaTable_ResolveSetKey_IsFalse = getFrom(enumReflected, "InformationSchemaTable_ResolveSetKey_IsFalse");
    public static DebugLogType Internal_ResolveSetInternal_IsTrue = getFrom(enumReflected, "Internal_ResolveSetInternal_IsTrue");
    public static DebugLogType Internal_ResolveSetInternal_IsFalse = getFrom(enumReflected, "Internal_ResolveSetInternal_IsFalse");
    public static DebugLogType Notification_ValidateIsInRange_IsTrue = getFrom(enumReflected, "Notification_ValidateIsInRange_IsTrue");
    public static DebugLogType Notification_ValidateIsInRange_IsFalse = getFrom(enumReflected, "Notification_ValidateIsInRange_IsFalse");
    public static DebugLogType Parallel_IsEnabled_IsTrue = getFrom(enumReflected, "Parallel_IsEnabled_IsTrue");
    public static DebugLogType Parallel_IsEnabled_IsFalse = getFrom(enumReflected, "Parallel_IsEnabled_IsFalse");
    public static DebugLogType Parallel_ValidateIsBatchByTaskInRange_IsTrue = getFrom(enumReflected, "Parallel_ValidateIsBatchByTaskInRange_IsTrue");
    public static DebugLogType Parallel_ValidateIsBatchByTaskInRange_IsFalse = getFrom(enumReflected, "Parallel_ValidateIsBatchByTaskInRange_IsFalse");
    public static DebugLogType Parallel_ValidateIsMinBatchInRange_IsTrue = getFrom(enumReflected, "Parallel_ValidateIsMinBatchInRange_IsTrue");
    public static DebugLogType Parallel_ValidateIsMinBatchInRange_IsFalse = getFrom(enumReflected, "Parallel_ValidateIsMinBatchInRange_IsFalse");
    public static DebugLogType Parallel_ValidateIsMinRecordInRange_IsTrue = getFrom(enumReflected, "Parallel_ValidateIsMinRecordInRange_IsTrue");
    public static DebugLogType Parallel_ValidateIsMinRecordInRange_IsFalse = getFrom(enumReflected, "Parallel_ValidateIsMinRecordInRange_IsFalse");
    public static DebugLogType PrimaryKey_IsOperationRequired_IsTrue = getFrom(enumReflected, "PrimaryKey_IsOperationRequired_IsTrue");
    public static DebugLogType PrimaryKey_IsOperationRequired_IsFalse = getFrom(enumReflected, "PrimaryKey_IsOperationRequired_IsFalse");
    public static DebugLogType PrimaryKey_IsRequired_IsTrue = getFrom(enumReflected, "PrimaryKey_IsRequired_IsTrue");
    public static DebugLogType PrimaryKey_IsRequired_IsFalse = getFrom(enumReflected, "PrimaryKey_IsRequired_IsFalse");
    public static DebugLogType PrimaryKey_IsSetted_IsTrue = getFrom(enumReflected, "PrimaryKey_IsSetted_IsTrue");
    public static DebugLogType PrimaryKey_IsSetted_IsFalse = getFrom(enumReflected, "PrimaryKey_IsSetted_IsFalse");
    public static DebugLogType PrimaryKey_TryResolveSetFromDatabase_IsTrue = getFrom(enumReflected, "PrimaryKey_TryResolveSetFromDatabase_IsTrue");
    public static DebugLogType PrimaryKey_TryResolveSetFromDatabase_IsFalse = getFrom(enumReflected, "PrimaryKey_TryResolveSetFromDatabase_IsFalse");
    public static DebugLogType PrimaryKey_TryResolveSetFromIdentity_IsTrue = getFrom(enumReflected, "PrimaryKey_TryResolveSetFromIdentity_IsTrue");
    public static DebugLogType PrimaryKey_TryResolveSetFromIdentity_IsFalse = getFrom(enumReflected, "PrimaryKey_TryResolveSetFromIdentity_IsFalse");
    public static DebugLogType PrimaryKey_ValidateIsSetted_IsTrue = getFrom(enumReflected, "PrimaryKey_ValidateIsSetted_IsTrue");
    public static DebugLogType PrimaryKey_ValidateIsSetted_IsFalse = getFrom(enumReflected, "PrimaryKey_ValidateIsSetted_IsFalse");
    public static DebugLogType Provider_ResolveSetProvider_IsTrue = getFrom(enumReflected, "Provider_ResolveSetProvider_IsTrue");
    public static DebugLogType Provider_ResolveSetProvider_IsFalse = getFrom(enumReflected, "Provider_ResolveSetProvider_IsFalse");
    public static DebugLogType SqlBulkCopy_HasOptions_IsTrue = getFrom(enumReflected, "SqlBulkCopy_HasOptions_IsTrue");
    public static DebugLogType SqlBulkCopy_HasOptions_IsFalse = getFrom(enumReflected, "SqlBulkCopy_HasOptions_IsFalse");
    public static DebugLogType SqlBulkCopy_ValidateIsOptionsCompatible_IsTrue = getFrom(enumReflected, "SqlBulkCopy_ValidateIsOptionsCompatible_IsTrue");
    public static DebugLogType SqlBulkCopy_ValidateIsOptionsCompatible_IsFalse = getFrom(enumReflected, "SqlBulkCopy_ValidateIsOptionsCompatible_IsFalse");
    public static DebugLogType TemporaryTable_ValidateIsBatchByTableInRange_IsTrue = getFrom(enumReflected, "TemporaryTable_ValidateIsBatchByTableInRange_IsTrue");
    public static DebugLogType TemporaryTable_ValidateIsBatchByTableInRange_IsFalse = getFrom(enumReflected, "TemporaryTable_ValidateIsBatchByTableInRange_IsFalse");
    public static DebugLogType TemporaryTable_ValidateIsBatchInsertBatchSizeInRange_IsTrue = getFrom(enumReflected, "TemporaryTable_ValidateIsBatchInsertBatchSizeInRange_IsTrue");
    public static DebugLogType TemporaryTable_ValidateIsBatchInsertBatchSizeInRange_IsFalse = getFrom(enumReflected, "TemporaryTable_ValidateIsBatchInsertBatchSizeInRange_IsFalse");
    public static DebugLogType TemporaryTable_ValidateIsMinRecordInRange_IsTrue = getFrom(enumReflected, "TemporaryTable_ValidateIsMinRecordInRange_IsTrue");
    public static DebugLogType TemporaryTable_ValidateIsMinRecordInRange_IsFalse = getFrom(enumReflected, "TemporaryTable_ValidateIsMinRecordInRange_IsFalse");
    public static DebugLogType Transaction_IsTypeSetted_IsTrue = getFrom(enumReflected, "Transaction_IsTypeSetted_IsTrue");
    public static DebugLogType Transaction_IsTypeSetted_IsFalse = getFrom(enumReflected, "Transaction_IsTypeSetted_IsFalse");
    public static DebugLogType Transaction_ValidateIsExclusive_IsTrue = getFrom(enumReflected, "Transaction_ValidateIsExclusive_IsTrue");
    public static DebugLogType Transaction_ValidateIsExclusive_IsFalse = getFrom(enumReflected, "Transaction_ValidateIsExclusive_IsFalse");
    public static DebugLogType Transaction_ValidateIsValid_IsTrue = getFrom(enumReflected, "Transaction_ValidateIsValid_IsTrue");
    public static DebugLogType Transaction_ValidateIsValid_IsFalse = getFrom(enumReflected, "Transaction_ValidateIsValid_IsFalse");
    public static DebugLogType Transaction_ValidateTypeIsValid_IsTrue = getFrom(enumReflected, "Transaction_ValidateTypeIsValid_IsTrue");
    public static DebugLogType Transaction_ValidateTypeIsValid_IsFalse = getFrom(enumReflected, "Transaction_ValidateTypeIsValid_IsFalse");
    public static DebugLogType DbActionFactory_Update_ResolveSetTemporaryTableActions_IsTrue = getFrom(enumReflected, "DbActionFactory_Update_ResolveSetTemporaryTableActions_IsTrue");
    public static DebugLogType DbActionFactory_Update_ResolveSetTemporaryTableActions_IsFalse = getFrom(enumReflected, "DbActionFactory_Update_ResolveSetTemporaryTableActions_IsFalse");
    public static DebugLogType DbActionFactory_Update_ResolveSetSqlStatementActions_IsTrue = getFrom(enumReflected, "DbActionFactory_Update_ResolveSetSqlStatementActions_IsTrue");
    public static DebugLogType DbActionFactory_Update_ResolveSetSqlStatementActions_IsFalse = getFrom(enumReflected, "DbActionFactory_Update_ResolveSetSqlStatementActions_IsFalse");
    public static DebugLogType DbActionFactory_Update_Resolve_IsTrue = getFrom(enumReflected, "DbActionFactory_Update_Resolve_IsTrue");
    public static DebugLogType DbActionFactory_Update_Resolve_IsFalse = getFrom(enumReflected, "DbActionFactory_Update_Resolve_IsFalse");
    public static DebugLogType DbActionFactory_Update_IsSqlStatement_IsTrue = getFrom(enumReflected, "DbActionFactory_Update_IsSqlStatement_IsTrue");
    public static DebugLogType DbActionFactory_Update_IsSqlStatement_IsFalse = getFrom(enumReflected, "DbActionFactory_Update_IsSqlStatement_IsFalse");
    public static DebugLogType DbActionFactory_TemporaryTable_ResolveSplitByLimit_IsTrue = getFrom(enumReflected, "DbActionFactory_TemporaryTable_ResolveSplitByLimit_IsTrue");
    public static DebugLogType DbActionFactory_TemporaryTable_ResolveSplitByLimit_IsFalse = getFrom(enumReflected, "DbActionFactory_TemporaryTable_ResolveSplitByLimit_IsFalse");
    public static DebugLogType DbActionFactory_TemporaryTable_Resolve_IsTrue = getFrom(enumReflected, "DbActionFactory_TemporaryTable_Resolve_IsTrue");
    public static DebugLogType DbActionFactory_TemporaryTable_Resolve_IsFalse = getFrom(enumReflected, "DbActionFactory_TemporaryTable_Resolve_IsFalse");
    public static DebugLogType DbActionFactory_TemporaryTable_IsLimitEnabled_IsTrue = getFrom(enumReflected, "DbActionFactory_TemporaryTable_IsLimitEnabled_IsTrue");
    public static DebugLogType DbActionFactory_TemporaryTable_IsLimitEnabled_IsFalse = getFrom(enumReflected, "DbActionFactory_TemporaryTable_IsLimitEnabled_IsFalse");
    public static DebugLogType DbActionFactory_Synchronize_Resolve_IsTrue = getFrom(enumReflected, "DbActionFactory_Synchronize_Resolve_IsTrue");
    public static DebugLogType DbActionFactory_Synchronize_Resolve_IsFalse = getFrom(enumReflected, "DbActionFactory_Synchronize_Resolve_IsFalse");
    public static DebugLogType DbActionFactory_Parallel_ResolveSplitByParallel_IsTrue = getFrom(enumReflected, "DbActionFactory_Parallel_ResolveSplitByParallel_IsTrue");
    public static DebugLogType DbActionFactory_Parallel_ResolveSplitByParallel_IsFalse = getFrom(enumReflected, "DbActionFactory_Parallel_ResolveSplitByParallel_IsFalse");
    public static DebugLogType DbActionFactory_Parallel_Resolve_IsTrue = getFrom(enumReflected, "DbActionFactory_Parallel_Resolve_IsTrue");
    public static DebugLogType DbActionFactory_Parallel_Resolve_IsFalse = getFrom(enumReflected, "DbActionFactory_Parallel_Resolve_IsFalse");
    public static DebugLogType DbActionFactory_Parallel_IsEnabled_IsTrue = getFrom(enumReflected, "DbActionFactory_Parallel_IsEnabled_IsTrue");
    public static DebugLogType DbActionFactory_Parallel_IsEnabled_IsFalse = getFrom(enumReflected, "DbActionFactory_Parallel_IsEnabled_IsFalse");
    public static DebugLogType DbActionFactory_Merge_ResolveSetTemporaryTableActions_IsTrue = getFrom(enumReflected, "DbActionFactory_Merge_ResolveSetTemporaryTableActions_IsTrue");
    public static DebugLogType DbActionFactory_Merge_ResolveSetTemporaryTableActions_IsFalse = getFrom(enumReflected, "DbActionFactory_Merge_ResolveSetTemporaryTableActions_IsFalse");
    public static DebugLogType DbActionFactory_Merge_ResolveSetSqlStatementActions_IsTrue = getFrom(enumReflected, "DbActionFactory_Merge_ResolveSetSqlStatementActions_IsTrue");
    public static DebugLogType DbActionFactory_Merge_ResolveSetSqlStatementActions_IsFalse = getFrom(enumReflected, "DbActionFactory_Merge_ResolveSetSqlStatementActions_IsFalse");
    public static DebugLogType DbActionFactory_Merge_IsSqlStatement_IsTrue = getFrom(enumReflected, "DbActionFactory_Merge_IsSqlStatement_IsTrue");
    public static DebugLogType DbActionFactory_Merge_IsSqlStatement_IsFalse = getFrom(enumReflected, "DbActionFactory_Merge_IsSqlStatement_IsFalse");
    public static DebugLogType DbActionFactory_Insert_ResolveSetTemporaryTableActions_IsTrue = getFrom(enumReflected, "DbActionFactory_Insert_ResolveSetTemporaryTableActions_IsTrue");
    public static DebugLogType DbActionFactory_Insert_ResolveSetTemporaryTableActions_IsFalse = getFrom(enumReflected, "DbActionFactory_Insert_ResolveSetTemporaryTableActions_IsFalse");
    public static DebugLogType DbActionFactory_Insert_ResolveSetSqlStatementActions_IsTrue = getFrom(enumReflected, "DbActionFactory_Insert_ResolveSetSqlStatementActions_IsTrue");
    public static DebugLogType DbActionFactory_Insert_ResolveSetSqlStatementActions_IsFalse = getFrom(enumReflected, "DbActionFactory_Insert_ResolveSetSqlStatementActions_IsFalse");
    public static DebugLogType DbActionFactory_Insert_ResolveSetBulkCopyTableDirectActions_IsTrue = getFrom(enumReflected, "DbActionFactory_Insert_ResolveSetBulkCopyTableDirectActions_IsTrue");
    public static DebugLogType DbActionFactory_Insert_ResolveSetBulkCopyTableDirectActions_IsFalse = getFrom(enumReflected, "DbActionFactory_Insert_ResolveSetBulkCopyTableDirectActions_IsFalse");
    public static DebugLogType DbActionFactory_Insert_IsSqlStatement_IsTrue = getFrom(enumReflected, "DbActionFactory_Insert_IsSqlStatement_IsTrue");
    public static DebugLogType DbActionFactory_Insert_IsSqlStatement_IsFalse = getFrom(enumReflected, "DbActionFactory_Insert_IsSqlStatement_IsFalse");
    public static DebugLogType DbActionFactory_Insert_IsBulkCopyTableDirect_IsTrue = getFrom(enumReflected, "DbActionFactory_Insert_IsBulkCopyTableDirect_IsTrue");
    public static DebugLogType DbActionFactory_Insert_IsBulkCopyTableDirect_IsFalse = getFrom(enumReflected, "DbActionFactory_Insert_IsBulkCopyTableDirect_IsFalse");
    public static DebugLogType DbActionFactory_Delete_ResolveSetTemporaryTableActions_IsTrue = getFrom(enumReflected, "DbActionFactory_Delete_ResolveSetTemporaryTableActions_IsTrue");
    public static DebugLogType DbActionFactory_Delete_ResolveSetTemporaryTableActions_IsFalse = getFrom(enumReflected, "DbActionFactory_Delete_ResolveSetTemporaryTableActions_IsFalse");
    public static DebugLogType DbActionFactory_Delete_ResolveSetSqlStatementActions_IsTrue = getFrom(enumReflected, "DbActionFactory_Delete_ResolveSetSqlStatementActions_IsTrue");
    public static DebugLogType DbActionFactory_Delete_ResolveSetSqlStatementActions_IsFalse = getFrom(enumReflected, "DbActionFactory_Delete_ResolveSetSqlStatementActions_IsFalse");
    public static DebugLogType DbActionFactory_Delete_Resolve_IsTrue = getFrom(enumReflected, "DbActionFactory_Delete_Resolve_IsTrue");
    public static DebugLogType DbActionFactory_Delete_Resolve_IsFalse = getFrom(enumReflected, "DbActionFactory_Delete_Resolve_IsFalse");
    public static DebugLogType DbActionFactory_Delete_IsSqlStatement_IsTrue = getFrom(enumReflected, "DbActionFactory_Delete_IsSqlStatement_IsTrue");
    public static DebugLogType DbActionFactory_Delete_IsSqlStatement_IsFalse = getFrom(enumReflected, "DbActionFactory_Delete_IsSqlStatement_IsFalse");
    public static DebugLogType DbActionFactory_DeleteFromQuery_Resolve_IsTrue = getFrom(enumReflected, "DbActionFactory_DeleteFromQuery_Resolve_IsTrue");
    public static DebugLogType DbActionFactory_DeleteFromQuery_Resolve_IsFalse = getFrom(enumReflected, "DbActionFactory_DeleteFromQuery_Resolve_IsFalse");
    public static DebugLogType DbActionFactory_Action_IsUpdate_IsTrue = getFrom(enumReflected, "DbActionFactory_Action_IsUpdate_IsTrue");
    public static DebugLogType DbActionFactory_Action_IsUpdate_IsFalse = getFrom(enumReflected, "DbActionFactory_Action_IsUpdate_IsFalse");
    public static DebugLogType DbActionFactory_Action_IsSynchronize_IsTrue = getFrom(enumReflected, "DbActionFactory_Action_IsSynchronize_IsTrue");
    public static DebugLogType DbActionFactory_Action_IsSynchronize_IsFalse = getFrom(enumReflected, "DbActionFactory_Action_IsSynchronize_IsFalse");
    public static DebugLogType DbActionFactory_Action_IsMerge_IsTrue = getFrom(enumReflected, "DbActionFactory_Action_IsMerge_IsTrue");
    public static DebugLogType DbActionFactory_Action_IsMerge_IsFalse = getFrom(enumReflected, "DbActionFactory_Action_IsMerge_IsFalse");
    public static DebugLogType DbActionFactory_Action_IsInsert_IsTrue = getFrom(enumReflected, "DbActionFactory_Action_IsInsert_IsTrue");
    public static DebugLogType DbActionFactory_Action_IsInsert_IsFalse = getFrom(enumReflected, "DbActionFactory_Action_IsInsert_IsFalse");
    public static DebugLogType DbActionFactory_Action_IsDelete_IsTrue = getFrom(enumReflected, "DbActionFactory_Action_IsDelete_IsTrue");
    public static DebugLogType DbActionFactory_Action_IsDelete_IsFalse = getFrom(enumReflected, "DbActionFactory_Action_IsDelete_IsFalse");
    public static DebugLogType Action_IsDeleteFromQuery_IsTrue = getFrom(enumReflected, "Action_IsDeleteFromQuery_IsTrue");
    public static DebugLogType Action_IsDeleteFromQuery_IsFalse = getFrom(enumReflected, "Action_IsDeleteFromQuery_IsFalse");
    public static DebugLogType DbActionFactory_Merge_Resolve_IsTrue = getFrom(enumReflected, "DbActionFactory_Merge_Resolve_IsTrue");
    public static DebugLogType DbActionFactory_Merge_Resolve_IsFalse = getFrom(enumReflected, "DbActionFactory_Merge_Resolve_IsFalse");
    public static DebugLogType DbActionFactory_Insert_Resolve_IsTrue = getFrom(enumReflected, "DbActionFactory_Insert_Resolve_IsTrue");
    public static DebugLogType DbActionFactory_Insert_Resolve_IsFalse = getFrom(enumReflected, "DbActionFactory_Insert_Resolve_IsFalse");
    public static DebugLogType SqlCe_ResolveColumnIndexOrdinal_IsTrue = getFrom(enumReflected, "SqlCe_ResolveColumnIndexOrdinal_IsTrue");
    public static DebugLogType SqlCe_ResolveColumnIndexOrdinal_IsFalse = getFrom(enumReflected, "SqlCe_ResolveColumnIndexOrdinal_IsFalse");
    public static DebugLogType SqlCe_ResolveUniqueIndex_IsTrue = getFrom(enumReflected, "SqlCe_ResolveUniqueIndex_IsTrue");
    public static DebugLogType SqlCe_ResolveUniqueIndex_IsFalse = getFrom(enumReflected, "SqlCe_ResolveUniqueIndex_IsFalse");
    public static DebugLogType SqlCe_ValidateHasAllSettingSupported_IsTrue = getFrom(enumReflected, "SqlCe_ValidateHasAllSettingSupported_IsTrue");
    public static DebugLogType SqlCe_ValidateHasAllSettingSupported_IsFalse = getFrom(enumReflected, "SqlCe_ValidateHasAllSettingSupported_IsFalse");
    public static DebugLogType ColumnName_ResolveSetPrimaryKey_IsTrue = getFrom(enumReflected, "ColumnName_ResolveSetPrimaryKey_IsTrue");
    public static DebugLogType ColumnName_ResolveSetPrimaryKey_IsFalse = getFrom(enumReflected, "ColumnName_ResolveSetPrimaryKey_IsFalse");
    public static DebugLogType ColumnName_ResolveSetSynchronizeDeleteKey_IsTrue = getFrom(enumReflected, "ColumnName_ResolveSetSynchronizeDeleteKey_IsTrue");
    public static DebugLogType ColumnName_ResolveSetSynchronizeDeleteKey_IsFalse = getFrom(enumReflected, "ColumnName_ResolveSetSynchronizeDeleteKey_IsFalse");
    public static DebugLogType ColumnName_HasSynchronizeDeleteKey_IsTrue = getFrom(enumReflected, "ColumnName_HasSynchronizeDeleteKey_IsTrue");
    public static DebugLogType ColumnName_HasSynchronizeDeleteKey_IsFalse = getFrom(enumReflected, "ColumnName_HasSynchronizeDeleteKey_IsFalse");


    // Flags management section


}