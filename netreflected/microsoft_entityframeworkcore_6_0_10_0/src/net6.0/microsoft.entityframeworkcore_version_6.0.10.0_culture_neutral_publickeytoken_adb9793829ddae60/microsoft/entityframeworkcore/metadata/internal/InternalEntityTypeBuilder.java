/*
 *  MIT License
 *
 *  Copyright (c) 2022 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package microsoft.entityframeworkcore.metadata.internal;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import microsoft.entityframeworkcore.metadata.internal.EntityType;
import microsoft.entityframeworkcore.metadata.internal.InternalModelBuilder;
import microsoft.entityframeworkcore.metadata.ConfigurationSource;
import system.reflection.MemberInfo;
import microsoft.entityframeworkcore.metadata.internal.ForeignKey;
import microsoft.entityframeworkcore.metadata.internal.Index;
import microsoft.entityframeworkcore.metadata.internal.Key;
import microsoft.entityframeworkcore.metadata.internal.SkipNavigation;
import microsoft.entityframeworkcore.metadata.InstantiationBinding;
import system.linq.expressions.LambdaExpression;
import microsoft.entityframeworkcore.metadata.builders.DiscriminatorBuilder;
import microsoft.entityframeworkcore.metadata.builders.IConventionEntityTypeBuilder;
import microsoft.entityframeworkcore.metadata.builders.IConventionEntityTypeBuilderImplementation;
import microsoft.entityframeworkcore.metadata.IMutableNavigationBase;
import microsoft.entityframeworkcore.metadata.IMutableNavigationBaseImplementation;
import microsoft.entityframeworkcore.metadata.internal.InternalEntityTypeBuilder;
import microsoft.entityframeworkcore.metadata.internal.TypeIdentity;
import microsoft.entityframeworkcore.metadata.MemberIdentity;
import microsoft.entityframeworkcore.metadata.internal.InternalForeignKeyBuilder;
import microsoft.entityframeworkcore.metadata.internal.InternalIndexBuilder;
import microsoft.entityframeworkcore.metadata.internal.InternalKeyBuilder;
import microsoft.entityframeworkcore.metadata.internal.InternalPropertyBuilder;
import microsoft.entityframeworkcore.metadata.internal.InternalServicePropertyBuilder;
import microsoft.entityframeworkcore.metadata.internal.InternalSkipNavigationBuilder;
import microsoft.entityframeworkcore.metadata.internal.PropertiesSnapshot;
import microsoft.entityframeworkcore.metadata.internal.RelationshipSnapshot;
import microsoft.entityframeworkcore.metadata.IConventionIndex;
import microsoft.entityframeworkcore.metadata.IConventionIndexImplementation;
import microsoft.entityframeworkcore.metadata.IConventionKey;
import microsoft.entityframeworkcore.metadata.IConventionKeyImplementation;
import microsoft.entityframeworkcore.metadata.IConventionForeignKey;
import microsoft.entityframeworkcore.metadata.IConventionForeignKeyImplementation;
import microsoft.entityframeworkcore.metadata.IConventionSkipNavigation;
import microsoft.entityframeworkcore.metadata.IConventionSkipNavigationImplementation;
import microsoft.entityframeworkcore.metadata.IConventionEntityType;
import microsoft.entityframeworkcore.metadata.IConventionEntityTypeImplementation;
import microsoft.entityframeworkcore.metadata.builders.IConventionDiscriminatorBuilder;
import microsoft.entityframeworkcore.metadata.builders.IConventionDiscriminatorBuilderImplementation;
import microsoft.entityframeworkcore.metadata.builders.IConventionForeignKeyBuilder;
import microsoft.entityframeworkcore.metadata.builders.IConventionForeignKeyBuilderImplementation;
import microsoft.entityframeworkcore.metadata.builders.IConventionIndexBuilder;
import microsoft.entityframeworkcore.metadata.builders.IConventionIndexBuilderImplementation;
import microsoft.entityframeworkcore.metadata.builders.IConventionKeyBuilder;
import microsoft.entityframeworkcore.metadata.builders.IConventionKeyBuilderImplementation;
import microsoft.entityframeworkcore.metadata.builders.IConventionPropertyBuilder;
import microsoft.entityframeworkcore.metadata.builders.IConventionPropertyBuilderImplementation;
import microsoft.entityframeworkcore.metadata.builders.IConventionServicePropertyBuilder;
import microsoft.entityframeworkcore.metadata.builders.IConventionServicePropertyBuilderImplementation;
import microsoft.entityframeworkcore.metadata.builders.IConventionSkipNavigationBuilder;
import microsoft.entityframeworkcore.metadata.builders.IConventionSkipNavigationBuilderImplementation;


/**
 * The base .NET class managing Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder, Microsoft.EntityFrameworkCore, Version=6.0.10.0, Culture=neutral, PublicKeyToken=adb9793829ddae60.
 * <p>
 * 
 * See: <a href="https://docs.microsoft.com/en-us/dotnet/api/Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder" target="_top">https://docs.microsoft.com/en-us/dotnet/api/Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder</a>
 */
public class InternalEntityTypeBuilder extends NetObject  {
    /**
     * Fully assembly qualified name: Microsoft.EntityFrameworkCore, Version=6.0.10.0, Culture=neutral, PublicKeyToken=adb9793829ddae60
     */
    public static final String assemblyFullName = "Microsoft.EntityFrameworkCore, Version=6.0.10.0, Culture=neutral, PublicKeyToken=adb9793829ddae60";
    /**
     * Assembly name: Microsoft.EntityFrameworkCore
     */
    public static final String assemblyShortName = "Microsoft.EntityFrameworkCore";
    /**
     * Qualified class name: Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder
     */
    public static final String className = "Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    /**
     * The type managed from JCOBridge. See {@link JCType}
     */
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            String classToCreate = className + ", "
                    + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Creating %s", classToCreate);
            JCType typeCreated = bridge.GetType(classToCreate);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Created: %s",
                        (typeCreated != null) ? typeCreated.toString() : "Returned null value");
            return typeCreated;
        } catch (JCException e) {
            JCOReflector.writeLog(e);
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }
    /**
     * Internal constructor. Use with caution 
     */
    public InternalEntityTypeBuilder(java.lang.Object instance) throws Throwable {
        super(instance);
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public java.lang.Object getJCOInstance() {
        return classInstance;
    }

    public void setJCOInstance(JCObject instance) {
        classInstance = instance;
        super.setJCOInstance(classInstance);
    }

    public JCType getJCOType() {
        return classType;
    }
    /**
     * Try to cast the {@link IJCOBridgeReflected} instance into {@link InternalEntityTypeBuilder}, a cast assert is made to check if types are compatible.
     * @param from {@link IJCOBridgeReflected} instance to be casted
     * @return {@link InternalEntityTypeBuilder} instance
     * @throws java.lang.Throwable in case of error during cast operation
     */
    public static InternalEntityTypeBuilder cast(IJCOBridgeReflected from) throws Throwable {
        NetType.AssertCast(classType, from);
        return new InternalEntityTypeBuilder(from.getJCOInstance());
    }

    // Constructors section
    
    public InternalEntityTypeBuilder() throws Throwable {
    }

    public InternalEntityTypeBuilder(EntityType metadata, InternalModelBuilder modelBuilder) throws Throwable {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            setJCOInstance((JCObject)classType.NewObject(metadata == null ? null : metadata.getJCOInstance(), modelBuilder == null ? null : modelBuilder.getJCOInstance()));
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



    
    // Methods section
    
    public boolean CanAddNavigation(java.lang.String navigationName, NetType type, ConfigurationSource configurationSource) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.OutOfMemoryException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("CanAddNavigation", navigationName, type == null ? null : type.getJCOInstance(), configurationSource == null ? null : configurationSource.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean CanIgnore(java.lang.String name, ConfigurationSource configurationSource) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.FormatException, system.globalization.CultureNotFoundException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("CanIgnore", name, configurationSource == null ? null : configurationSource.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean CanRemoveForeignKey(ForeignKey foreignKey, ConfigurationSource configurationSource) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("CanRemoveForeignKey", foreignKey == null ? null : foreignKey.getJCOInstance(), configurationSource == null ? null : configurationSource.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean CanRemoveIndex(Index index, ConfigurationSource configurationSource) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("CanRemoveIndex", index == null ? null : index.getJCOInstance(), configurationSource == null ? null : configurationSource.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean CanRemoveKey(ConfigurationSource configurationSource) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("CanRemoveKey", configurationSource == null ? null : configurationSource.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean CanRemoveKey(Key key, ConfigurationSource configurationSource) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("CanRemoveKey", key == null ? null : key.getJCOInstance(), configurationSource == null ? null : configurationSource.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean CanRemoveSkipNavigation(SkipNavigation skipNavigation, ConfigurationSource configurationSource) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("CanRemoveSkipNavigation", skipNavigation == null ? null : skipNavigation.getJCOInstance(), configurationSource == null ? null : configurationSource.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean CanSetBaseType(EntityType baseEntityType, ConfigurationSource configurationSource) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.OutOfMemoryException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("CanSetBaseType", baseEntityType == null ? null : baseEntityType.getJCOInstance(), configurationSource == null ? null : configurationSource.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean CanSetConstructorBinding(InstantiationBinding constructorBinding, ConfigurationSource configurationSource) throws Throwable, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.ArgumentException, system.ArgumentOutOfRangeException, system.OutOfMemoryException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("CanSetConstructorBinding", constructorBinding == null ? null : constructorBinding.getJCOInstance(), configurationSource == null ? null : configurationSource.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean CanSetDefiningQuery(LambdaExpression query, ConfigurationSource configurationSource) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.OutOfMemoryException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("CanSetDefiningQuery", query == null ? null : query.getJCOInstance(), configurationSource == null ? null : configurationSource.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean CanSetDiscriminator(java.lang.String name, NetType type, ConfigurationSource configurationSource) throws Throwable, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.IndexOutOfRangeException, system.ArgumentException, system.OutOfMemoryException, system.FormatException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.RankException, system.ArrayTypeMismatchException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("CanSetDiscriminator", name, type == null ? null : type.getJCOInstance(), configurationSource == null ? null : configurationSource.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean CanSetIsOwned(boolean owned, ConfigurationSource configurationSource) throws Throwable, system.NotSupportedException, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.InvalidOperationException, system.ArgumentException, system.globalization.CultureNotFoundException, system.IndexOutOfRangeException, system.ObjectDisposedException, system.FormatException, system.ArrayTypeMismatchException, system.OutOfMemoryException, system.RankException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("CanSetIsOwned", owned, configurationSource == null ? null : configurationSource.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean CanSetQueryFilter(LambdaExpression filter, ConfigurationSource configurationSource) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("CanSetQueryFilter", filter == null ? null : filter.getJCOInstance(), configurationSource == null ? null : configurationSource.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean CanSetServiceOnlyConstructorBinding(InstantiationBinding constructorBinding, ConfigurationSource configurationSource) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("CanSetServiceOnlyConstructorBinding", constructorBinding == null ? null : constructorBinding.getJCOInstance(), configurationSource == null ? null : configurationSource.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean ShouldReuniquifyTemporaryProperties(ForeignKey foreignKey) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.OutOfMemoryException, system.runtime.interopservices.ExternalException, system.globalization.CultureNotFoundException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("ShouldReuniquifyTemporaryProperties", foreignKey == null ? null : foreignKey.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DiscriminatorBuilder HasDiscriminator(ConfigurationSource configurationSource) throws Throwable, system.PlatformNotSupportedException, system.NotSupportedException, system.IndexOutOfRangeException, system.InvalidOperationException, system.ArgumentNullException, system.ArgumentException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.RankException, system.ArrayTypeMismatchException, system.MethodAccessException, system.MissingMethodException, system.MemberAccessException, system.reflection.TargetInvocationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objHasDiscriminator = (JCObject)classInstance.Invoke("HasDiscriminator", configurationSource == null ? null : configurationSource.getJCOInstance());
            return new DiscriminatorBuilder(objHasDiscriminator);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DiscriminatorBuilder HasDiscriminator(MemberInfo memberInfo, ConfigurationSource configurationSource) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.OutOfMemoryException, system.globalization.CultureNotFoundException, system.FormatException, system.MethodAccessException, system.MissingMethodException, system.MemberAccessException, system.reflection.TargetInvocationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objHasDiscriminator = (JCObject)classInstance.Invoke("HasDiscriminator", memberInfo == null ? null : memberInfo.getJCOInstance(), configurationSource == null ? null : configurationSource.getJCOInstance());
            return new DiscriminatorBuilder(objHasDiscriminator);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DiscriminatorBuilder HasDiscriminator(java.lang.String name, NetType type, ConfigurationSource configurationSource) throws Throwable, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.MethodAccessException, system.MissingMethodException, system.MemberAccessException, system.reflection.TargetInvocationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objHasDiscriminator = (JCObject)classInstance.Invoke("HasDiscriminator", name, type == null ? null : type.getJCOInstance(), configurationSource == null ? null : configurationSource.getJCOInstance());
            return new DiscriminatorBuilder(objHasDiscriminator);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IConventionEntityTypeBuilder HasConstructorBinding(InstantiationBinding constructorBinding, ConfigurationSource configurationSource) throws Throwable, system.ArgumentNullException, system.InvalidOperationException, system.IndexOutOfRangeException, system.ArgumentException, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.OutOfMemoryException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objHasConstructorBinding = (JCObject)classInstance.Invoke("HasConstructorBinding", constructorBinding == null ? null : constructorBinding.getJCOInstance(), configurationSource == null ? null : configurationSource.getJCOInstance());
            return new IConventionEntityTypeBuilderImplementation(objHasConstructorBinding);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IConventionEntityTypeBuilder HasServiceOnlyConstructorBinding(InstantiationBinding constructorBinding, ConfigurationSource configurationSource) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objHasServiceOnlyConstructorBinding = (JCObject)classInstance.Invoke("HasServiceOnlyConstructorBinding", constructorBinding == null ? null : constructorBinding.getJCOInstance(), configurationSource == null ? null : configurationSource.getJCOInstance());
            return new IConventionEntityTypeBuilderImplementation(objHasServiceOnlyConstructorBinding);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IMutableNavigationBase Navigation(MemberInfo memberInfo) throws Throwable, system.NotSupportedException, system.PlatformNotSupportedException, system.ArgumentOutOfRangeException, system.InvalidOperationException, system.ArgumentNullException, system.IndexOutOfRangeException, system.ArgumentException, system.OutOfMemoryException, system.FormatException, system.globalization.CultureNotFoundException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objNavigation = (JCObject)classInstance.Invoke("Navigation", memberInfo == null ? null : memberInfo.getJCOInstance());
            return new IMutableNavigationBaseImplementation(objNavigation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IMutableNavigationBase Navigation(java.lang.String navigationName) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.OutOfMemoryException, system.FormatException, system.globalization.CultureNotFoundException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objNavigation = (JCObject)classInstance.Invoke("Navigation", navigationName);
            return new IMutableNavigationBaseImplementation(objNavigation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public InternalEntityTypeBuilder HasBaseType(EntityType baseEntityType, ConfigurationSource configurationSource) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.ArrayTypeMismatchException, system.OutOfMemoryException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objHasBaseType = (JCObject)classInstance.Invoke("HasBaseType", baseEntityType == null ? null : baseEntityType.getJCOInstance(), configurationSource == null ? null : configurationSource.getJCOInstance());
            return new InternalEntityTypeBuilder(objHasBaseType);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public InternalEntityTypeBuilder HasBaseType(java.lang.String baseEntityTypeName, ConfigurationSource configurationSource) throws Throwable, system.InvalidOperationException, system.NotSupportedException, system.ArgumentNullException, system.globalization.CultureNotFoundException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.ArgumentException, system.PlatformNotSupportedException, system.OutOfMemoryException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objHasBaseType = (JCObject)classInstance.Invoke("HasBaseType", baseEntityTypeName, configurationSource == null ? null : configurationSource.getJCOInstance());
            return new InternalEntityTypeBuilder(objHasBaseType);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public InternalEntityTypeBuilder HasBaseType(NetType baseEntityType, ConfigurationSource configurationSource) throws Throwable, system.InvalidOperationException, system.NotSupportedException, system.ArgumentNullException, system.globalization.CultureNotFoundException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.ArgumentException, system.PlatformNotSupportedException, system.OutOfMemoryException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objHasBaseType = (JCObject)classInstance.Invoke("HasBaseType", baseEntityType == null ? null : baseEntityType.getJCOInstance(), configurationSource == null ? null : configurationSource.getJCOInstance());
            return new InternalEntityTypeBuilder(objHasBaseType);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public InternalEntityTypeBuilder HasDefiningQuery(LambdaExpression query, ConfigurationSource configurationSource) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objHasDefiningQuery = (JCObject)classInstance.Invoke("HasDefiningQuery", query == null ? null : query.getJCOInstance(), configurationSource == null ? null : configurationSource.getJCOInstance());
            return new InternalEntityTypeBuilder(objHasDefiningQuery);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public InternalEntityTypeBuilder HasNoDiscriminator(ConfigurationSource configurationSource) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.OutOfMemoryException, system.FormatException, system.MethodAccessException, system.MissingMethodException, system.MemberAccessException, system.reflection.TargetInvocationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objHasNoDiscriminator = (JCObject)classInstance.Invoke("HasNoDiscriminator", configurationSource == null ? null : configurationSource.getJCOInstance());
            return new InternalEntityTypeBuilder(objHasNoDiscriminator);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public InternalEntityTypeBuilder HasNoIndex(Index index, ConfigurationSource configurationSource) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.OutOfMemoryException, system.globalization.CultureNotFoundException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objHasNoIndex = (JCObject)classInstance.Invoke("HasNoIndex", index == null ? null : index.getJCOInstance(), configurationSource == null ? null : configurationSource.getJCOInstance());
            return new InternalEntityTypeBuilder(objHasNoIndex);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public InternalEntityTypeBuilder HasNoKey(ConfigurationSource configurationSource) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.ArrayTypeMismatchException, system.OutOfMemoryException, system.RankException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objHasNoKey = (JCObject)classInstance.Invoke("HasNoKey", configurationSource == null ? null : configurationSource.getJCOInstance());
            return new InternalEntityTypeBuilder(objHasNoKey);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public InternalEntityTypeBuilder HasNoKey(Key key, ConfigurationSource configurationSource) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.ObjectDisposedException, system.InvalidOperationException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.RankException, system.ArrayTypeMismatchException, system.NotSupportedException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objHasNoKey = (JCObject)classInstance.Invoke("HasNoKey", key == null ? null : key.getJCOInstance(), configurationSource == null ? null : configurationSource.getJCOInstance());
            return new InternalEntityTypeBuilder(objHasNoKey);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public InternalEntityTypeBuilder HasNoRelationship(ForeignKey foreignKey, ConfigurationSource configurationSource) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.OutOfMemoryException, system.globalization.CultureNotFoundException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objHasNoRelationship = (JCObject)classInstance.Invoke("HasNoRelationship", foreignKey == null ? null : foreignKey.getJCOInstance(), configurationSource == null ? null : configurationSource.getJCOInstance());
            return new InternalEntityTypeBuilder(objHasNoRelationship);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public InternalEntityTypeBuilder HasNoSkipNavigation(SkipNavigation skipNavigation, ConfigurationSource configurationSource) throws Throwable, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ObjectDisposedException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.ArgumentException, system.ArrayTypeMismatchException, system.OutOfMemoryException, system.NotSupportedException, system.globalization.CultureNotFoundException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objHasNoSkipNavigation = (JCObject)classInstance.Invoke("HasNoSkipNavigation", skipNavigation == null ? null : skipNavigation.getJCOInstance(), configurationSource == null ? null : configurationSource.getJCOInstance());
            return new InternalEntityTypeBuilder(objHasNoSkipNavigation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public InternalEntityTypeBuilder HasQueryFilter(LambdaExpression filter, ConfigurationSource configurationSource) throws Throwable, system.ArgumentNullException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.ArgumentException, system.OutOfMemoryException, system.FormatException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.ArgumentOutOfRangeException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objHasQueryFilter = (JCObject)classInstance.Invoke("HasQueryFilter", filter == null ? null : filter.getJCOInstance(), configurationSource == null ? null : configurationSource.getJCOInstance());
            return new InternalEntityTypeBuilder(objHasQueryFilter);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public InternalEntityTypeBuilder Ignore(java.lang.String name, ConfigurationSource configurationSource) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.OutOfMemoryException, system.FormatException, system.globalization.CultureNotFoundException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objIgnore = (JCObject)classInstance.Invoke("Ignore", name, configurationSource == null ? null : configurationSource.getJCOInstance());
            return new InternalEntityTypeBuilder(objIgnore);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public InternalEntityTypeBuilder IsOwned(boolean owned, ConfigurationSource configurationSource, ForeignKey futureOwnership) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.globalization.CultureNotFoundException, system.IndexOutOfRangeException, system.ArrayTypeMismatchException, system.OutOfMemoryException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objIsOwned = (JCObject)classInstance.Invoke("IsOwned", owned, configurationSource == null ? null : configurationSource.getJCOInstance(), futureOwnership == null ? null : futureOwnership.getJCOInstance());
            return new InternalEntityTypeBuilder(objIsOwned);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public InternalForeignKeyBuilder HasOwnership(JCORefOut<TypeIdentity> typeIdentity, MemberIdentity navigation, ConfigurationSource configurationSource) throws Throwable, system.NotSupportedException, system.PlatformNotSupportedException, system.ArgumentOutOfRangeException, system.InvalidOperationException, system.ArgumentNullException, system.IndexOutOfRangeException, system.ArgumentException, system.OutOfMemoryException, system.FormatException, system.ArrayTypeMismatchException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objHasOwnership = (JCObject)classInstance.Invoke("HasOwnership", typeIdentity.getJCRefOut(), navigation == null ? null : navigation.getJCOInstance(), configurationSource == null ? null : configurationSource.getJCOInstance());
            return new InternalForeignKeyBuilder(objHasOwnership);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public InternalForeignKeyBuilder HasOwnership(java.lang.String targetEntityTypeName, java.lang.String navigationName, ConfigurationSource configurationSource) throws Throwable, system.NotSupportedException, system.PlatformNotSupportedException, system.ArgumentOutOfRangeException, system.InvalidOperationException, system.ArgumentNullException, system.IndexOutOfRangeException, system.ArgumentException, system.OutOfMemoryException, system.FormatException, system.ArrayTypeMismatchException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objHasOwnership = (JCObject)classInstance.Invoke("HasOwnership", targetEntityTypeName, navigationName, configurationSource == null ? null : configurationSource.getJCOInstance());
            return new InternalForeignKeyBuilder(objHasOwnership);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public InternalForeignKeyBuilder HasOwnership(NetType targetEntityType, MemberIdentity navigation, ConfigurationSource configurationSource) throws Throwable, system.NotSupportedException, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.InvalidOperationException, system.RankException, system.ArgumentException, system.ArrayTypeMismatchException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objHasOwnership = (JCObject)classInstance.Invoke("HasOwnership", targetEntityType == null ? null : targetEntityType.getJCOInstance(), navigation == null ? null : navigation.getJCOInstance(), configurationSource == null ? null : configurationSource.getJCOInstance());
            return new InternalForeignKeyBuilder(objHasOwnership);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public InternalForeignKeyBuilder HasOwnership(NetType targetEntityType, MemberInfo navigationMember, ConfigurationSource configurationSource) throws Throwable, system.NotSupportedException, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.InvalidOperationException, system.RankException, system.ArgumentException, system.ArrayTypeMismatchException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objHasOwnership = (JCObject)classInstance.Invoke("HasOwnership", targetEntityType == null ? null : targetEntityType.getJCOInstance(), navigationMember == null ? null : navigationMember.getJCOInstance(), configurationSource == null ? null : configurationSource.getJCOInstance());
            return new InternalForeignKeyBuilder(objHasOwnership);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public InternalForeignKeyBuilder HasOwnership(NetType targetEntityType, MemberInfo navigationMember, MemberInfo inverseMember, ConfigurationSource configurationSource) throws Throwable, system.NotSupportedException, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.InvalidOperationException, system.RankException, system.ArgumentException, system.ArrayTypeMismatchException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objHasOwnership = (JCObject)classInstance.Invoke("HasOwnership", targetEntityType == null ? null : targetEntityType.getJCOInstance(), navigationMember == null ? null : navigationMember.getJCOInstance(), inverseMember == null ? null : inverseMember.getJCOInstance(), configurationSource == null ? null : configurationSource.getJCOInstance());
            return new InternalForeignKeyBuilder(objHasOwnership);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public InternalForeignKeyBuilder HasOwnership(NetType targetEntityType, java.lang.String navigationName, ConfigurationSource configurationSource) throws Throwable, system.NotSupportedException, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.InvalidOperationException, system.RankException, system.ArgumentException, system.ArrayTypeMismatchException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objHasOwnership = (JCObject)classInstance.Invoke("HasOwnership", targetEntityType == null ? null : targetEntityType.getJCOInstance(), navigationName, configurationSource == null ? null : configurationSource.getJCOInstance());
            return new InternalForeignKeyBuilder(objHasOwnership);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public InternalForeignKeyBuilder HasOwnership(NetType targetEntityType, java.lang.String navigationPropertyName, java.lang.String inversePropertyName, ConfigurationSource configurationSource) throws Throwable, system.NotSupportedException, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.InvalidOperationException, system.RankException, system.ArgumentException, system.ArrayTypeMismatchException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objHasOwnership = (JCObject)classInstance.Invoke("HasOwnership", targetEntityType == null ? null : targetEntityType.getJCOInstance(), navigationPropertyName, inversePropertyName, configurationSource == null ? null : configurationSource.getJCOInstance());
            return new InternalForeignKeyBuilder(objHasOwnership);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public InternalForeignKeyBuilder HasRelationship(EntityType targetEntityType, MemberInfo navigation, MemberInfo inverseNavigation, ConfigurationSource configurationSource, boolean setTargetAsPrincipal) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.OutOfMemoryException, system.globalization.CultureNotFoundException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objHasRelationship = (JCObject)classInstance.Invoke("HasRelationship", targetEntityType == null ? null : targetEntityType.getJCOInstance(), navigation == null ? null : navigation.getJCOInstance(), inverseNavigation == null ? null : inverseNavigation.getJCOInstance(), configurationSource == null ? null : configurationSource.getJCOInstance(), setTargetAsPrincipal);
            return new InternalForeignKeyBuilder(objHasRelationship);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public InternalForeignKeyBuilder HasRelationship(EntityType targetEntityType, java.lang.String navigationName, java.lang.String inverseNavigationName, ConfigurationSource configurationSource, boolean setTargetAsPrincipal) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.OutOfMemoryException, system.globalization.CultureNotFoundException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objHasRelationship = (JCObject)classInstance.Invoke("HasRelationship", targetEntityType == null ? null : targetEntityType.getJCOInstance(), navigationName, inverseNavigationName, configurationSource == null ? null : configurationSource.getJCOInstance(), setTargetAsPrincipal);
            return new InternalForeignKeyBuilder(objHasRelationship);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public InternalPropertyBuilder CreateUniqueProperty(NetType propertyType, java.lang.String propertyName, boolean required) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.globalization.CultureNotFoundException, system.OutOfMemoryException, system.runtime.interopservices.ExternalException, system.ArgumentOutOfRangeException, system.InvalidOperationException, system.IndexOutOfRangeException, system.FormatException, system.ArrayTypeMismatchException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objCreateUniqueProperty = (JCObject)classInstance.Invoke("CreateUniqueProperty", propertyType == null ? null : propertyType.getJCOInstance(), propertyName, required);
            return new InternalPropertyBuilder(objCreateUniqueProperty);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static RelationshipSnapshot DetachRelationship(ForeignKey foreignKey, boolean includeOwnedSharedType) throws Throwable, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ObjectDisposedException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.ArgumentException, system.ArrayTypeMismatchException, system.OutOfMemoryException, system.RankException, system.NotSupportedException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objDetachRelationship = (JCObject)classType.Invoke("DetachRelationship", foreignKey == null ? null : foreignKey.getJCOInstance(), includeOwnedSharedType);
            return new RelationshipSnapshot(objDetachRelationship);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static RelationshipSnapshot DetachRelationship(ForeignKey foreignKey) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.ObjectDisposedException, system.InvalidOperationException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.RankException, system.ArrayTypeMismatchException, system.NotSupportedException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objDetachRelationship = (JCObject)classType.Invoke("DetachRelationship", foreignKey == null ? null : foreignKey.getJCOInstance());
            return new RelationshipSnapshot(objDetachRelationship);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIConventionEntityTypeBuilder method available in IConventionEntityTypeBuilder to obtain an object with an invocable method
     */
    @Deprecated 
    public boolean CanAddNavigation(java.lang.String navigationName, boolean fromDataAnnotation) throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIConventionEntityTypeBuilder to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIConventionEntityTypeBuilder method available in IConventionEntityTypeBuilder to obtain an object with an invocable method
     */
    @Deprecated 
    public boolean CanHaveIndexerProperty(NetType propertyType, java.lang.String propertyName, boolean fromDataAnnotation) throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIConventionEntityTypeBuilder to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIConventionEntityTypeBuilder method available in IConventionEntityTypeBuilder to obtain an object with an invocable method
     */
    @Deprecated 
    public boolean CanHaveNavigation(MemberInfo navigation, boolean fromDataAnnotation) throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIConventionEntityTypeBuilder to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIConventionEntityTypeBuilder method available in IConventionEntityTypeBuilder to obtain an object with an invocable method
     */
    @Deprecated 
    public boolean CanHaveNavigation(java.lang.String navigationName, boolean fromDataAnnotation) throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIConventionEntityTypeBuilder to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIConventionEntityTypeBuilder method available in IConventionEntityTypeBuilder to obtain an object with an invocable method
     */
    @Deprecated 
    public boolean CanHaveNavigation(java.lang.String navigationName, NetType type, boolean fromDataAnnotation) throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIConventionEntityTypeBuilder to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIConventionEntityTypeBuilder method available in IConventionEntityTypeBuilder to obtain an object with an invocable method
     */
    @Deprecated 
    public boolean CanHaveProperty(MemberInfo memberInfo, boolean fromDataAnnotation) throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIConventionEntityTypeBuilder to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIConventionEntityTypeBuilder method available in IConventionEntityTypeBuilder to obtain an object with an invocable method
     */
    @Deprecated 
    public boolean CanHaveProperty(NetType propertyType, java.lang.String propertyName, boolean fromDataAnnotation) throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIConventionEntityTypeBuilder to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIConventionEntityTypeBuilder method available in IConventionEntityTypeBuilder to obtain an object with an invocable method
     */
    @Deprecated 
    public boolean CanHaveServiceProperty(MemberInfo memberInfo, boolean fromDataAnnotation) throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIConventionEntityTypeBuilder to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIConventionEntityTypeBuilder method available in IConventionEntityTypeBuilder to obtain an object with an invocable method
     */
    @Deprecated 
    public boolean CanHaveSkipNavigation(MemberInfo navigation, boolean fromDataAnnotation) throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIConventionEntityTypeBuilder to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIConventionEntityTypeBuilder method available in IConventionEntityTypeBuilder to obtain an object with an invocable method
     */
    @Deprecated 
    public boolean CanHaveSkipNavigation(java.lang.String skipNavigationName, boolean fromDataAnnotation) throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIConventionEntityTypeBuilder to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIConventionEntityTypeBuilder method available in IConventionEntityTypeBuilder to obtain an object with an invocable method
     */
    @Deprecated 
    public boolean CanHaveSkipNavigation(java.lang.String skipNavigationName, NetType type, boolean fromDataAnnotation) throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIConventionEntityTypeBuilder to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIConventionEntityTypeBuilder method available in IConventionEntityTypeBuilder to obtain an object with an invocable method
     */
    @Deprecated 
    public boolean CanIgnore(java.lang.String memberName, boolean fromDataAnnotation) throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIConventionEntityTypeBuilder to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIConventionEntityTypeBuilder method available in IConventionEntityTypeBuilder to obtain an object with an invocable method
     */
    @Deprecated 
    public boolean CanRemoveDiscriminator(boolean fromDataAnnotation) throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIConventionEntityTypeBuilder to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIConventionEntityTypeBuilder method available in IConventionEntityTypeBuilder to obtain an object with an invocable method
     */
    @Deprecated 
    public boolean CanRemoveIndex(IConventionIndex index, boolean fromDataAnnotation) throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIConventionEntityTypeBuilder to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIConventionEntityTypeBuilder method available in IConventionEntityTypeBuilder to obtain an object with an invocable method
     */
    @Deprecated 
    public boolean CanRemoveKey(boolean fromDataAnnotation) throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIConventionEntityTypeBuilder to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIConventionEntityTypeBuilder method available in IConventionEntityTypeBuilder to obtain an object with an invocable method
     */
    @Deprecated 
    public boolean CanRemoveKey(IConventionKey key, boolean fromDataAnnotation) throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIConventionEntityTypeBuilder to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIConventionEntityTypeBuilder method available in IConventionEntityTypeBuilder to obtain an object with an invocable method
     */
    @Deprecated 
    public boolean CanRemoveRelationship(IConventionForeignKey foreignKey, boolean fromDataAnnotation) throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIConventionEntityTypeBuilder to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIConventionEntityTypeBuilder method available in IConventionEntityTypeBuilder to obtain an object with an invocable method
     */
    @Deprecated 
    public boolean CanRemoveSkipNavigation(IConventionSkipNavigation skipNavigation, boolean fromDataAnnotation) throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIConventionEntityTypeBuilder to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIConventionEntityTypeBuilder method available in IConventionEntityTypeBuilder to obtain an object with an invocable method
     */
    @Deprecated 
    public boolean CanSetBaseType(IConventionEntityType baseEntityType, boolean fromDataAnnotation) throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIConventionEntityTypeBuilder to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIConventionEntityTypeBuilder method available in IConventionEntityTypeBuilder to obtain an object with an invocable method
     */
    @Deprecated 
    public boolean CanSetDefiningQuery(LambdaExpression query, boolean fromDataAnnotation) throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIConventionEntityTypeBuilder to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIConventionEntityTypeBuilder method available in IConventionEntityTypeBuilder to obtain an object with an invocable method
     */
    @Deprecated 
    public boolean CanSetDiscriminator(MemberInfo memberInfo, boolean fromDataAnnotation) throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIConventionEntityTypeBuilder to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIConventionEntityTypeBuilder method available in IConventionEntityTypeBuilder to obtain an object with an invocable method
     */
    @Deprecated 
    public boolean CanSetDiscriminator(java.lang.String name, boolean fromDataAnnotation) throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIConventionEntityTypeBuilder to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIConventionEntityTypeBuilder method available in IConventionEntityTypeBuilder to obtain an object with an invocable method
     */
    @Deprecated 
    public boolean CanSetDiscriminator(java.lang.String name, NetType type, boolean fromDataAnnotation) throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIConventionEntityTypeBuilder to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIConventionEntityTypeBuilder method available in IConventionEntityTypeBuilder to obtain an object with an invocable method
     */
    @Deprecated 
    public boolean CanSetDiscriminator(NetType type, boolean fromDataAnnotation) throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIConventionEntityTypeBuilder to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIConventionEntityTypeBuilder method available in IConventionEntityTypeBuilder to obtain an object with an invocable method
     */
    @Deprecated 
    public boolean CanSetQueryFilter(LambdaExpression filter, boolean fromDataAnnotation) throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIConventionEntityTypeBuilder to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIConventionEntityTypeBuilder method available in IConventionEntityTypeBuilder to obtain an object with an invocable method
     */
    @Deprecated 
    public boolean IsIgnored(java.lang.String memberName, boolean fromDataAnnotation) throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIConventionEntityTypeBuilder to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIConventionEntityTypeBuilder method available in IConventionEntityTypeBuilder to obtain an object with an invocable method
     */
    @Deprecated 
    public IConventionDiscriminatorBuilder HasDiscriminator(boolean fromDataAnnotation) throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIConventionEntityTypeBuilder to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIConventionEntityTypeBuilder method available in IConventionEntityTypeBuilder to obtain an object with an invocable method
     */
    @Deprecated 
    public IConventionDiscriminatorBuilder HasDiscriminator(MemberInfo memberInfo, boolean fromDataAnnotation) throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIConventionEntityTypeBuilder to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIConventionEntityTypeBuilder method available in IConventionEntityTypeBuilder to obtain an object with an invocable method
     */
    @Deprecated 
    public IConventionDiscriminatorBuilder HasDiscriminator(java.lang.String name, boolean fromDataAnnotation) throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIConventionEntityTypeBuilder to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIConventionEntityTypeBuilder method available in IConventionEntityTypeBuilder to obtain an object with an invocable method
     */
    @Deprecated 
    public IConventionDiscriminatorBuilder HasDiscriminator(java.lang.String name, NetType type, boolean fromDataAnnotation) throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIConventionEntityTypeBuilder to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIConventionEntityTypeBuilder method available in IConventionEntityTypeBuilder to obtain an object with an invocable method
     */
    @Deprecated 
    public IConventionDiscriminatorBuilder HasDiscriminator(NetType type, boolean fromDataAnnotation) throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIConventionEntityTypeBuilder to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIConventionEntityTypeBuilder method available in IConventionEntityTypeBuilder to obtain an object with an invocable method
     */
    @Deprecated 
    public IConventionEntityTypeBuilder HasBaseType(IConventionEntityType baseEntityType, boolean fromDataAnnotation) throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIConventionEntityTypeBuilder to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIConventionEntityTypeBuilder method available in IConventionEntityTypeBuilder to obtain an object with an invocable method
     */
    @Deprecated 
    public IConventionEntityTypeBuilder HasDefiningQuery(LambdaExpression query, boolean fromDataAnnotation) throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIConventionEntityTypeBuilder to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIConventionEntityTypeBuilder method available in IConventionEntityTypeBuilder to obtain an object with an invocable method
     */
    @Deprecated 
    public IConventionEntityTypeBuilder HasNoDeclaredDiscriminator(boolean fromDataAnnotation) throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIConventionEntityTypeBuilder to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIConventionEntityTypeBuilder method available in IConventionEntityTypeBuilder to obtain an object with an invocable method
     */
    @Deprecated 
    public IConventionEntityTypeBuilder HasNoDiscriminator(boolean fromDataAnnotation) throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIConventionEntityTypeBuilder to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIConventionEntityTypeBuilder method available in IConventionEntityTypeBuilder to obtain an object with an invocable method
     */
    @Deprecated 
    public IConventionEntityTypeBuilder HasNoIndex(IConventionIndex index, boolean fromDataAnnotation) throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIConventionEntityTypeBuilder to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIConventionEntityTypeBuilder method available in IConventionEntityTypeBuilder to obtain an object with an invocable method
     */
    @Deprecated 
    public IConventionEntityTypeBuilder HasNoKey(boolean fromDataAnnotation) throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIConventionEntityTypeBuilder to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIConventionEntityTypeBuilder method available in IConventionEntityTypeBuilder to obtain an object with an invocable method
     */
    @Deprecated 
    public IConventionEntityTypeBuilder HasNoKey(IConventionKey key, boolean fromDataAnnotation) throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIConventionEntityTypeBuilder to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIConventionEntityTypeBuilder method available in IConventionEntityTypeBuilder to obtain an object with an invocable method
     */
    @Deprecated 
    public IConventionEntityTypeBuilder HasNoRelationship(IConventionForeignKey foreignKey, boolean fromDataAnnotation) throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIConventionEntityTypeBuilder to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIConventionEntityTypeBuilder method available in IConventionEntityTypeBuilder to obtain an object with an invocable method
     */
    @Deprecated 
    public IConventionEntityTypeBuilder HasNoSkipNavigation(IConventionSkipNavigation skipNavigation, boolean fromDataAnnotation) throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIConventionEntityTypeBuilder to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIConventionEntityTypeBuilder method available in IConventionEntityTypeBuilder to obtain an object with an invocable method
     */
    @Deprecated 
    public IConventionEntityTypeBuilder HasQueryFilter(LambdaExpression filter, boolean fromDataAnnotation) throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIConventionEntityTypeBuilder to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIConventionEntityTypeBuilder method available in IConventionEntityTypeBuilder to obtain an object with an invocable method
     */
    @Deprecated 
    public IConventionEntityTypeBuilder Ignore(java.lang.String memberName, boolean fromDataAnnotation) throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIConventionEntityTypeBuilder to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIConventionEntityTypeBuilder method available in IConventionEntityTypeBuilder to obtain an object with an invocable method
     */
    @Deprecated 
    public IConventionForeignKeyBuilder HasOwnership(IConventionEntityType targetEntityType, MemberInfo navigation, boolean fromDataAnnotation) throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIConventionEntityTypeBuilder to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIConventionEntityTypeBuilder method available in IConventionEntityTypeBuilder to obtain an object with an invocable method
     */
    @Deprecated 
    public IConventionForeignKeyBuilder HasOwnership(IConventionEntityType targetEntityType, MemberInfo navigation, MemberInfo inverseNavigation, boolean fromDataAnnotation) throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIConventionEntityTypeBuilder to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIConventionEntityTypeBuilder method available in IConventionEntityTypeBuilder to obtain an object with an invocable method
     */
    @Deprecated 
    public IConventionForeignKeyBuilder HasOwnership(IConventionEntityType targetEntityType, java.lang.String navigationName, boolean fromDataAnnotation) throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIConventionEntityTypeBuilder to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIConventionEntityTypeBuilder method available in IConventionEntityTypeBuilder to obtain an object with an invocable method
     */
    @Deprecated 
    public IConventionForeignKeyBuilder HasOwnership(IConventionEntityType targetEntityType, java.lang.String navigationName, java.lang.String inverseNavigationName, boolean fromDataAnnotation) throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIConventionEntityTypeBuilder to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIConventionEntityTypeBuilder method available in IConventionEntityTypeBuilder to obtain an object with an invocable method
     */
    @Deprecated 
    public IConventionForeignKeyBuilder HasOwnership(NetType targetEntityType, MemberInfo navigation, boolean fromDataAnnotation) throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIConventionEntityTypeBuilder to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIConventionEntityTypeBuilder method available in IConventionEntityTypeBuilder to obtain an object with an invocable method
     */
    @Deprecated 
    public IConventionForeignKeyBuilder HasOwnership(NetType targetEntityType, MemberInfo navigation, MemberInfo inverseNavigation, boolean fromDataAnnotation) throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIConventionEntityTypeBuilder to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIConventionEntityTypeBuilder method available in IConventionEntityTypeBuilder to obtain an object with an invocable method
     */
    @Deprecated 
    public IConventionForeignKeyBuilder HasOwnership(NetType targetEntityType, java.lang.String navigationName, boolean fromDataAnnotation) throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIConventionEntityTypeBuilder to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIConventionEntityTypeBuilder method available in IConventionEntityTypeBuilder to obtain an object with an invocable method
     */
    @Deprecated 
    public IConventionForeignKeyBuilder HasOwnership(NetType targetEntityType, java.lang.String navigationName, java.lang.String inverseNavigationName, boolean fromDataAnnotation) throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIConventionEntityTypeBuilder to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIConventionEntityTypeBuilder method available in IConventionEntityTypeBuilder to obtain an object with an invocable method
     */
    @Deprecated 
    public IConventionForeignKeyBuilder HasRelationship(IConventionEntityType targetEntityType, boolean fromDataAnnotation) throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIConventionEntityTypeBuilder to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIConventionEntityTypeBuilder method available in IConventionEntityTypeBuilder to obtain an object with an invocable method
     */
    @Deprecated 
    public IConventionForeignKeyBuilder HasRelationship(IConventionEntityType principalEntityType, IConventionKey principalKey, boolean fromDataAnnotation) throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIConventionEntityTypeBuilder to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIConventionEntityTypeBuilder method available in IConventionEntityTypeBuilder to obtain an object with an invocable method
     */
    @Deprecated 
    public IConventionForeignKeyBuilder HasRelationship(IConventionEntityType targetEntityType, MemberInfo navigation, boolean setTargetAsPrincipal, boolean fromDataAnnotation) throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIConventionEntityTypeBuilder to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIConventionEntityTypeBuilder method available in IConventionEntityTypeBuilder to obtain an object with an invocable method
     */
    @Deprecated 
    public IConventionForeignKeyBuilder HasRelationship(IConventionEntityType targetEntityType, MemberInfo navigation, MemberInfo inverseNavigation, boolean setTargetAsPrincipal, boolean fromDataAnnotation) throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIConventionEntityTypeBuilder to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIConventionEntityTypeBuilder method available in IConventionEntityTypeBuilder to obtain an object with an invocable method
     */
    @Deprecated 
    public IConventionForeignKeyBuilder HasRelationship(IConventionEntityType targetEntityType, java.lang.String navigationName, boolean setTargetAsPrincipal, boolean fromDataAnnotation) throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIConventionEntityTypeBuilder to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIConventionEntityTypeBuilder method available in IConventionEntityTypeBuilder to obtain an object with an invocable method
     */
    @Deprecated 
    public IConventionForeignKeyBuilder HasRelationship(IConventionEntityType targetEntityType, java.lang.String navigationName, java.lang.String inverseNavigationName, boolean setTargetAsPrincipal, boolean fromDataAnnotation) throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIConventionEntityTypeBuilder to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIConventionEntityTypeBuilder method available in IConventionEntityTypeBuilder to obtain an object with an invocable method
     */
    @Deprecated 
    public IConventionPropertyBuilder IndexerProperty(NetType propertyType, java.lang.String propertyName, boolean fromDataAnnotation) throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIConventionEntityTypeBuilder to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIConventionEntityTypeBuilder method available in IConventionEntityTypeBuilder to obtain an object with an invocable method
     */
    @Deprecated 
    public IConventionPropertyBuilder Property(MemberInfo memberInfo, boolean fromDataAnnotation) throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIConventionEntityTypeBuilder to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIConventionEntityTypeBuilder method available in IConventionEntityTypeBuilder to obtain an object with an invocable method
     */
    @Deprecated 
    public IConventionPropertyBuilder Property(NetType propertyType, java.lang.String propertyName, boolean setTypeConfigurationSource, boolean fromDataAnnotation) throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIConventionEntityTypeBuilder to obtain the full interface.");
    }

    /**
     * @deprecated Not for public use because the method is implemented in .NET with an explicit interface.
     *    Use the static ToIConventionEntityTypeBuilder method available in IConventionEntityTypeBuilder to obtain an object with an invocable method
     */
    @Deprecated 
    public IConventionServicePropertyBuilder ServiceProperty(MemberInfo memberInfo, boolean fromDataAnnotation) throws Throwable {
        throw new UnsupportedOperationException("Not for public use because the method is implemented with an explicit interface. Use ToIConventionEntityTypeBuilder to obtain the full interface.");
    }


    
    // Properties section
    


    // Instance Events section
    

}