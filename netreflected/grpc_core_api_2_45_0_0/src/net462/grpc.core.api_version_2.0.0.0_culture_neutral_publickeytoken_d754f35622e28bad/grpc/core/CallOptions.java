/*
 *  MIT License
 *
 *  Copyright (c) 2022 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package grpc.core;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import system.ValueType;
import grpc.core.Metadata;
import grpc.core.CallOptions;
import system.threading.CancellationToken;
import grpc.core.CallCredentials;
import system.DateTime;
import grpc.core.ContextPropagationToken;
import grpc.core.WriteOptions;


/**
 * The base .NET class managing Grpc.Core.CallOptions, Grpc.Core.Api, Version=2.0.0.0, Culture=neutral, PublicKeyToken=d754f35622e28bad.
 * <p>
 * 
 * See: <a href="https://docs.microsoft.com/en-us/dotnet/api/Grpc.Core.CallOptions" target="_top">https://docs.microsoft.com/en-us/dotnet/api/Grpc.Core.CallOptions</a>
 */
public class CallOptions extends ValueType  {
    /**
     * Fully assembly qualified name: Grpc.Core.Api, Version=2.0.0.0, Culture=neutral, PublicKeyToken=d754f35622e28bad
     */
    public static final String assemblyFullName = "Grpc.Core.Api, Version=2.0.0.0, Culture=neutral, PublicKeyToken=d754f35622e28bad";
    /**
     * Assembly name: Grpc.Core.Api
     */
    public static final String assemblyShortName = "Grpc.Core.Api";
    /**
     * Qualified class name: Grpc.Core.CallOptions
     */
    public static final String className = "Grpc.Core.CallOptions";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    /**
     * The type managed from JCOBridge. See {@link JCType}
     */
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            String classToCreate = className + ", "
                    + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Creating %s", classToCreate);
            JCType typeCreated = bridge.GetType(classToCreate);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Created: %s",
                        (typeCreated != null) ? typeCreated.toString() : "Returned null value");
            return typeCreated;
        } catch (JCException e) {
            JCOReflector.writeLog(e);
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }
    /**
     * Internal constructor. Use with caution 
     */
    public CallOptions(java.lang.Object instance) throws Throwable {
        super(instance);
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public java.lang.Object getJCOInstance() {
        return classInstance;
    }

    public void setJCOInstance(JCObject instance) {
        classInstance = instance;
        super.setJCOInstance(classInstance);
    }

    public JCType getJCOType() {
        return classType;
    }
    /**
     * Try to cast the {@link IJCOBridgeReflected} instance into {@link CallOptions}, a cast assert is made to check if types are compatible.
     * @param from {@link IJCOBridgeReflected} instance to be casted
     * @return {@link CallOptions} instance
     * @throws java.lang.Throwable in case of error during cast operation
     */
    public static CallOptions cast(IJCOBridgeReflected from) throws Throwable {
        NetType.AssertCast(classType, from);
        return new CallOptions(from.getJCOInstance());
    }

    // Constructors section
    
    public CallOptions() throws Throwable {
    }



    
    // Methods section
    
    public CallOptions WithCancellationToken(CancellationToken cancellationToken) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objWithCancellationToken = (JCObject)classInstance.Invoke("WithCancellationToken", cancellationToken == null ? null : cancellationToken.getJCOInstance());
            return new CallOptions(objWithCancellationToken);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public CallOptions WithCredentials(CallCredentials credentials) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objWithCredentials = (JCObject)classInstance.Invoke("WithCredentials", credentials == null ? null : credentials.getJCOInstance());
            return new CallOptions(objWithCredentials);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public CallOptions WithDeadline(DateTime deadline) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objWithDeadline = (JCObject)classInstance.Invoke("WithDeadline", deadline == null ? null : deadline.getJCOInstance());
            return new CallOptions(objWithDeadline);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public CallOptions WithHeaders(Metadata headers) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objWithHeaders = (JCObject)classInstance.Invoke("WithHeaders", headers == null ? null : headers.getJCOInstance());
            return new CallOptions(objWithHeaders);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public CallOptions WithPropagationToken(ContextPropagationToken propagationToken) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objWithPropagationToken = (JCObject)classInstance.Invoke("WithPropagationToken", propagationToken == null ? null : propagationToken.getJCOInstance());
            return new CallOptions(objWithPropagationToken);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public CallOptions WithWaitForReady(boolean waitForReady) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objWithWaitForReady = (JCObject)classInstance.Invoke("WithWaitForReady", waitForReady);
            return new CallOptions(objWithWaitForReady);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public CallOptions WithWriteOptions(WriteOptions writeOptions) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objWithWriteOptions = (JCObject)classInstance.Invoke("WithWriteOptions", writeOptions == null ? null : writeOptions.getJCOInstance());
            return new CallOptions(objWithWriteOptions);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    
    public boolean getIsWaitForReady() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("IsWaitForReady");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public CallCredentials getCredentials() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("Credentials");
            return new CallCredentials(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ContextPropagationToken getPropagationToken() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("PropagationToken");
            return new ContextPropagationToken(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Metadata getHeaders() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("Headers");
            return new Metadata(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public WriteOptions getWriteOptions() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("WriteOptions");
            return new WriteOptions(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public CancellationToken getCancellationToken() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("CancellationToken");
            return new CancellationToken(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



    // Instance Events section
    

}