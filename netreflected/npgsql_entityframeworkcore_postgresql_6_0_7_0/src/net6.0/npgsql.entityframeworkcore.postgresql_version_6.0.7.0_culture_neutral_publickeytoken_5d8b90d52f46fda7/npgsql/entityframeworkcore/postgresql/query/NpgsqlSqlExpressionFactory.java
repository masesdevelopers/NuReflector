/*
 *  MIT License
 *
 *  Copyright (c) 2022 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package npgsql.entityframeworkcore.postgresql.query;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import microsoft.entityframeworkcore.query.SqlExpressionFactory;
import microsoft.entityframeworkcore.query.SqlExpressionFactoryDependencies;
import microsoft.entityframeworkcore.query.sqlexpressions.SqlBinaryExpression;
import system.linq.expressions.ExpressionType;
import microsoft.entityframeworkcore.query.sqlexpressions.SqlExpression;
import microsoft.entityframeworkcore.storage.RelationalTypeMapping;
import npgsql.entityframeworkcore.postgresql.query.expressions.internal.PostgresAllExpression;
import npgsql.entityframeworkcore.postgresql.query.expressions.internal.PostgresAllOperatorType;
import npgsql.entityframeworkcore.postgresql.query.expressions.internal.PostgresAnyExpression;
import npgsql.entityframeworkcore.postgresql.query.expressions.internal.PostgresAnyOperatorType;
import npgsql.entityframeworkcore.postgresql.query.expressions.internal.PostgresArrayIndexExpression;
import npgsql.entityframeworkcore.postgresql.query.expressions.internal.PostgresBinaryExpression;
import npgsql.entityframeworkcore.postgresql.query.expressions.PostgresExpressionType;
import npgsql.entityframeworkcore.postgresql.query.expressions.internal.PostgresILikeExpression;
import npgsql.entityframeworkcore.postgresql.query.expressions.internal.PostgresJsonTraversalExpression;
import npgsql.entityframeworkcore.postgresql.query.expressions.internal.PostgresNewArrayExpression;
import npgsql.entityframeworkcore.postgresql.query.expressions.internal.PostgresRegexMatchExpression;
import system.text.regularexpressions.RegexOptions;


/**
 * The base .NET class managing Npgsql.EntityFrameworkCore.PostgreSQL.Query.NpgsqlSqlExpressionFactory, Npgsql.EntityFrameworkCore.PostgreSQL, Version=6.0.7.0, Culture=neutral, PublicKeyToken=5d8b90d52f46fda7.
 * <p>
 * 
 * See: <a href="https://docs.microsoft.com/en-us/dotnet/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.NpgsqlSqlExpressionFactory" target="_top">https://docs.microsoft.com/en-us/dotnet/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.NpgsqlSqlExpressionFactory</a>
 */
public class NpgsqlSqlExpressionFactory extends SqlExpressionFactory  {
    /**
     * Fully assembly qualified name: Npgsql.EntityFrameworkCore.PostgreSQL, Version=6.0.7.0, Culture=neutral, PublicKeyToken=5d8b90d52f46fda7
     */
    public static final String assemblyFullName = "Npgsql.EntityFrameworkCore.PostgreSQL, Version=6.0.7.0, Culture=neutral, PublicKeyToken=5d8b90d52f46fda7";
    /**
     * Assembly name: Npgsql.EntityFrameworkCore.PostgreSQL
     */
    public static final String assemblyShortName = "Npgsql.EntityFrameworkCore.PostgreSQL";
    /**
     * Qualified class name: Npgsql.EntityFrameworkCore.PostgreSQL.Query.NpgsqlSqlExpressionFactory
     */
    public static final String className = "Npgsql.EntityFrameworkCore.PostgreSQL.Query.NpgsqlSqlExpressionFactory";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    /**
     * The type managed from JCOBridge. See {@link JCType}
     */
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            String classToCreate = className + ", "
                    + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Creating %s", classToCreate);
            JCType typeCreated = bridge.GetType(classToCreate);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Created: %s",
                        (typeCreated != null) ? typeCreated.toString() : "Returned null value");
            return typeCreated;
        } catch (JCException e) {
            JCOReflector.writeLog(e);
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }
    /**
     * Internal constructor. Use with caution 
     */
    public NpgsqlSqlExpressionFactory(java.lang.Object instance) throws Throwable {
        super(instance);
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public java.lang.Object getJCOInstance() {
        return classInstance;
    }

    public void setJCOInstance(JCObject instance) {
        classInstance = instance;
        super.setJCOInstance(classInstance);
    }

    public JCType getJCOType() {
        return classType;
    }
    /**
     * Try to cast the {@link IJCOBridgeReflected} instance into {@link NpgsqlSqlExpressionFactory}, a cast assert is made to check if types are compatible.
     * @param from {@link IJCOBridgeReflected} instance to be casted
     * @return {@link NpgsqlSqlExpressionFactory} instance
     * @throws java.lang.Throwable in case of error during cast operation
     */
    public static NpgsqlSqlExpressionFactory cast(IJCOBridgeReflected from) throws Throwable {
        NetType.AssertCast(classType, from);
        return new NpgsqlSqlExpressionFactory(from.getJCOInstance());
    }

    // Constructors section
    
    public NpgsqlSqlExpressionFactory() throws Throwable {
    }

    public NpgsqlSqlExpressionFactory(SqlExpressionFactoryDependencies dependencies) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.OutOfMemoryException, system.FormatException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            setJCOInstance((JCObject)classType.NewObject(dependencies == null ? null : dependencies.getJCOInstance()));
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



    
    // Methods section
    
    public SqlBinaryExpression MakeBinary(ExpressionType operatorType, SqlExpression left, SqlExpression right, RelationalTypeMapping typeMapping) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.OutOfMemoryException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objMakeBinary = (JCObject)classInstance.Invoke("MakeBinary", operatorType == null ? null : operatorType.getJCOInstance(), left == null ? null : left.getJCOInstance(), right == null ? null : right.getJCOInstance(), typeMapping == null ? null : typeMapping.getJCOInstance());
            return new SqlBinaryExpression(objMakeBinary);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SqlExpression ApplyTypeMapping(SqlExpression sqlExpression, RelationalTypeMapping typeMapping) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.FormatException, system.IndexOutOfRangeException, system.RankException, system.ArrayTypeMismatchException, system.globalization.CultureNotFoundException, system.MissingMethodException, system.reflection.TargetInvocationException, system.threading.SynchronizationLockException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objApplyTypeMapping = (JCObject)classInstance.Invoke("ApplyTypeMapping", sqlExpression == null ? null : sqlExpression.getJCOInstance(), typeMapping == null ? null : typeMapping.getJCOInstance());
            return new SqlExpression(objApplyTypeMapping);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public SqlExpression GenerateOneBasedIndexExpression(SqlExpression expression) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGenerateOneBasedIndexExpression = (JCObject)classInstance.Invoke("GenerateOneBasedIndexExpression", expression == null ? null : expression.getJCOInstance());
            return new SqlExpression(objGenerateOneBasedIndexExpression);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PostgresAllExpression All(SqlExpression item, SqlExpression array, PostgresAllOperatorType operatorType) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.FormatException, system.RankException, system.ArrayTypeMismatchException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objAll = (JCObject)classInstance.Invoke("All", item == null ? null : item.getJCOInstance(), array == null ? null : array.getJCOInstance(), operatorType == null ? null : operatorType.getJCOInstance());
            return new PostgresAllExpression(objAll);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PostgresAnyExpression Any(SqlExpression item, SqlExpression array, PostgresAnyOperatorType operatorType) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.FormatException, system.RankException, system.ArrayTypeMismatchException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objAny = (JCObject)classInstance.Invoke("Any", item == null ? null : item.getJCOInstance(), array == null ? null : array.getJCOInstance(), operatorType == null ? null : operatorType.getJCOInstance());
            return new PostgresAnyExpression(objAny);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PostgresArrayIndexExpression ArrayIndex(SqlExpression array, SqlExpression index, RelationalTypeMapping typeMapping) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.FormatException, system.IndexOutOfRangeException, system.OutOfMemoryException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objArrayIndex = (JCObject)classInstance.Invoke("ArrayIndex", array == null ? null : array.getJCOInstance(), index == null ? null : index.getJCOInstance(), typeMapping == null ? null : typeMapping.getJCOInstance());
            return new PostgresArrayIndexExpression(objArrayIndex);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PostgresBinaryExpression AtTimeZone(SqlExpression timestamp, SqlExpression timeZone, NetType type, RelationalTypeMapping typeMapping) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.FormatException, system.globalization.CultureNotFoundException, system.OutOfMemoryException, system.runtime.interopservices.ExternalException, system.IndexOutOfRangeException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objAtTimeZone = (JCObject)classInstance.Invoke("AtTimeZone", timestamp == null ? null : timestamp.getJCOInstance(), timeZone == null ? null : timeZone.getJCOInstance(), type == null ? null : type.getJCOInstance(), typeMapping == null ? null : typeMapping.getJCOInstance());
            return new PostgresBinaryExpression(objAtTimeZone);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PostgresBinaryExpression AtUtc(SqlExpression timestamp, RelationalTypeMapping typeMapping) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.FormatException, system.runtime.interopservices.ExternalException, system.globalization.CultureNotFoundException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objAtUtc = (JCObject)classInstance.Invoke("AtUtc", timestamp == null ? null : timestamp.getJCOInstance(), typeMapping == null ? null : typeMapping.getJCOInstance());
            return new PostgresBinaryExpression(objAtUtc);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PostgresBinaryExpression ContainedBy(SqlExpression left, SqlExpression right) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.OutOfMemoryException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objContainedBy = (JCObject)classInstance.Invoke("ContainedBy", left == null ? null : left.getJCOInstance(), right == null ? null : right.getJCOInstance());
            return new PostgresBinaryExpression(objContainedBy);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PostgresBinaryExpression Contains(SqlExpression left, SqlExpression right) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.OutOfMemoryException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objContains = (JCObject)classInstance.Invoke("Contains", left == null ? null : left.getJCOInstance(), right == null ? null : right.getJCOInstance());
            return new PostgresBinaryExpression(objContains);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PostgresBinaryExpression MakePostgresBinary(PostgresExpressionType operatorType, SqlExpression left, SqlExpression right, RelationalTypeMapping typeMapping) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.OutOfMemoryException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objMakePostgresBinary = (JCObject)classInstance.Invoke("MakePostgresBinary", operatorType == null ? null : operatorType.getJCOInstance(), left == null ? null : left.getJCOInstance(), right == null ? null : right.getJCOInstance(), typeMapping == null ? null : typeMapping.getJCOInstance());
            return new PostgresBinaryExpression(objMakePostgresBinary);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PostgresBinaryExpression Overlaps(SqlExpression left, SqlExpression right) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.OutOfMemoryException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objOverlaps = (JCObject)classInstance.Invoke("Overlaps", left == null ? null : left.getJCOInstance(), right == null ? null : right.getJCOInstance());
            return new PostgresBinaryExpression(objOverlaps);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PostgresILikeExpression ILike(SqlExpression match, SqlExpression pattern, SqlExpression escapeChar) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.FormatException, system.RankException, system.ArrayTypeMismatchException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objILike = (JCObject)classInstance.Invoke("ILike", match == null ? null : match.getJCOInstance(), pattern == null ? null : pattern.getJCOInstance(), escapeChar == null ? null : escapeChar.getJCOInstance());
            return new PostgresILikeExpression(objILike);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PostgresJsonTraversalExpression JsonTraversal(SqlExpression expression, boolean returnsText, NetType type, RelationalTypeMapping typeMapping) throws Throwable, system.ArgumentNullException, system.PlatformNotSupportedException, system.ArgumentException, system.FormatException, system.ArgumentOutOfRangeException, system.InvalidOperationException, system.NotSupportedException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objJsonTraversal = (JCObject)classInstance.Invoke("JsonTraversal", expression == null ? null : expression.getJCOInstance(), returnsText, type == null ? null : type.getJCOInstance(), typeMapping == null ? null : typeMapping.getJCOInstance());
            return new PostgresJsonTraversalExpression(objJsonTraversal);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public PostgresRegexMatchExpression RegexMatch(SqlExpression match, SqlExpression pattern, RegexOptions options) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.FormatException, system.RankException, system.ArrayTypeMismatchException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objRegexMatch = (JCObject)classInstance.Invoke("RegexMatch", match == null ? null : match.getJCOInstance(), pattern == null ? null : pattern.getJCOInstance(), options == null ? null : options.getJCOInstance());
            return new PostgresRegexMatchExpression(objRegexMatch);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    


    // Instance Events section
    

}