/*
 *  MIT License
 *
 *  Copyright (c) 2022 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package microsoft.entityframeworkcore.changetracking.internal;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import microsoft.entityframeworkcore.changetracking.internal.StateManagerDependencies;
import microsoft.entityframeworkcore.changetracking.internal.InternalEntityEntry;
import microsoft.entityframeworkcore.metadata.IForeignKey;
import microsoft.entityframeworkcore.metadata.IForeignKeyImplementation;
import microsoft.entityframeworkcore.metadata.IEntityType;
import microsoft.entityframeworkcore.metadata.IEntityTypeImplementation;
import microsoft.entityframeworkcore.storage.ValueBuffer;
import microsoft.entityframeworkcore.metadata.IKey;
import microsoft.entityframeworkcore.metadata.IKeyImplementation;
import microsoft.entityframeworkcore.internal.IEntityFinder;
import microsoft.entityframeworkcore.internal.IEntityFinderImplementation;
import system.threading.tasks.Task;
import system.threading.CancellationToken;
import microsoft.entityframeworkcore.EntityState;
import microsoft.entityframeworkcore.metadata.INavigationBase;
import microsoft.entityframeworkcore.metadata.INavigationBaseImplementation;
import microsoft.entityframeworkcore.changetracking.CascadeTiming;
import microsoft.entityframeworkcore.changetracking.internal.IChangeDetector;
import microsoft.entityframeworkcore.changetracking.internal.IChangeDetectorImplementation;
import microsoft.entityframeworkcore.changetracking.internal.IInternalEntityEntryNotifier;
import microsoft.entityframeworkcore.changetracking.internal.IInternalEntityEntryNotifierImplementation;
import microsoft.entityframeworkcore.changetracking.internal.IValueGenerationManager;
import microsoft.entityframeworkcore.changetracking.internal.IValueGenerationManagerImplementation;
import microsoft.entityframeworkcore.DbContext;
import microsoft.entityframeworkcore.internal.IEntityFinderFactory;
import microsoft.entityframeworkcore.internal.IEntityFinderFactoryImplementation;
import microsoft.entityframeworkcore.metadata.IModel;
import microsoft.entityframeworkcore.metadata.IModelImplementation;
import microsoft.entityframeworkcore.query.IEntityMaterializerSource;
import microsoft.entityframeworkcore.query.IEntityMaterializerSourceImplementation;


/**
 * The base .NET class managing Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager, Microsoft.EntityFrameworkCore, Version=6.0.1.0, Culture=neutral, PublicKeyToken=adb9793829ddae60.
 * <p>
 * 
 * See: <a href="https://docs.microsoft.com/en-us/dotnet/api/Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager" target="_top">https://docs.microsoft.com/en-us/dotnet/api/Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager</a>
 */
public class StateManager extends NetObject  {
    /**
     * Fully assembly qualified name: Microsoft.EntityFrameworkCore, Version=6.0.1.0, Culture=neutral, PublicKeyToken=adb9793829ddae60
     */
    public static final String assemblyFullName = "Microsoft.EntityFrameworkCore, Version=6.0.1.0, Culture=neutral, PublicKeyToken=adb9793829ddae60";
    /**
     * Assembly name: Microsoft.EntityFrameworkCore
     */
    public static final String assemblyShortName = "Microsoft.EntityFrameworkCore";
    /**
     * Qualified class name: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager
     */
    public static final String className = "Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    /**
     * The type managed from JCOBridge. See {@link JCType}
     */
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            String classToCreate = className + ", "
                    + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Creating %s", classToCreate);
            JCType typeCreated = bridge.GetType(classToCreate);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Created: %s",
                        (typeCreated != null) ? typeCreated.toString() : "Returned null value");
            return typeCreated;
        } catch (JCException e) {
            JCOReflector.writeLog(e);
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }
    /**
     * Internal constructor. Use with caution 
     */
    public StateManager(java.lang.Object instance) throws Throwable {
        super(instance);
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public java.lang.Object getJCOInstance() {
        return classInstance;
    }

    public void setJCOInstance(JCObject instance) {
        classInstance = instance;
        super.setJCOInstance(classInstance);
    }

    public JCType getJCOType() {
        return classType;
    }
    /**
     * Try to cast the {@link IJCOBridgeReflected} instance into {@link StateManager}, a cast assert is made to check if types are compatible.
     * @param from {@link IJCOBridgeReflected} instance to be casted
     * @return {@link StateManager} instance
     * @throws java.lang.Throwable in case of error during cast operation
     */
    public static StateManager cast(IJCOBridgeReflected from) throws Throwable {
        NetType.AssertCast(classType, from);
        return new StateManager(from.getJCOInstance());
    }

    // Constructors section
    
    public StateManager() throws Throwable {
    }

    public StateManager(StateManagerDependencies dependencies) throws Throwable {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            setJCOInstance((JCObject)classType.NewObject(dependencies == null ? null : dependencies.getJCOInstance()));
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



    
    // Methods section
    
    public int GetCountForState(boolean added, boolean modified, boolean deleted, boolean unchanged, boolean countDeletedSharedIdentity) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (int)classInstance.Invoke("GetCountForState", added, modified, deleted, unchanged, countDeletedSharedIdentity);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int SaveChanges(boolean acceptAllChangesOnSuccess) throws Throwable, system.NotSupportedException, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.InvalidOperationException, system.ArgumentException, system.ObjectDisposedException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (int)classInstance.Invoke("SaveChanges", acceptAllChangesOnSuccess);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public InternalEntityEntry FindPrincipal(InternalEntityEntry dependentEntry, IForeignKey foreignKey) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.InvalidOperationException, system.IndexOutOfRangeException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objFindPrincipal = (JCObject)classInstance.Invoke("FindPrincipal", dependentEntry == null ? null : dependentEntry.getJCOInstance(), foreignKey == null ? null : foreignKey.getJCOInstance());
            return new InternalEntityEntry(objFindPrincipal);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public InternalEntityEntry FindPrincipalUsingPreStoreGeneratedValues(InternalEntityEntry dependentEntry, IForeignKey foreignKey) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.InvalidOperationException, system.IndexOutOfRangeException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objFindPrincipalUsingPreStoreGeneratedValues = (JCObject)classInstance.Invoke("FindPrincipalUsingPreStoreGeneratedValues", dependentEntry == null ? null : dependentEntry.getJCOInstance(), foreignKey == null ? null : foreignKey.getJCOInstance());
            return new InternalEntityEntry(objFindPrincipalUsingPreStoreGeneratedValues);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public InternalEntityEntry FindPrincipalUsingRelationshipSnapshot(InternalEntityEntry dependentEntry, IForeignKey foreignKey) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.InvalidOperationException, system.IndexOutOfRangeException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objFindPrincipalUsingRelationshipSnapshot = (JCObject)classInstance.Invoke("FindPrincipalUsingRelationshipSnapshot", dependentEntry == null ? null : dependentEntry.getJCOInstance(), foreignKey == null ? null : foreignKey.getJCOInstance());
            return new InternalEntityEntry(objFindPrincipalUsingRelationshipSnapshot);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public InternalEntityEntry GetOrCreateEntry(NetObject entity, IEntityType entityType) throws Throwable, system.ArgumentNullException, system.PlatformNotSupportedException, system.InvalidOperationException, system.NotSupportedException, system.ArgumentOutOfRangeException, system.ObjectDisposedException, system.IndexOutOfRangeException, system.ArgumentException, system.OutOfMemoryException, system.FormatException, system.globalization.CultureNotFoundException, system.RankException, system.ArrayTypeMismatchException, system.collections.generic.KeyNotFoundException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGetOrCreateEntry = (JCObject)classInstance.Invoke("GetOrCreateEntry", entity == null ? null : entity.getJCOInstance(), entityType == null ? null : entityType.getJCOInstance());
            return new InternalEntityEntry(objGetOrCreateEntry);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public InternalEntityEntry GetOrCreateEntry(NetObject entity) throws Throwable, system.ArgumentNullException, system.PlatformNotSupportedException, system.InvalidOperationException, system.NotSupportedException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.IndexOutOfRangeException, system.ArgumentException, system.runtime.interopservices.ExternalException, system.globalization.CultureNotFoundException, system.RankException, system.ArrayTypeMismatchException, system.collections.generic.KeyNotFoundException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGetOrCreateEntry = (JCObject)classInstance.Invoke("GetOrCreateEntry", entity == null ? null : entity.getJCOInstance());
            return new InternalEntityEntry(objGetOrCreateEntry);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public InternalEntityEntry StartTracking(InternalEntityEntry entry) throws Throwable, system.NotSupportedException, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.InvalidOperationException, system.runtime.interopservices.ExternalException, system.globalization.CultureNotFoundException, system.ArgumentException, system.FormatException, system.ArrayTypeMismatchException, system.RankException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objStartTracking = (JCObject)classInstance.Invoke("StartTracking", entry == null ? null : entry.getJCOInstance());
            return new InternalEntityEntry(objStartTracking);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public InternalEntityEntry StartTrackingFromQuery(IEntityType baseEntityType, NetObject entity, JCORefOut<ValueBuffer> valueBuffer) throws Throwable, system.ArgumentNullException, system.PlatformNotSupportedException, system.InvalidOperationException, system.NotSupportedException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.IndexOutOfRangeException, system.ArgumentException, system.RankException, system.ArrayTypeMismatchException, system.globalization.CultureNotFoundException, system.collections.generic.KeyNotFoundException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objStartTrackingFromQuery = (JCObject)classInstance.Invoke("StartTrackingFromQuery", baseEntityType == null ? null : baseEntityType.getJCOInstance(), entity == null ? null : entity.getJCOInstance(), valueBuffer.getJCRefOut());
            return new InternalEntityEntry(objStartTrackingFromQuery);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public InternalEntityEntry TryGetEntry(IKey key, NetObject[] keyValues, boolean throwOnNullKey, JCORefOut<java.util.concurrent.atomic.AtomicBoolean> hasNullKey) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.InvalidOperationException, system.FormatException, system.IndexOutOfRangeException, system.RankException, system.ArrayTypeMismatchException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objTryGetEntry = (JCObject)classInstance.Invoke("TryGetEntry", key == null ? null : key.getJCOInstance(), toObjectFromArray(keyValues), throwOnNullKey, hasNullKey.getJCRefOut());
            return new InternalEntityEntry(objTryGetEntry);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public InternalEntityEntry TryGetEntry(IKey key, NetObject[] keyValues) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objTryGetEntry = (JCObject)classInstance.Invoke("TryGetEntry", key == null ? null : key.getJCOInstance(), toObjectFromArray(keyValues));
            return new InternalEntityEntry(objTryGetEntry);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public InternalEntityEntry TryGetEntry(NetObject entity, boolean throwOnNonUniqueness) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.IndexOutOfRangeException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objTryGetEntry = (JCObject)classInstance.Invoke("TryGetEntry", entity == null ? null : entity.getJCOInstance(), throwOnNonUniqueness);
            return new InternalEntityEntry(objTryGetEntry);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public InternalEntityEntry TryGetEntry(NetObject entity, IEntityType entityType, boolean throwOnTypeMismatch) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.OutOfMemoryException, system.IndexOutOfRangeException, system.FormatException, system.runtime.interopservices.ExternalException, system.globalization.CultureNotFoundException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objTryGetEntry = (JCObject)classInstance.Invoke("TryGetEntry", entity == null ? null : entity.getJCOInstance(), entityType == null ? null : entityType.getJCOInstance(), throwOnTypeMismatch);
            return new InternalEntityEntry(objTryGetEntry);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IEntityFinder CreateEntityFinder(IEntityType entityType) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objCreateEntityFinder = (JCObject)classInstance.Invoke("CreateEntityFinder", entityType == null ? null : entityType.getJCOInstance());
            return new IEntityFinderImplementation(objCreateEntityFinder);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Task ResetStateAsync(CancellationToken cancellationToken) throws Throwable, system.ArgumentNullException, system.PlatformNotSupportedException, system.IndexOutOfRangeException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objResetStateAsync = (JCObject)classInstance.Invoke("ResetStateAsync", cancellationToken == null ? null : cancellationToken.getJCOInstance());
            return new Task(objResetStateAsync);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AbortAttachGraph() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("AbortAttachGraph");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void AcceptAllChanges() throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.RankException, system.ArrayTypeMismatchException, system.InvalidOperationException, system.MethodAccessException, system.MissingMethodException, system.MemberAccessException, system.reflection.TargetInvocationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("AcceptAllChanges");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void BeginAttachGraph() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("BeginAttachGraph");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void CascadeChanges(boolean force) throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.RankException, system.ArgumentException, system.ArrayTypeMismatchException, system.NotSupportedException, system.InvalidOperationException, system.globalization.CultureNotFoundException, system.OutOfMemoryException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("CascadeChanges", force);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Clear() throws Throwable, system.ArgumentNullException, system.PlatformNotSupportedException, system.IndexOutOfRangeException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("Clear");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void CompleteAttachGraph() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("CompleteAttachGraph");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void OnStateChanged(InternalEntityEntry internalEntityEntry, EntityState oldState) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.OutOfMemoryException, system.runtime.interopservices.ExternalException, system.globalization.CultureNotFoundException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.AggregateException, system.MethodAccessException, system.MissingMethodException, system.MemberAccessException, system.reflection.TargetInvocationException, system.reflection.AmbiguousMatchException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("OnStateChanged", internalEntityEntry == null ? null : internalEntityEntry.getJCOInstance(), oldState == null ? null : oldState.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void OnTracked(InternalEntityEntry internalEntityEntry, boolean fromQuery) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.OutOfMemoryException, system.runtime.interopservices.ExternalException, system.globalization.CultureNotFoundException, system.IndexOutOfRangeException, system.AggregateException, system.MethodAccessException, system.MissingMethodException, system.MemberAccessException, system.reflection.TargetInvocationException, system.reflection.AmbiguousMatchException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("OnTracked", internalEntityEntry == null ? null : internalEntityEntry.getJCOInstance(), fromQuery);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void RecordReferencedUntrackedEntity(NetObject referencedEntity, INavigationBase navigation, InternalEntityEntry referencedFromEntry) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("RecordReferencedUntrackedEntity", referencedEntity == null ? null : referencedEntity.getJCOInstance(), navigation == null ? null : navigation.getJCOInstance(), referencedFromEntry == null ? null : referencedFromEntry.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void ResetState() throws Throwable, system.ArgumentNullException, system.PlatformNotSupportedException, system.IndexOutOfRangeException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("ResetState");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void StateChanging(InternalEntityEntry entry, EntityState newState) throws Throwable, system.ArgumentNullException, system.PlatformNotSupportedException, system.InvalidOperationException, system.NotSupportedException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.ArgumentException, system.OutOfMemoryException, system.FormatException, system.globalization.CultureNotFoundException, system.RankException, system.ArrayTypeMismatchException, system.collections.generic.KeyNotFoundException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("StateChanging", entry == null ? null : entry.getJCOInstance(), newState == null ? null : newState.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void StopTracking(InternalEntityEntry entry, EntityState oldState) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.OutOfMemoryException, system.FormatException, system.MethodAccessException, system.MissingMethodException, system.MemberAccessException, system.reflection.TargetInvocationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("StopTracking", entry == null ? null : entry.getJCOInstance(), oldState == null ? null : oldState.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Unsubscribe() throws Throwable, system.ArgumentNullException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("Unsubscribe");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void UpdateDependentMap(InternalEntityEntry entry, IForeignKey foreignKey) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("UpdateDependentMap", entry == null ? null : entry.getJCOInstance(), foreignKey == null ? null : foreignKey.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void UpdateIdentityMap(InternalEntityEntry entry, IKey key) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("UpdateIdentityMap", entry == null ? null : entry.getJCOInstance(), key == null ? null : key.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    
    public boolean getSavingChanges() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("SavingChanges");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setSavingChanges(boolean SavingChanges) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("SavingChanges", SavingChanges);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getSensitiveLoggingEnabled() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("SensitiveLoggingEnabled");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getChangedCount() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (int)classInstance.Get("ChangedCount");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setChangedCount(int ChangedCount) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("ChangedCount", ChangedCount);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getCount() throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.InvalidOperationException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (int)classInstance.Get("Count");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public CascadeTiming getCascadeDeleteTiming() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("CascadeDeleteTiming");
            return new CascadeTiming(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setCascadeDeleteTiming(CascadeTiming CascadeDeleteTiming) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("CascadeDeleteTiming", CascadeDeleteTiming == null ? null : CascadeDeleteTiming.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public CascadeTiming getDeleteOrphansTiming() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("DeleteOrphansTiming");
            return new CascadeTiming(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setDeleteOrphansTiming(CascadeTiming DeleteOrphansTiming) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("DeleteOrphansTiming", DeleteOrphansTiming == null ? null : DeleteOrphansTiming.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IChangeDetector getChangeDetector() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("ChangeDetector");
            return new IChangeDetectorImplementation(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IInternalEntityEntryNotifier getInternalEntityEntryNotifier() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("InternalEntityEntryNotifier");
            return new IInternalEntityEntryNotifierImplementation(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IValueGenerationManager getValueGenerationManager() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("ValueGenerationManager");
            return new IValueGenerationManagerImplementation(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public StateManagerDependencies getDependencies() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("Dependencies");
            return new StateManagerDependencies(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbContext getContext() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("Context");
            return new DbContext(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IEntityFinderFactory getEntityFinderFactory() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("EntityFinderFactory");
            return new IEntityFinderFactoryImplementation(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IModel getModel() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("Model");
            return new IModelImplementation(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public IEntityMaterializerSource getEntityMaterializerSource() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("EntityMaterializerSource");
            return new IEntityMaterializerSourceImplementation(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



    // Instance Events section
    


}