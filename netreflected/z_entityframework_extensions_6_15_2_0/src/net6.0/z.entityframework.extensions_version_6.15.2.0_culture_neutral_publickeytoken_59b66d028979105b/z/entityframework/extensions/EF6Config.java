/*
 *  MIT License
 *
 *  Copyright (c) 2022 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package z.entityframework.extensions;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import z.bulkoperations.ProviderType;
import system.runtime.caching.ObjectCache;
import z.bulkoperations.CustomProvider;


/**
 * The base .NET class managing Z.EntityFramework.Extensions.EF6Config, Z.EntityFramework.Extensions, Version=6.15.2.0, Culture=neutral, PublicKeyToken=59b66d028979105b.
 * <p>
 * 
 * See: <a href="https://docs.microsoft.com/en-us/dotnet/api/Z.EntityFramework.Extensions.EF6Config" target="_top">https://docs.microsoft.com/en-us/dotnet/api/Z.EntityFramework.Extensions.EF6Config</a>
 */
public class EF6Config extends NetObject  {
    /**
     * Fully assembly qualified name: Z.EntityFramework.Extensions, Version=6.15.2.0, Culture=neutral, PublicKeyToken=59b66d028979105b
     */
    public static final String assemblyFullName = "Z.EntityFramework.Extensions, Version=6.15.2.0, Culture=neutral, PublicKeyToken=59b66d028979105b";
    /**
     * Assembly name: Z.EntityFramework.Extensions
     */
    public static final String assemblyShortName = "Z.EntityFramework.Extensions";
    /**
     * Qualified class name: Z.EntityFramework.Extensions.EF6Config
     */
    public static final String className = "Z.EntityFramework.Extensions.EF6Config";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    /**
     * The type managed from JCOBridge. See {@link JCType}
     */
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            String classToCreate = className + ", "
                    + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Creating %s", classToCreate);
            JCType typeCreated = bridge.GetType(classToCreate);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Created: %s",
                        (typeCreated != null) ? typeCreated.toString() : "Returned null value");
            return typeCreated;
        } catch (JCException e) {
            JCOReflector.writeLog(e);
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }
    /**
     * Internal constructor. Use with caution 
     */
    public EF6Config(java.lang.Object instance) throws Throwable {
        super(instance);
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public java.lang.Object getJCOInstance() {
        return classInstance;
    }

    public void setJCOInstance(JCObject instance) {
        classInstance = instance;
        super.setJCOInstance(classInstance);
    }

    public JCType getJCOType() {
        return classType;
    }
    /**
     * Try to cast the {@link IJCOBridgeReflected} instance into {@link EF6Config}, a cast assert is made to check if types are compatible.
     * @param from {@link IJCOBridgeReflected} instance to be casted
     * @return {@link EF6Config} instance
     * @throws java.lang.Throwable in case of error during cast operation
     */
    public static EF6Config cast(IJCOBridgeReflected from) throws Throwable {
        NetType.AssertCast(classType, from);
        return new EF6Config(from.getJCOInstance());
    }

    // Constructors section
    
    public EF6Config() throws Throwable {
    }

    
    // Methods section
    
    public static boolean ValidateLicense(JCORefOut errorMessage, ProviderType provider) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.OverflowException, system.OutOfMemoryException, system.collections.generic.KeyNotFoundException, system.ObjectDisposedException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("ValidateLicense", errorMessage.getJCRefOut(), provider == null ? null : provider.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean ValidateLicense(ProviderType provider) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.OverflowException, system.OutOfMemoryException, system.collections.generic.KeyNotFoundException, system.ObjectDisposedException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("ValidateLicense", provider == null ? null : provider.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void AddLicense(java.lang.String licenseName, java.lang.String licenseKey) throws Throwable, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.ArgumentException, system.globalization.CultureNotFoundException, system.IndexOutOfRangeException, system.OutOfMemoryException, system.runtime.interopservices.ExternalException, system.InvalidOperationException, system.ObjectDisposedException, system.RankException, system.ArrayTypeMismatchException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("AddLicense", licenseName, licenseKey);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void LoadSqlTypeAssembly() throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.globalization.CultureNotFoundException, system.OutOfMemoryException, system.runtime.interopservices.ExternalException, system.collections.generic.KeyNotFoundException, system.MethodAccessException, system.MissingMethodException, system.MemberAccessException, system.reflection.TargetInvocationException, system.MissingMemberException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("LoadSqlTypeAssembly");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void UseFiddleSqlCompact(NetObject sqlCeProviderServicesInstance, NetObject sqlCeProviderFactoryInstance) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.FormatException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.MulticastNotSupportedException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("UseFiddleSqlCompact", sqlCeProviderServicesInstance == null ? null : sqlCeProviderServicesInstance.getJCOInstance(), sqlCeProviderFactoryInstance == null ? null : sqlCeProviderFactoryInstance.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    
    public static boolean getDefaultEntityFrameworkPropagationValue() throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Get("DefaultEntityFrameworkPropagationValue");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void setDefaultEntityFrameworkPropagationValue(boolean DefaultEntityFrameworkPropagationValue) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Set("DefaultEntityFrameworkPropagationValue", DefaultEntityFrameworkPropagationValue);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean getDisableBulkCommandBatch() throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Get("DisableBulkCommandBatch");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void setDisableBulkCommandBatch(boolean DisableBulkCommandBatch) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Set("DisableBulkCommandBatch", DisableBulkCommandBatch);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean getForceDatabaseFirst() throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Get("ForceDatabaseFirst");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void setForceDatabaseFirst(boolean ForceDatabaseFirst) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Set("ForceDatabaseFirst", ForceDatabaseFirst);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean getForceSelectOutput() throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Get("ForceSelectOutput");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void setForceSelectOutput(boolean ForceSelectOutput) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Set("ForceSelectOutput", ForceSelectOutput);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean getForceTriggerResolution() throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Get("ForceTriggerResolution");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void setForceTriggerResolution(boolean ForceTriggerResolution) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Set("ForceTriggerResolution", ForceTriggerResolution);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean getIsCommunity() throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Get("IsCommunity");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void setIsCommunity(boolean IsCommunity) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Set("IsCommunity", IsCommunity);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean getIsEntityFrameworkPlus() throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Get("IsEntityFrameworkPlus");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void setIsEntityFrameworkPlus(boolean IsEntityFrameworkPlus) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Set("IsEntityFrameworkPlus", IsEntityFrameworkPlus);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean getPreserveCommandOrder() throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Get("PreserveCommandOrder");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void setPreserveCommandOrder(boolean PreserveCommandOrder) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Set("PreserveCommandOrder", PreserveCommandOrder);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean getPreserveTopologicalSortOrder() throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Get("PreserveTopologicalSortOrder");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void setPreserveTopologicalSortOrder(boolean PreserveTopologicalSortOrder) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Set("PreserveTopologicalSortOrder", PreserveTopologicalSortOrder);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean getTmpForceDatabaseFirstSingleModel() throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Get("TmpForceDatabaseFirstSingleModel");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void setTmpForceDatabaseFirstSingleModel(boolean TmpForceDatabaseFirstSingleModel) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Set("TmpForceDatabaseFirstSingleModel", TmpForceDatabaseFirstSingleModel);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean getTmpStoredModelEdmx() throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Get("TmpStoredModelEdmx");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void setTmpStoredModelEdmx(boolean TmpStoredModelEdmx) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Set("TmpStoredModelEdmx", TmpStoredModelEdmx);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean getUseMySqlEntityFrameworkPropagation() throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Get("UseMySqlEntityFrameworkPropagation");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void setUseMySqlEntityFrameworkPropagation(boolean UseMySqlEntityFrameworkPropagation) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Set("UseMySqlEntityFrameworkPropagation", UseMySqlEntityFrameworkPropagation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean getUseOldBulkSaveChanges() throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Get("UseOldBulkSaveChanges");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void setUseOldBulkSaveChanges(boolean UseOldBulkSaveChanges) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Set("UseOldBulkSaveChanges", UseOldBulkSaveChanges);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean getUseToListMemoryOptimized() throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Get("UseToListMemoryOptimized");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void setUseToListMemoryOptimized(boolean UseToListMemoryOptimized) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Set("UseToListMemoryOptimized", UseToListMemoryOptimized);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static ObjectCache getCache() throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject val = (JCObject)classType.Get("Cache");
            return new ObjectCache(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void setCache(ObjectCache Cache) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Set("Cache", Cache == null ? null : Cache.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static java.lang.String getModelName() throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (java.lang.String)classType.Get("ModelName");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void setModelName(java.lang.String ModelName) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Set("ModelName", ModelName);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static java.lang.String getTemporaryFix_ModelName() throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (java.lang.String)classType.Get("TemporaryFix_ModelName");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void setTemporaryFix_ModelName(java.lang.String TemporaryFix_ModelName) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Set("TemporaryFix_ModelName", TemporaryFix_ModelName);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static java.lang.String getTmpModelEdmx() throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (java.lang.String)classType.Get("TmpModelEdmx");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void setTmpModelEdmx(java.lang.String TmpModelEdmx) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Set("TmpModelEdmx", TmpModelEdmx);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static CustomProvider getCustomProvider() throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject val = (JCObject)classType.Get("CustomProvider");
            return new CustomProvider(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void setCustomProvider(CustomProvider CustomProvider) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Set("CustomProvider", CustomProvider == null ? null : CustomProvider.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



    // Instance Events section
    

}