/*
 *  MIT License
 *
 *  Copyright (c) 2022 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package z.bulkoperations;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import system.data.common.DbConnection;
import system.threading.tasks.Task;
import system.data.DataTable;
import system.data.DataRowState;
import system.threading.CancellationToken;
import z.bulkoperations.BulkOperation;
import system.data.common.DbTransaction;
import system.diagnostics.Stopwatch;
import system.linq.expressions.LambdaExpression;
import system.reflection.Assembly;
import system.text.StringBuilder;
import system.TimeSpan;
import z.bulkoperations.AuditModeType;
import z.bulkoperations.AutoMapType;
import z.bulkoperations.CaseSensitiveType;
import z.bulkoperations.CustomProvider;
import z.bulkoperations.DefaultValueResolutionType;
import z.bulkoperations.ErrorModeType;
import z.bulkoperations.InternalOptions;
import z.bulkoperations.InternalTransactionType;
import z.bulkoperations.ProviderType;
import z.bulkoperations.ResolutionType;
import z.bulkoperations.ResultInfo;


/**
 * The base .NET class managing Z.BulkOperations.BulkOperation, Z.EntityFramework.Extensions, Version=6.15.2.0, Culture=neutral, PublicKeyToken=59b66d028979105b.
 * <p>
 * 
 * See: <a href="https://docs.microsoft.com/en-us/dotnet/api/Z.BulkOperations.BulkOperation" target="_top">https://docs.microsoft.com/en-us/dotnet/api/Z.BulkOperations.BulkOperation</a>
 */
public class BulkOperation extends NetObject implements AutoCloseable {
    /**
     * Fully assembly qualified name: Z.EntityFramework.Extensions, Version=6.15.2.0, Culture=neutral, PublicKeyToken=59b66d028979105b
     */
    public static final String assemblyFullName = "Z.EntityFramework.Extensions, Version=6.15.2.0, Culture=neutral, PublicKeyToken=59b66d028979105b";
    /**
     * Assembly name: Z.EntityFramework.Extensions
     */
    public static final String assemblyShortName = "Z.EntityFramework.Extensions";
    /**
     * Qualified class name: Z.BulkOperations.BulkOperation
     */
    public static final String className = "Z.BulkOperations.BulkOperation";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    /**
     * The type managed from JCOBridge. See {@link JCType}
     */
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            String classToCreate = className + ", "
                    + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Creating %s", classToCreate);
            JCType typeCreated = bridge.GetType(classToCreate);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Created: %s",
                        (typeCreated != null) ? typeCreated.toString() : "Returned null value");
            return typeCreated;
        } catch (JCException e) {
            JCOReflector.writeLog(e);
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }
    /**
     * Internal constructor. Use with caution 
     */
    public BulkOperation(java.lang.Object instance) throws Throwable {
        super(instance);
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public java.lang.Object getJCOInstance() {
        return classInstance;
    }

    public void setJCOInstance(JCObject instance) {
        classInstance = instance;
        super.setJCOInstance(classInstance);
    }

    public JCType getJCOType() {
        return classType;
    }
    /**
     * Try to cast the {@link IJCOBridgeReflected} instance into {@link BulkOperation}, a cast assert is made to check if types are compatible.
     * @param from {@link IJCOBridgeReflected} instance to be casted
     * @return {@link BulkOperation} instance
     * @throws java.lang.Throwable in case of error during cast operation
     */
    public static BulkOperation cast(IJCOBridgeReflected from) throws Throwable {
        NetType.AssertCast(classType, from);
        return new BulkOperation(from.getJCOInstance());
    }

    // Constructors section
    
    public BulkOperation() throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentException, system.ObjectDisposedException, system.threading.ThreadAbortException, system.InvalidOperationException, system.ArgumentNullException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            setJCOInstance((JCObject)classType.NewObject());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public BulkOperation(DbConnection connection) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentException, system.ObjectDisposedException, system.threading.ThreadAbortException, system.InvalidOperationException, system.ArgumentNullException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            setJCOInstance((JCObject)classType.NewObject(connection == null ? null : connection.getJCOInstance()));
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Methods section
    
    public Task BulkDeleteAsync(DataTable datasource, DataRowState dataRowState, CancellationToken cancellationToken) throws Throwable, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ArgumentOutOfRangeException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.data.DataException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.configuration.ConfigurationErrorsException, system.configuration.ConfigurationException, system.NotImplementedException, system.collections.generic.KeyNotFoundException, system.FormatException, system.OverflowException, system.OutOfMemoryException, system.ObjectDisposedException, system.OperationCanceledException, system.diagnostics.tracing.EventSourceException, system.threading.tasks.TaskSchedulerException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objBulkDeleteAsync = (JCObject)classInstance.Invoke("BulkDeleteAsync", datasource == null ? null : datasource.getJCOInstance(), dataRowState == null ? null : dataRowState.getJCOInstance(), cancellationToken == null ? null : cancellationToken.getJCOInstance());
            return new Task(objBulkDeleteAsync);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Task BulkDeleteAsync(NetObject datasource, CancellationToken cancellationToken) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.NotSupportedException, system.ArgumentException, system.globalization.CultureNotFoundException, system.configuration.ConfigurationErrorsException, system.configuration.ConfigurationException, system.NotImplementedException, system.InvalidOperationException, system.collections.generic.KeyNotFoundException, system.FormatException, system.OverflowException, system.OutOfMemoryException, system.IndexOutOfRangeException, system.ObjectDisposedException, system.OperationCanceledException, system.diagnostics.tracing.EventSourceException, system.threading.tasks.TaskSchedulerException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objBulkDeleteAsync = (JCObject)classInstance.Invoke("BulkDeleteAsync", datasource == null ? null : datasource.getJCOInstance(), cancellationToken == null ? null : cancellationToken.getJCOInstance());
            return new Task(objBulkDeleteAsync);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Task BulkDeleteAsync(CancellationToken cancellationToken) throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.resources.MissingManifestResourceException, system.ArgumentException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.configuration.ConfigurationErrorsException, system.configuration.ConfigurationException, system.NotImplementedException, system.InvalidOperationException, system.collections.generic.KeyNotFoundException, system.RankException, system.FormatException, system.OverflowException, system.IndexOutOfRangeException, system.OutOfMemoryException, system.PlatformNotSupportedException, system.security.cryptography.CryptographicException, system.ObjectDisposedException, system.OperationCanceledException, system.diagnostics.tracing.EventSourceException, system.threading.tasks.TaskSchedulerException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objBulkDeleteAsync = (JCObject)classInstance.Invoke("BulkDeleteAsync", cancellationToken == null ? null : cancellationToken.getJCOInstance());
            return new Task(objBulkDeleteAsync);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Task BulkInsertAsync(DataTable datasource, DataRowState dataRowState, CancellationToken cancellationToken) throws Throwable, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ArgumentOutOfRangeException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.data.DataException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.configuration.ConfigurationErrorsException, system.configuration.ConfigurationException, system.NotImplementedException, system.collections.generic.KeyNotFoundException, system.FormatException, system.OverflowException, system.OutOfMemoryException, system.ObjectDisposedException, system.OperationCanceledException, system.diagnostics.tracing.EventSourceException, system.threading.tasks.TaskSchedulerException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objBulkInsertAsync = (JCObject)classInstance.Invoke("BulkInsertAsync", datasource == null ? null : datasource.getJCOInstance(), dataRowState == null ? null : dataRowState.getJCOInstance(), cancellationToken == null ? null : cancellationToken.getJCOInstance());
            return new Task(objBulkInsertAsync);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Task BulkInsertAsync(NetObject datasource, CancellationToken cancellationToken) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.NotSupportedException, system.ArgumentException, system.globalization.CultureNotFoundException, system.configuration.ConfigurationErrorsException, system.configuration.ConfigurationException, system.NotImplementedException, system.InvalidOperationException, system.collections.generic.KeyNotFoundException, system.FormatException, system.OverflowException, system.OutOfMemoryException, system.IndexOutOfRangeException, system.ObjectDisposedException, system.OperationCanceledException, system.diagnostics.tracing.EventSourceException, system.threading.tasks.TaskSchedulerException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objBulkInsertAsync = (JCObject)classInstance.Invoke("BulkInsertAsync", datasource == null ? null : datasource.getJCOInstance(), cancellationToken == null ? null : cancellationToken.getJCOInstance());
            return new Task(objBulkInsertAsync);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Task BulkInsertAsync(CancellationToken cancellationToken) throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.resources.MissingManifestResourceException, system.ArgumentException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.configuration.ConfigurationErrorsException, system.configuration.ConfigurationException, system.NotImplementedException, system.InvalidOperationException, system.collections.generic.KeyNotFoundException, system.RankException, system.FormatException, system.OverflowException, system.IndexOutOfRangeException, system.OutOfMemoryException, system.PlatformNotSupportedException, system.security.cryptography.CryptographicException, system.ObjectDisposedException, system.OperationCanceledException, system.diagnostics.tracing.EventSourceException, system.threading.tasks.TaskSchedulerException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objBulkInsertAsync = (JCObject)classInstance.Invoke("BulkInsertAsync", cancellationToken == null ? null : cancellationToken.getJCOInstance());
            return new Task(objBulkInsertAsync);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Task BulkMergeAsync(DataTable datasource, DataRowState dataRowState, CancellationToken cancellationToken) throws Throwable, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ArgumentOutOfRangeException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.data.DataException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.configuration.ConfigurationErrorsException, system.configuration.ConfigurationException, system.NotImplementedException, system.collections.generic.KeyNotFoundException, system.FormatException, system.OverflowException, system.OutOfMemoryException, system.ObjectDisposedException, system.OperationCanceledException, system.diagnostics.tracing.EventSourceException, system.threading.tasks.TaskSchedulerException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objBulkMergeAsync = (JCObject)classInstance.Invoke("BulkMergeAsync", datasource == null ? null : datasource.getJCOInstance(), dataRowState == null ? null : dataRowState.getJCOInstance(), cancellationToken == null ? null : cancellationToken.getJCOInstance());
            return new Task(objBulkMergeAsync);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Task BulkMergeAsync(NetObject datasource, CancellationToken cancellationToken) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.NotSupportedException, system.ArgumentException, system.globalization.CultureNotFoundException, system.configuration.ConfigurationErrorsException, system.configuration.ConfigurationException, system.NotImplementedException, system.InvalidOperationException, system.collections.generic.KeyNotFoundException, system.FormatException, system.OverflowException, system.OutOfMemoryException, system.IndexOutOfRangeException, system.ObjectDisposedException, system.OperationCanceledException, system.diagnostics.tracing.EventSourceException, system.threading.tasks.TaskSchedulerException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objBulkMergeAsync = (JCObject)classInstance.Invoke("BulkMergeAsync", datasource == null ? null : datasource.getJCOInstance(), cancellationToken == null ? null : cancellationToken.getJCOInstance());
            return new Task(objBulkMergeAsync);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Task BulkMergeAsync(CancellationToken cancellationToken) throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.resources.MissingManifestResourceException, system.ArgumentException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.configuration.ConfigurationErrorsException, system.configuration.ConfigurationException, system.NotImplementedException, system.InvalidOperationException, system.collections.generic.KeyNotFoundException, system.RankException, system.FormatException, system.OverflowException, system.IndexOutOfRangeException, system.OutOfMemoryException, system.PlatformNotSupportedException, system.security.cryptography.CryptographicException, system.ObjectDisposedException, system.OperationCanceledException, system.diagnostics.tracing.EventSourceException, system.threading.tasks.TaskSchedulerException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objBulkMergeAsync = (JCObject)classInstance.Invoke("BulkMergeAsync", cancellationToken == null ? null : cancellationToken.getJCOInstance());
            return new Task(objBulkMergeAsync);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Task BulkSaveChangesAsync(DataTable dt, CancellationToken cancellationToken) throws Throwable, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ArgumentOutOfRangeException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.data.DataException, system.NotSupportedException, system.configuration.ConfigurationErrorsException, system.configuration.ConfigurationException, system.NotImplementedException, system.collections.generic.KeyNotFoundException, system.FormatException, system.OutOfMemoryException, system.ObjectDisposedException, system.OperationCanceledException, system.diagnostics.tracing.EventSourceException, system.threading.tasks.TaskSchedulerException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objBulkSaveChangesAsync = (JCObject)classInstance.Invoke("BulkSaveChangesAsync", dt == null ? null : dt.getJCOInstance(), cancellationToken == null ? null : cancellationToken.getJCOInstance());
            return new Task(objBulkSaveChangesAsync);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Task BulkSynchronizeAsync(NetObject datasource, CancellationToken cancellationToken) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.NotSupportedException, system.ArgumentException, system.globalization.CultureNotFoundException, system.configuration.ConfigurationErrorsException, system.configuration.ConfigurationException, system.NotImplementedException, system.InvalidOperationException, system.collections.generic.KeyNotFoundException, system.FormatException, system.OverflowException, system.OutOfMemoryException, system.IndexOutOfRangeException, system.ObjectDisposedException, system.OperationCanceledException, system.diagnostics.tracing.EventSourceException, system.threading.tasks.TaskSchedulerException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objBulkSynchronizeAsync = (JCObject)classInstance.Invoke("BulkSynchronizeAsync", datasource == null ? null : datasource.getJCOInstance(), cancellationToken == null ? null : cancellationToken.getJCOInstance());
            return new Task(objBulkSynchronizeAsync);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Task BulkSynchronizeAsync(CancellationToken cancellationToken) throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.resources.MissingManifestResourceException, system.ArgumentException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.configuration.ConfigurationErrorsException, system.configuration.ConfigurationException, system.NotImplementedException, system.InvalidOperationException, system.collections.generic.KeyNotFoundException, system.RankException, system.FormatException, system.OverflowException, system.IndexOutOfRangeException, system.OutOfMemoryException, system.PlatformNotSupportedException, system.security.cryptography.CryptographicException, system.ObjectDisposedException, system.OperationCanceledException, system.diagnostics.tracing.EventSourceException, system.threading.tasks.TaskSchedulerException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objBulkSynchronizeAsync = (JCObject)classInstance.Invoke("BulkSynchronizeAsync", cancellationToken == null ? null : cancellationToken.getJCOInstance());
            return new Task(objBulkSynchronizeAsync);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Task BulkUpdateAsync(DataTable datasource, DataRowState dataRowState, CancellationToken cancellationToken) throws Throwable, system.ArgumentNullException, system.resources.MissingManifestResourceException, system.ArgumentOutOfRangeException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.data.DataException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.configuration.ConfigurationErrorsException, system.configuration.ConfigurationException, system.NotImplementedException, system.collections.generic.KeyNotFoundException, system.FormatException, system.OverflowException, system.OutOfMemoryException, system.ObjectDisposedException, system.OperationCanceledException, system.diagnostics.tracing.EventSourceException, system.threading.tasks.TaskSchedulerException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objBulkUpdateAsync = (JCObject)classInstance.Invoke("BulkUpdateAsync", datasource == null ? null : datasource.getJCOInstance(), dataRowState == null ? null : dataRowState.getJCOInstance(), cancellationToken == null ? null : cancellationToken.getJCOInstance());
            return new Task(objBulkUpdateAsync);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Task BulkUpdateAsync(NetObject datasource, CancellationToken cancellationToken) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.NotSupportedException, system.ArgumentException, system.globalization.CultureNotFoundException, system.configuration.ConfigurationErrorsException, system.configuration.ConfigurationException, system.NotImplementedException, system.InvalidOperationException, system.collections.generic.KeyNotFoundException, system.FormatException, system.OverflowException, system.OutOfMemoryException, system.IndexOutOfRangeException, system.ObjectDisposedException, system.OperationCanceledException, system.diagnostics.tracing.EventSourceException, system.threading.tasks.TaskSchedulerException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objBulkUpdateAsync = (JCObject)classInstance.Invoke("BulkUpdateAsync", datasource == null ? null : datasource.getJCOInstance(), cancellationToken == null ? null : cancellationToken.getJCOInstance());
            return new Task(objBulkUpdateAsync);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Task BulkUpdateAsync(CancellationToken cancellationToken) throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.resources.MissingManifestResourceException, system.ArgumentException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.configuration.ConfigurationErrorsException, system.configuration.ConfigurationException, system.NotImplementedException, system.InvalidOperationException, system.collections.generic.KeyNotFoundException, system.RankException, system.FormatException, system.OverflowException, system.IndexOutOfRangeException, system.OutOfMemoryException, system.PlatformNotSupportedException, system.security.cryptography.CryptographicException, system.ObjectDisposedException, system.OperationCanceledException, system.diagnostics.tracing.EventSourceException, system.threading.tasks.TaskSchedulerException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objBulkUpdateAsync = (JCObject)classInstance.Invoke("BulkUpdateAsync", cancellationToken == null ? null : cancellationToken.getJCOInstance());
            return new Task(objBulkUpdateAsync);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void BulkDelete() throws Throwable, system.ArgumentNullException, system.FormatException, system.ArgumentOutOfRangeException, system.ArgumentException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.IndexOutOfRangeException, system.MulticastNotSupportedException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.configuration.ConfigurationErrorsException, system.configuration.ConfigurationException, system.NotImplementedException, system.collections.generic.KeyNotFoundException, system.RankException, system.threading.AbandonedMutexException, system.InvalidTimeZoneException, system.OverflowException, system.OutOfMemoryException, system.PlatformNotSupportedException, system.security.cryptography.CryptographicException, system.OperationCanceledException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("BulkDelete");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void BulkDelete(DataTable datasource, DataRowState dataRowState) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotSupportedException, system.FormatException, system.OverflowException, system.data.DataException, system.MulticastNotSupportedException, system.configuration.ConfigurationErrorsException, system.configuration.ConfigurationException, system.NotImplementedException, system.collections.generic.KeyNotFoundException, system.RankException, system.OutOfMemoryException, system.PlatformNotSupportedException, system.security.cryptography.CryptographicException, system.OperationCanceledException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("BulkDelete", datasource == null ? null : datasource.getJCOInstance(), dataRowState == null ? null : dataRowState.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void BulkDelete(NetObject datasource) throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.IndexOutOfRangeException, system.ArgumentException, system.MulticastNotSupportedException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.configuration.ConfigurationErrorsException, system.configuration.ConfigurationException, system.NotImplementedException, system.collections.generic.KeyNotFoundException, system.RankException, system.OutOfMemoryException, system.FormatException, system.OverflowException, system.PlatformNotSupportedException, system.security.cryptography.CryptographicException, system.ObjectDisposedException, system.OperationCanceledException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("BulkDelete", datasource == null ? null : datasource.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void BulkInsert() throws Throwable, system.ArgumentNullException, system.FormatException, system.ArgumentOutOfRangeException, system.ArgumentException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.IndexOutOfRangeException, system.MulticastNotSupportedException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.configuration.ConfigurationErrorsException, system.configuration.ConfigurationException, system.NotImplementedException, system.collections.generic.KeyNotFoundException, system.RankException, system.threading.AbandonedMutexException, system.InvalidTimeZoneException, system.OverflowException, system.OutOfMemoryException, system.PlatformNotSupportedException, system.security.cryptography.CryptographicException, system.OperationCanceledException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("BulkInsert");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void BulkInsert(DataTable datasource, DataRowState dataRowState) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotSupportedException, system.FormatException, system.OverflowException, system.data.DataException, system.MulticastNotSupportedException, system.configuration.ConfigurationErrorsException, system.configuration.ConfigurationException, system.NotImplementedException, system.collections.generic.KeyNotFoundException, system.RankException, system.OutOfMemoryException, system.PlatformNotSupportedException, system.security.cryptography.CryptographicException, system.OperationCanceledException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("BulkInsert", datasource == null ? null : datasource.getJCOInstance(), dataRowState == null ? null : dataRowState.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void BulkInsert(NetObject datasource) throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.IndexOutOfRangeException, system.ArgumentException, system.MulticastNotSupportedException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.configuration.ConfigurationErrorsException, system.configuration.ConfigurationException, system.NotImplementedException, system.collections.generic.KeyNotFoundException, system.RankException, system.OutOfMemoryException, system.FormatException, system.OverflowException, system.PlatformNotSupportedException, system.security.cryptography.CryptographicException, system.ObjectDisposedException, system.OperationCanceledException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("BulkInsert", datasource == null ? null : datasource.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void BulkMerge() throws Throwable, system.ArgumentNullException, system.FormatException, system.ArgumentOutOfRangeException, system.ArgumentException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.IndexOutOfRangeException, system.MulticastNotSupportedException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.configuration.ConfigurationErrorsException, system.configuration.ConfigurationException, system.NotImplementedException, system.collections.generic.KeyNotFoundException, system.RankException, system.threading.AbandonedMutexException, system.InvalidTimeZoneException, system.OverflowException, system.OutOfMemoryException, system.PlatformNotSupportedException, system.security.cryptography.CryptographicException, system.OperationCanceledException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("BulkMerge");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void BulkMerge(DataTable datasource, DataRowState dataRowState) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotSupportedException, system.FormatException, system.OverflowException, system.data.DataException, system.MulticastNotSupportedException, system.configuration.ConfigurationErrorsException, system.configuration.ConfigurationException, system.NotImplementedException, system.collections.generic.KeyNotFoundException, system.RankException, system.OutOfMemoryException, system.PlatformNotSupportedException, system.security.cryptography.CryptographicException, system.OperationCanceledException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("BulkMerge", datasource == null ? null : datasource.getJCOInstance(), dataRowState == null ? null : dataRowState.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void BulkMerge(NetObject datasource) throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.IndexOutOfRangeException, system.ArgumentException, system.MulticastNotSupportedException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.configuration.ConfigurationErrorsException, system.configuration.ConfigurationException, system.NotImplementedException, system.collections.generic.KeyNotFoundException, system.RankException, system.OutOfMemoryException, system.FormatException, system.OverflowException, system.PlatformNotSupportedException, system.security.cryptography.CryptographicException, system.ObjectDisposedException, system.OperationCanceledException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("BulkMerge", datasource == null ? null : datasource.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void BulkSaveChanges(DataTable dt) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotSupportedException, system.FormatException, system.OverflowException, system.data.DataException, system.configuration.ConfigurationErrorsException, system.configuration.ConfigurationException, system.NotImplementedException, system.collections.generic.KeyNotFoundException, system.RankException, system.OutOfMemoryException, system.PlatformNotSupportedException, system.security.cryptography.CryptographicException, system.OperationCanceledException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("BulkSaveChanges", dt == null ? null : dt.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void BulkSynchronize() throws Throwable, system.ArgumentNullException, system.FormatException, system.ArgumentOutOfRangeException, system.ArgumentException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.IndexOutOfRangeException, system.MulticastNotSupportedException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.configuration.ConfigurationErrorsException, system.configuration.ConfigurationException, system.NotImplementedException, system.collections.generic.KeyNotFoundException, system.RankException, system.threading.AbandonedMutexException, system.InvalidTimeZoneException, system.OverflowException, system.OutOfMemoryException, system.PlatformNotSupportedException, system.security.cryptography.CryptographicException, system.OperationCanceledException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("BulkSynchronize");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void BulkSynchronize(NetObject datasource) throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.IndexOutOfRangeException, system.ArgumentException, system.MulticastNotSupportedException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.configuration.ConfigurationErrorsException, system.configuration.ConfigurationException, system.NotImplementedException, system.collections.generic.KeyNotFoundException, system.RankException, system.OutOfMemoryException, system.FormatException, system.OverflowException, system.PlatformNotSupportedException, system.security.cryptography.CryptographicException, system.ObjectDisposedException, system.OperationCanceledException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("BulkSynchronize", datasource == null ? null : datasource.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void BulkUpdate() throws Throwable, system.ArgumentNullException, system.FormatException, system.ArgumentOutOfRangeException, system.ArgumentException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.IndexOutOfRangeException, system.MulticastNotSupportedException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.configuration.ConfigurationErrorsException, system.configuration.ConfigurationException, system.NotImplementedException, system.collections.generic.KeyNotFoundException, system.RankException, system.threading.AbandonedMutexException, system.InvalidTimeZoneException, system.OverflowException, system.OutOfMemoryException, system.PlatformNotSupportedException, system.security.cryptography.CryptographicException, system.OperationCanceledException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("BulkUpdate");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void BulkUpdate(DataTable datasource, DataRowState dataRowState) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.MissingMethodException, system.reflection.TargetInvocationException, system.NotSupportedException, system.FormatException, system.OverflowException, system.data.DataException, system.MulticastNotSupportedException, system.configuration.ConfigurationErrorsException, system.configuration.ConfigurationException, system.NotImplementedException, system.collections.generic.KeyNotFoundException, system.RankException, system.OutOfMemoryException, system.PlatformNotSupportedException, system.security.cryptography.CryptographicException, system.OperationCanceledException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("BulkUpdate", datasource == null ? null : datasource.getJCOInstance(), dataRowState == null ? null : dataRowState.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void BulkUpdate(NetObject datasource) throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.IndexOutOfRangeException, system.ArgumentException, system.MulticastNotSupportedException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.configuration.ConfigurationErrorsException, system.configuration.ConfigurationException, system.NotImplementedException, system.collections.generic.KeyNotFoundException, system.RankException, system.OutOfMemoryException, system.FormatException, system.OverflowException, system.PlatformNotSupportedException, system.security.cryptography.CryptographicException, system.ObjectDisposedException, system.OperationCanceledException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("BulkUpdate", datasource == null ? null : datasource.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void Cache(java.lang.String key, BulkOperation operation) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("Cache", key, operation == null ? null : operation.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Dispose() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("Dispose");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void Recompile() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("Recompile");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void RemoveFromCache(java.lang.String key) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("RemoveFromCache", key);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static BulkOperation GetFromCache(java.lang.String key) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objGetFromCache = (JCObject)classType.Invoke("GetFromCache", key);
            return new BulkOperation(objGetFromCache);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void close() throws Exception {
        try {
            if (classInstance == null)
                throw new UnsupportedOperationException("classInstance is null.");
            try {
                classInstance.Invoke("Dispose");
            }
            catch (JCNativeException jcne) {
                throw translateException(jcne);
            }
        } catch (Throwable t) {
            throw new Exception(t);
        }
    }
    
    // Properties section
    
    public boolean getAllowConcurrency() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("AllowConcurrency");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAllowConcurrency(boolean AllowConcurrency) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("AllowConcurrency", AllowConcurrency);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getAllowDuplicateKeys() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("AllowDuplicateKeys");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAllowDuplicateKeys(boolean AllowDuplicateKeys) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("AllowDuplicateKeys", AllowDuplicateKeys);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getAllowUpdatePrimaryKeys() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("AllowUpdatePrimaryKeys");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAllowUpdatePrimaryKeys(boolean AllowUpdatePrimaryKeys) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("AllowUpdatePrimaryKeys", AllowUpdatePrimaryKeys);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getAutoMapOutputDirection() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("AutoMapOutputDirection");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAutoMapOutputDirection(boolean AutoMapOutputDirection) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("AutoMapOutputDirection", AutoMapOutputDirection);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getCommandParameterAddRowIndex() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("CommandParameterAddRowIndex");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setCommandParameterAddRowIndex(boolean CommandParameterAddRowIndex) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("CommandParameterAddRowIndex", CommandParameterAddRowIndex);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getDebug1() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("Debug1");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setDebug1(boolean Debug1) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("Debug1", Debug1);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getDisableDotCheckForEscapeTableName() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("DisableDotCheckForEscapeTableName");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setDisableDotCheckForEscapeTableName(boolean DisableDotCheckForEscapeTableName) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("DisableDotCheckForEscapeTableName", DisableDotCheckForEscapeTableName);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getDisableInformationSchemaCache() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("DisableInformationSchemaCache");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setDisableInformationSchemaCache(boolean DisableInformationSchemaCache) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("DisableInformationSchemaCache", DisableInformationSchemaCache);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getDisablePrimaryKeyNullCheck() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("DisablePrimaryKeyNullCheck");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setDisablePrimaryKeyNullCheck(boolean DisablePrimaryKeyNullCheck) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("DisablePrimaryKeyNullCheck", DisablePrimaryKeyNullCheck);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getDisableSqlBulkCopyDirect() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("DisableSqlBulkCopyDirect");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setDisableSqlBulkCopyDirect(boolean DisableSqlBulkCopyDirect) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("DisableSqlBulkCopyDirect", DisableSqlBulkCopyDirect);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getDisableStoredProcedure() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("DisableStoredProcedure");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setDisableStoredProcedure(boolean DisableStoredProcedure) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("DisableStoredProcedure", DisableStoredProcedure);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getDisableTemporaryTableClusteredIndex() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("DisableTemporaryTableClusteredIndex");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setDisableTemporaryTableClusteredIndex(boolean DisableTemporaryTableClusteredIndex) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("DisableTemporaryTableClusteredIndex", DisableTemporaryTableClusteredIndex);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getForceOutputFromUnmodifiedRow() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("ForceOutputFromUnmodifiedRow");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setForceOutputFromUnmodifiedRow(boolean ForceOutputFromUnmodifiedRow) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("ForceOutputFromUnmodifiedRow", ForceOutputFromUnmodifiedRow);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getForceRowsAffectedValidation() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("ForceRowsAffectedValidation");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setForceRowsAffectedValidation(boolean ForceRowsAffectedValidation) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("ForceRowsAffectedValidation", ForceRowsAffectedValidation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getForceSelectOutput() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("ForceSelectOutput");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setForceSelectOutput(boolean ForceSelectOutput) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("ForceSelectOutput", ForceSelectOutput);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getForceTriggerResolution() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("ForceTriggerResolution");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setForceTriggerResolution(boolean ForceTriggerResolution) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("ForceTriggerResolution", ForceTriggerResolution);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getHasColumnEncrypted() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("HasColumnEncrypted");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setHasColumnEncrypted(boolean HasColumnEncrypted) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("HasColumnEncrypted", HasColumnEncrypted);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIgnoreOnMergeUpdate() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("IgnoreOnMergeUpdate");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setIgnoreOnMergeUpdate(boolean IgnoreOnMergeUpdate) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("IgnoreOnMergeUpdate", IgnoreOnMergeUpdate);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIncludeGraph() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("IncludeGraph");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setIncludeGraph(boolean IncludeGraph) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("IncludeGraph", IncludeGraph);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIncludeJunctionTable() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("IncludeJunctionTable");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setIncludeJunctionTable(boolean IncludeJunctionTable) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("IncludeJunctionTable", IncludeJunctionTable);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getInsertIfNotExists() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("InsertIfNotExists");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setInsertIfNotExists(boolean InsertIfNotExists) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("InsertIfNotExists", InsertIfNotExists);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getInsertKeepIdentity() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("InsertKeepIdentity");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setInsertKeepIdentity(boolean InsertKeepIdentity) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("InsertKeepIdentity", InsertKeepIdentity);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getInternalIsEntityFrameworkPlus() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("InternalIsEntityFrameworkPlus");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setInternalIsEntityFrameworkPlus(boolean InternalIsEntityFrameworkPlus) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("InternalIsEntityFrameworkPlus", InternalIsEntityFrameworkPlus);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsCheckConstraintOnInsertDisabled() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("IsCheckConstraintOnInsertDisabled");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setIsCheckConstraintOnInsertDisabled(boolean IsCheckConstraintOnInsertDisabled) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("IsCheckConstraintOnInsertDisabled", IsCheckConstraintOnInsertDisabled);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getIsReadOnly() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("IsReadOnly");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setIsReadOnly(boolean IsReadOnly) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("IsReadOnly", IsReadOnly);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getMatchNamesWithUnderscores() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("MatchNamesWithUnderscores");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setMatchNamesWithUnderscores(boolean MatchNamesWithUnderscores) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("MatchNamesWithUnderscores", MatchNamesWithUnderscores);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getMergeKeepIdentity() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("MergeKeepIdentity");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setMergeKeepIdentity(boolean MergeKeepIdentity) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("MergeKeepIdentity", MergeKeepIdentity);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getOnMergeUpdateUseCoalesce() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("OnMergeUpdateUseCoalesce");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setOnMergeUpdateUseCoalesce(boolean OnMergeUpdateUseCoalesce) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("OnMergeUpdateUseCoalesce", OnMergeUpdateUseCoalesce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getOnMergeUpdateUseCoalesceDestination() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("OnMergeUpdateUseCoalesceDestination");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setOnMergeUpdateUseCoalesceDestination(boolean OnMergeUpdateUseCoalesceDestination) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("OnMergeUpdateUseCoalesceDestination", OnMergeUpdateUseCoalesceDestination);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getOnSynchronizeUpdateUseCoalesce() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("OnSynchronizeUpdateUseCoalesce");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setOnSynchronizeUpdateUseCoalesce(boolean OnSynchronizeUpdateUseCoalesce) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("OnSynchronizeUpdateUseCoalesce", OnSynchronizeUpdateUseCoalesce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getOnSynchronizeUpdateUseCoalesceDestination() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("OnSynchronizeUpdateUseCoalesceDestination");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setOnSynchronizeUpdateUseCoalesceDestination(boolean OnSynchronizeUpdateUseCoalesceDestination) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("OnSynchronizeUpdateUseCoalesceDestination", OnSynchronizeUpdateUseCoalesceDestination);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getOnUpdateUseCoalesce() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("OnUpdateUseCoalesce");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setOnUpdateUseCoalesce(boolean OnUpdateUseCoalesce) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("OnUpdateUseCoalesce", OnUpdateUseCoalesce);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getOnUpdateUseCoalesceDestination() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("OnUpdateUseCoalesceDestination");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setOnUpdateUseCoalesceDestination(boolean OnUpdateUseCoalesceDestination) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("OnUpdateUseCoalesceDestination", OnUpdateUseCoalesceDestination);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getSkipPropagationAndAcceptChanges() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("SkipPropagationAndAcceptChanges");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setSkipPropagationAndAcceptChanges(boolean SkipPropagationAndAcceptChanges) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("SkipPropagationAndAcceptChanges", SkipPropagationAndAcceptChanges);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getSynchronizeIgnoreUpdate() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("SynchronizeIgnoreUpdate");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setSynchronizeIgnoreUpdate(boolean SynchronizeIgnoreUpdate) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("SynchronizeIgnoreUpdate", SynchronizeIgnoreUpdate);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getSynchronizeKeepidentity() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("SynchronizeKeepidentity");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setSynchronizeKeepidentity(boolean SynchronizeKeepidentity) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("SynchronizeKeepidentity", SynchronizeKeepidentity);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getSynchronizeOnlyDelete() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("SynchronizeOnlyDelete");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setSynchronizeOnlyDelete(boolean SynchronizeOnlyDelete) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("SynchronizeOnlyDelete", SynchronizeOnlyDelete);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getTemporaryTableCreate() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("TemporaryTableCreate");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setTemporaryTableCreate(boolean TemporaryTableCreate) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("TemporaryTableCreate", TemporaryTableCreate);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getTemporaryTableIsMemory() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("TemporaryTableIsMemory");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setTemporaryTableIsMemory(boolean TemporaryTableIsMemory) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("TemporaryTableIsMemory", TemporaryTableIsMemory);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getTemporaryTablePersist() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("TemporaryTablePersist");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setTemporaryTablePersist(boolean TemporaryTablePersist) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("TemporaryTablePersist", TemporaryTablePersist);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getTemporaryTableUseSameName() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("TemporaryTableUseSameName");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setTemporaryTableUseSameName(boolean TemporaryTableUseSameName) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("TemporaryTableUseSameName", TemporaryTableUseSameName);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getTemporaryTableUseTableLock() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("TemporaryTableUseTableLock");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setTemporaryTableUseTableLock(boolean TemporaryTableUseTableLock) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("TemporaryTableUseTableLock", TemporaryTableUseTableLock);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getTestExecuteAsync() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("TestExecuteAsync");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setTestExecuteAsync(boolean TestExecuteAsync) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("TestExecuteAsync", TestExecuteAsync);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getUnsafeMode() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("UnsafeMode");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setUnsafeMode(boolean UnsafeMode) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("UnsafeMode", UnsafeMode);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getUseAudit() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("UseAudit");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setUseAudit(boolean UseAudit) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("UseAudit", UseAudit);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getUseCompile() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("UseCompile");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setUseCompile(boolean UseCompile) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("UseCompile", UseCompile);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getUseLegacyBatchOperation() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("UseLegacyBatchOperation");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setUseLegacyBatchOperation(boolean UseLegacyBatchOperation) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("UseLegacyBatchOperation", UseLegacyBatchOperation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getUseLogDump() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("UseLogDump");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setUseLogDump(boolean UseLogDump) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("UseLogDump", UseLogDump);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getUseOracleGlobalSequenceIndexTable() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("UseOracleGlobalSequenceIndexTable");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setUseOracleGlobalSequenceIndexTable(boolean UseOracleGlobalSequenceIndexTable) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("UseOracleGlobalSequenceIndexTable", UseOracleGlobalSequenceIndexTable);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getUseParallel() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("UseParallel");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setUseParallel(boolean UseParallel) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("UseParallel", UseParallel);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getUsePermanentTable() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("UsePermanentTable");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setUsePermanentTable(boolean UsePermanentTable) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("UsePermanentTable", UsePermanentTable);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getUsePostgreSqlGetInformationSchema2() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("UsePostgreSqlGetInformationSchema2");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setUsePostgreSqlGetInformationSchema2(boolean UsePostgreSqlGetInformationSchema2) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("UsePostgreSqlGetInformationSchema2", UsePostgreSqlGetInformationSchema2);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getUsePostgreSqlInsertOnConflictDoNothing() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("UsePostgreSqlInsertOnConflictDoNothing");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setUsePostgreSqlInsertOnConflictDoNothing(boolean UsePostgreSqlInsertOnConflictDoNothing) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("UsePostgreSqlInsertOnConflictDoNothing", UsePostgreSqlInsertOnConflictDoNothing);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getUsePostgreSqlTimeZone() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("UsePostgreSqlTimeZone");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setUsePostgreSqlTimeZone(boolean UsePostgreSqlTimeZone) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("UsePostgreSqlTimeZone", UsePostgreSqlTimeZone);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getUseRowsAffected() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("UseRowsAffected");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setUseRowsAffected(boolean UseRowsAffected) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("UseRowsAffected", UseRowsAffected);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getUseSmartMatchNames() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("UseSmartMatchNames");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setUseSmartMatchNames(boolean UseSmartMatchNames) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("UseSmartMatchNames", UseSmartMatchNames);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getUseStopwatchForSqlExecutingTime() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("UseStopwatchForSqlExecutingTime");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setUseStopwatchForSqlExecutingTime(boolean UseStopwatchForSqlExecutingTime) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("UseStopwatchForSqlExecutingTime", UseStopwatchForSqlExecutingTime);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getUseTableLock() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("UseTableLock");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setUseTableLock(boolean UseTableLock) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("UseTableLock", UseTableLock);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getUseTempDbForColumnEncrypted() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("UseTempDbForColumnEncrypted");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setUseTempDbForColumnEncrypted(boolean UseTempDbForColumnEncrypted) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("UseTempDbForColumnEncrypted", UseTempDbForColumnEncrypted);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getValidateAllDestinationMapped() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("ValidateAllDestinationMapped");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setValidateAllDestinationMapped(boolean ValidateAllDestinationMapped) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("ValidateAllDestinationMapped", ValidateAllDestinationMapped);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getValidateAllSourceMapped() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("ValidateAllSourceMapped");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setValidateAllSourceMapped(boolean ValidateAllSourceMapped) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("ValidateAllSourceMapped", ValidateAllSourceMapped);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean getValidateNoDuplicateKey() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Get("ValidateNoDuplicateKey");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setValidateNoDuplicateKey(boolean ValidateNoDuplicateKey) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("ValidateNoDuplicateKey", ValidateNoDuplicateKey);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getBatchDelayInterval() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (int)classInstance.Get("BatchDelayInterval");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setBatchDelayInterval(int BatchDelayInterval) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("BatchDelayInterval", BatchDelayInterval);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getBatchSize() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (int)classInstance.Get("BatchSize");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setBatchSize(int BatchSize) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("BatchSize", BatchSize);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getBatchTimeout() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (int)classInstance.Get("BatchTimeout");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setBatchTimeout(int BatchTimeout) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("BatchTimeout", BatchTimeout);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getCombineMaxCommand() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (int)classInstance.Get("CombineMaxCommand");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setCombineMaxCommand(int CombineMaxCommand) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("CombineMaxCommand", CombineMaxCommand);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getParallelBatchByTask() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (int)classInstance.Get("ParallelBatchByTask");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setParallelBatchByTask(int ParallelBatchByTask) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("ParallelBatchByTask", ParallelBatchByTask);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getParallelMinBatch() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (int)classInstance.Get("ParallelMinBatch");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setParallelMinBatch(int ParallelMinBatch) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("ParallelMinBatch", ParallelMinBatch);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getParallelMinRecord() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (int)classInstance.Get("ParallelMinRecord");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setParallelMinRecord(int ParallelMinRecord) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("ParallelMinRecord", ParallelMinRecord);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getRetryCount() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (int)classInstance.Get("RetryCount");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setRetryCount(int RetryCount) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("RetryCount", RetryCount);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getRowsAffected() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (int)classInstance.Get("RowsAffected");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setRowsAffected(int RowsAffected) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("RowsAffected", RowsAffected);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getStreamSize() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (int)classInstance.Get("StreamSize");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setStreamSize(int StreamSize) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("StreamSize", StreamSize);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getTemporaryTableBatchByTable() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (int)classInstance.Get("TemporaryTableBatchByTable");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setTemporaryTableBatchByTable(int TemporaryTableBatchByTable) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("TemporaryTableBatchByTable", TemporaryTableBatchByTable);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getTemporaryTableInsertBatchSize() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (int)classInstance.Get("TemporaryTableInsertBatchSize");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setTemporaryTableInsertBatchSize(int TemporaryTableInsertBatchSize) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("TemporaryTableInsertBatchSize", TemporaryTableInsertBatchSize);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int getTemporaryTableMinRecord() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (int)classInstance.Get("TemporaryTableMinRecord");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setTemporaryTableMinRecord(int TemporaryTableMinRecord) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("TemporaryTableMinRecord", TemporaryTableMinRecord);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbConnection getConnection() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("Connection");
            return new DbConnection(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setConnection(DbConnection Connection) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("Connection", Connection == null ? null : Connection.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbTransaction getTransaction() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("Transaction");
            return new DbTransaction(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setTransaction(DbTransaction Transaction) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("Transaction", Transaction == null ? null : Transaction.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Stopwatch getStopwatchForSqlExecutingTime() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("StopwatchForSqlExecutingTime");
            return new Stopwatch(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setStopwatchForSqlExecutingTime(Stopwatch StopwatchForSqlExecutingTime) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("StopwatchForSqlExecutingTime", StopwatchForSqlExecutingTime == null ? null : StopwatchForSqlExecutingTime.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public LambdaExpression getLambdaCoalesceDestinationOnMergeUpdateExpression() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("LambdaCoalesceDestinationOnMergeUpdateExpression");
            return new LambdaExpression(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setLambdaCoalesceDestinationOnMergeUpdateExpression(LambdaExpression LambdaCoalesceDestinationOnMergeUpdateExpression) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("LambdaCoalesceDestinationOnMergeUpdateExpression", LambdaCoalesceDestinationOnMergeUpdateExpression == null ? null : LambdaCoalesceDestinationOnMergeUpdateExpression.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public LambdaExpression getLambdaCoalesceDestinationOnSynchronizeUpdateExpression() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("LambdaCoalesceDestinationOnSynchronizeUpdateExpression");
            return new LambdaExpression(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setLambdaCoalesceDestinationOnSynchronizeUpdateExpression(LambdaExpression LambdaCoalesceDestinationOnSynchronizeUpdateExpression) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("LambdaCoalesceDestinationOnSynchronizeUpdateExpression", LambdaCoalesceDestinationOnSynchronizeUpdateExpression == null ? null : LambdaCoalesceDestinationOnSynchronizeUpdateExpression.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public LambdaExpression getLambdaCoalesceDestinationOnUpdateExpression() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("LambdaCoalesceDestinationOnUpdateExpression");
            return new LambdaExpression(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setLambdaCoalesceDestinationOnUpdateExpression(LambdaExpression LambdaCoalesceDestinationOnUpdateExpression) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("LambdaCoalesceDestinationOnUpdateExpression", LambdaCoalesceDestinationOnUpdateExpression == null ? null : LambdaCoalesceDestinationOnUpdateExpression.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public LambdaExpression getLambdaCoalesceOnMergeUpdateExpression() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("LambdaCoalesceOnMergeUpdateExpression");
            return new LambdaExpression(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setLambdaCoalesceOnMergeUpdateExpression(LambdaExpression LambdaCoalesceOnMergeUpdateExpression) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("LambdaCoalesceOnMergeUpdateExpression", LambdaCoalesceOnMergeUpdateExpression == null ? null : LambdaCoalesceOnMergeUpdateExpression.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public LambdaExpression getLambdaCoalesceOnSynchronizeUpdateExpression() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("LambdaCoalesceOnSynchronizeUpdateExpression");
            return new LambdaExpression(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setLambdaCoalesceOnSynchronizeUpdateExpression(LambdaExpression LambdaCoalesceOnSynchronizeUpdateExpression) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("LambdaCoalesceOnSynchronizeUpdateExpression", LambdaCoalesceOnSynchronizeUpdateExpression == null ? null : LambdaCoalesceOnSynchronizeUpdateExpression.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public LambdaExpression getLambdaCoalesceOnUpdateExpression() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("LambdaCoalesceOnUpdateExpression");
            return new LambdaExpression(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setLambdaCoalesceOnUpdateExpression(LambdaExpression LambdaCoalesceOnUpdateExpression) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("LambdaCoalesceOnUpdateExpression", LambdaCoalesceOnUpdateExpression == null ? null : LambdaCoalesceOnUpdateExpression.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public LambdaExpression getLambdaColumnStagingTableFormulaExpression() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("LambdaColumnStagingTableFormulaExpression");
            return new LambdaExpression(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setLambdaColumnStagingTableFormulaExpression(LambdaExpression LambdaColumnStagingTableFormulaExpression) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("LambdaColumnStagingTableFormulaExpression", LambdaColumnStagingTableFormulaExpression == null ? null : LambdaColumnStagingTableFormulaExpression.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public LambdaExpression getLambdaDeleteMatchedAndConditionExpression() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("LambdaDeleteMatchedAndConditionExpression");
            return new LambdaExpression(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setLambdaDeleteMatchedAndConditionExpression(LambdaExpression LambdaDeleteMatchedAndConditionExpression) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("LambdaDeleteMatchedAndConditionExpression", LambdaDeleteMatchedAndConditionExpression == null ? null : LambdaDeleteMatchedAndConditionExpression.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public LambdaExpression getLambdaDeleteMatchedAndOneNotConditionExpression() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("LambdaDeleteMatchedAndOneNotConditionExpression");
            return new LambdaExpression(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setLambdaDeleteMatchedAndOneNotConditionExpression(LambdaExpression LambdaDeleteMatchedAndOneNotConditionExpression) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("LambdaDeleteMatchedAndOneNotConditionExpression", LambdaDeleteMatchedAndOneNotConditionExpression == null ? null : LambdaDeleteMatchedAndOneNotConditionExpression.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public LambdaExpression getLambdaIgnoreColumnOutputExpression() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("LambdaIgnoreColumnOutputExpression");
            return new LambdaExpression(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setLambdaIgnoreColumnOutputExpression(LambdaExpression LambdaIgnoreColumnOutputExpression) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("LambdaIgnoreColumnOutputExpression", LambdaIgnoreColumnOutputExpression == null ? null : LambdaIgnoreColumnOutputExpression.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public LambdaExpression getLambdaIgnoreOnDeleteMatchedAndConditionExpression() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("LambdaIgnoreOnDeleteMatchedAndConditionExpression");
            return new LambdaExpression(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setLambdaIgnoreOnDeleteMatchedAndConditionExpression(LambdaExpression LambdaIgnoreOnDeleteMatchedAndConditionExpression) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("LambdaIgnoreOnDeleteMatchedAndConditionExpression", LambdaIgnoreOnDeleteMatchedAndConditionExpression == null ? null : LambdaIgnoreOnDeleteMatchedAndConditionExpression.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public LambdaExpression getLambdaIgnoreOnDeleteMatchedAndOneNotConditionExpression() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("LambdaIgnoreOnDeleteMatchedAndOneNotConditionExpression");
            return new LambdaExpression(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setLambdaIgnoreOnDeleteMatchedAndOneNotConditionExpression(LambdaExpression LambdaIgnoreOnDeleteMatchedAndOneNotConditionExpression) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("LambdaIgnoreOnDeleteMatchedAndOneNotConditionExpression", LambdaIgnoreOnDeleteMatchedAndOneNotConditionExpression == null ? null : LambdaIgnoreOnDeleteMatchedAndOneNotConditionExpression.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public LambdaExpression getLambdaIgnoreOnInsertExpression() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("LambdaIgnoreOnInsertExpression");
            return new LambdaExpression(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setLambdaIgnoreOnInsertExpression(LambdaExpression LambdaIgnoreOnInsertExpression) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("LambdaIgnoreOnInsertExpression", LambdaIgnoreOnInsertExpression == null ? null : LambdaIgnoreOnInsertExpression.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public LambdaExpression getLambdaIgnoreOnMergeInsertExpression() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("LambdaIgnoreOnMergeInsertExpression");
            return new LambdaExpression(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setLambdaIgnoreOnMergeInsertExpression(LambdaExpression LambdaIgnoreOnMergeInsertExpression) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("LambdaIgnoreOnMergeInsertExpression", LambdaIgnoreOnMergeInsertExpression == null ? null : LambdaIgnoreOnMergeInsertExpression.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public LambdaExpression getLambdaIgnoreOnMergeMatchedAndConditionExpression() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("LambdaIgnoreOnMergeMatchedAndConditionExpression");
            return new LambdaExpression(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setLambdaIgnoreOnMergeMatchedAndConditionExpression(LambdaExpression LambdaIgnoreOnMergeMatchedAndConditionExpression) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("LambdaIgnoreOnMergeMatchedAndConditionExpression", LambdaIgnoreOnMergeMatchedAndConditionExpression == null ? null : LambdaIgnoreOnMergeMatchedAndConditionExpression.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public LambdaExpression getLambdaIgnoreOnMergeMatchedAndOneNotConditionExpression() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("LambdaIgnoreOnMergeMatchedAndOneNotConditionExpression");
            return new LambdaExpression(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setLambdaIgnoreOnMergeMatchedAndOneNotConditionExpression(LambdaExpression LambdaIgnoreOnMergeMatchedAndOneNotConditionExpression) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("LambdaIgnoreOnMergeMatchedAndOneNotConditionExpression", LambdaIgnoreOnMergeMatchedAndOneNotConditionExpression == null ? null : LambdaIgnoreOnMergeMatchedAndOneNotConditionExpression.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public LambdaExpression getLambdaIgnoreOnMergeUpdateExpression() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("LambdaIgnoreOnMergeUpdateExpression");
            return new LambdaExpression(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setLambdaIgnoreOnMergeUpdateExpression(LambdaExpression LambdaIgnoreOnMergeUpdateExpression) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("LambdaIgnoreOnMergeUpdateExpression", LambdaIgnoreOnMergeUpdateExpression == null ? null : LambdaIgnoreOnMergeUpdateExpression.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public LambdaExpression getLambdaIgnoreOnSynchronizeInsertExpression() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("LambdaIgnoreOnSynchronizeInsertExpression");
            return new LambdaExpression(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setLambdaIgnoreOnSynchronizeInsertExpression(LambdaExpression LambdaIgnoreOnSynchronizeInsertExpression) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("LambdaIgnoreOnSynchronizeInsertExpression", LambdaIgnoreOnSynchronizeInsertExpression == null ? null : LambdaIgnoreOnSynchronizeInsertExpression.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public LambdaExpression getLambdaIgnoreOnSynchronizeMatchedAndConditionExpression() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("LambdaIgnoreOnSynchronizeMatchedAndConditionExpression");
            return new LambdaExpression(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setLambdaIgnoreOnSynchronizeMatchedAndConditionExpression(LambdaExpression LambdaIgnoreOnSynchronizeMatchedAndConditionExpression) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("LambdaIgnoreOnSynchronizeMatchedAndConditionExpression", LambdaIgnoreOnSynchronizeMatchedAndConditionExpression == null ? null : LambdaIgnoreOnSynchronizeMatchedAndConditionExpression.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public LambdaExpression getLambdaIgnoreOnSynchronizeMatchedAndOneNotConditionExpression() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("LambdaIgnoreOnSynchronizeMatchedAndOneNotConditionExpression");
            return new LambdaExpression(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setLambdaIgnoreOnSynchronizeMatchedAndOneNotConditionExpression(LambdaExpression LambdaIgnoreOnSynchronizeMatchedAndOneNotConditionExpression) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("LambdaIgnoreOnSynchronizeMatchedAndOneNotConditionExpression", LambdaIgnoreOnSynchronizeMatchedAndOneNotConditionExpression == null ? null : LambdaIgnoreOnSynchronizeMatchedAndOneNotConditionExpression.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public LambdaExpression getLambdaIgnoreOnSynchronizeUpdateExpression() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("LambdaIgnoreOnSynchronizeUpdateExpression");
            return new LambdaExpression(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setLambdaIgnoreOnSynchronizeUpdateExpression(LambdaExpression LambdaIgnoreOnSynchronizeUpdateExpression) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("LambdaIgnoreOnSynchronizeUpdateExpression", LambdaIgnoreOnSynchronizeUpdateExpression == null ? null : LambdaIgnoreOnSynchronizeUpdateExpression.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public LambdaExpression getLambdaIgnoreOnUpdateExpression() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("LambdaIgnoreOnUpdateExpression");
            return new LambdaExpression(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setLambdaIgnoreOnUpdateExpression(LambdaExpression LambdaIgnoreOnUpdateExpression) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("LambdaIgnoreOnUpdateExpression", LambdaIgnoreOnUpdateExpression == null ? null : LambdaIgnoreOnUpdateExpression.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public LambdaExpression getLambdaInputExpression() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("LambdaInputExpression");
            return new LambdaExpression(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setLambdaInputExpression(LambdaExpression LambdaInputExpression) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("LambdaInputExpression", LambdaInputExpression == null ? null : LambdaInputExpression.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public LambdaExpression getLambdaInputOutputExpression() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("LambdaInputOutputExpression");
            return new LambdaExpression(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setLambdaInputOutputExpression(LambdaExpression LambdaInputOutputExpression) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("LambdaInputOutputExpression", LambdaInputOutputExpression == null ? null : LambdaInputOutputExpression.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public LambdaExpression getLambdaMergeMatchedAndConditionExpression() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("LambdaMergeMatchedAndConditionExpression");
            return new LambdaExpression(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setLambdaMergeMatchedAndConditionExpression(LambdaExpression LambdaMergeMatchedAndConditionExpression) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("LambdaMergeMatchedAndConditionExpression", LambdaMergeMatchedAndConditionExpression == null ? null : LambdaMergeMatchedAndConditionExpression.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public LambdaExpression getLambdaMergeMatchedAndOneNotConditionExpression() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("LambdaMergeMatchedAndOneNotConditionExpression");
            return new LambdaExpression(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setLambdaMergeMatchedAndOneNotConditionExpression(LambdaExpression LambdaMergeMatchedAndOneNotConditionExpression) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("LambdaMergeMatchedAndOneNotConditionExpression", LambdaMergeMatchedAndOneNotConditionExpression == null ? null : LambdaMergeMatchedAndOneNotConditionExpression.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public LambdaExpression getLambdaOnMergeInsertInputExpression() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("LambdaOnMergeInsertInputExpression");
            return new LambdaExpression(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setLambdaOnMergeInsertInputExpression(LambdaExpression LambdaOnMergeInsertInputExpression) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("LambdaOnMergeInsertInputExpression", LambdaOnMergeInsertInputExpression == null ? null : LambdaOnMergeInsertInputExpression.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public LambdaExpression getLambdaOnMergeUpdateInputExpression() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("LambdaOnMergeUpdateInputExpression");
            return new LambdaExpression(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setLambdaOnMergeUpdateInputExpression(LambdaExpression LambdaOnMergeUpdateInputExpression) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("LambdaOnMergeUpdateInputExpression", LambdaOnMergeUpdateInputExpression == null ? null : LambdaOnMergeUpdateInputExpression.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public LambdaExpression getLambdaOnSynchronizeInsertInputExpression() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("LambdaOnSynchronizeInsertInputExpression");
            return new LambdaExpression(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setLambdaOnSynchronizeInsertInputExpression(LambdaExpression LambdaOnSynchronizeInsertInputExpression) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("LambdaOnSynchronizeInsertInputExpression", LambdaOnSynchronizeInsertInputExpression == null ? null : LambdaOnSynchronizeInsertInputExpression.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public LambdaExpression getLambdaOnSynchronizeUpdateInputExpression() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("LambdaOnSynchronizeUpdateInputExpression");
            return new LambdaExpression(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setLambdaOnSynchronizeUpdateInputExpression(LambdaExpression LambdaOnSynchronizeUpdateInputExpression) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("LambdaOnSynchronizeUpdateInputExpression", LambdaOnSynchronizeUpdateInputExpression == null ? null : LambdaOnSynchronizeUpdateInputExpression.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public LambdaExpression getLambdaOutputExpression() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("LambdaOutputExpression");
            return new LambdaExpression(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setLambdaOutputExpression(LambdaExpression LambdaOutputExpression) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("LambdaOutputExpression", LambdaOutputExpression == null ? null : LambdaOutputExpression.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public LambdaExpression getLambdaPrimaryKeyExpression() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("LambdaPrimaryKeyExpression");
            return new LambdaExpression(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setLambdaPrimaryKeyExpression(LambdaExpression LambdaPrimaryKeyExpression) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("LambdaPrimaryKeyExpression", LambdaPrimaryKeyExpression == null ? null : LambdaPrimaryKeyExpression.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public LambdaExpression getLambdaSynchronizeDeleteKeySubsetExpression() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("LambdaSynchronizeDeleteKeySubsetExpression");
            return new LambdaExpression(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setLambdaSynchronizeDeleteKeySubsetExpression(LambdaExpression LambdaSynchronizeDeleteKeySubsetExpression) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("LambdaSynchronizeDeleteKeySubsetExpression", LambdaSynchronizeDeleteKeySubsetExpression == null ? null : LambdaSynchronizeDeleteKeySubsetExpression.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public LambdaExpression getLambdaSynchronizeMatchedAndConditionExpression() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("LambdaSynchronizeMatchedAndConditionExpression");
            return new LambdaExpression(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setLambdaSynchronizeMatchedAndConditionExpression(LambdaExpression LambdaSynchronizeMatchedAndConditionExpression) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("LambdaSynchronizeMatchedAndConditionExpression", LambdaSynchronizeMatchedAndConditionExpression == null ? null : LambdaSynchronizeMatchedAndConditionExpression.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public LambdaExpression getLambdaSynchronizeMatchedAndOneNotConditionExpression() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("LambdaSynchronizeMatchedAndOneNotConditionExpression");
            return new LambdaExpression(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setLambdaSynchronizeMatchedAndOneNotConditionExpression(LambdaExpression LambdaSynchronizeMatchedAndOneNotConditionExpression) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("LambdaSynchronizeMatchedAndOneNotConditionExpression", LambdaSynchronizeMatchedAndOneNotConditionExpression == null ? null : LambdaSynchronizeMatchedAndOneNotConditionExpression.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public LambdaExpression getLambdaUpdateMatchedAndConditionExpression() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("LambdaUpdateMatchedAndConditionExpression");
            return new LambdaExpression(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setLambdaUpdateMatchedAndConditionExpression(LambdaExpression LambdaUpdateMatchedAndConditionExpression) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("LambdaUpdateMatchedAndConditionExpression", LambdaUpdateMatchedAndConditionExpression == null ? null : LambdaUpdateMatchedAndConditionExpression.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public LambdaExpression getLambdaUpdateMatchedAndOneNotConditionExpression() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("LambdaUpdateMatchedAndOneNotConditionExpression");
            return new LambdaExpression(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setLambdaUpdateMatchedAndOneNotConditionExpression(LambdaExpression LambdaUpdateMatchedAndOneNotConditionExpression) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("LambdaUpdateMatchedAndOneNotConditionExpression", LambdaUpdateMatchedAndOneNotConditionExpression == null ? null : LambdaUpdateMatchedAndOneNotConditionExpression.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetObject getDataSource() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("DataSource");
            return new NetObject(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setDataSource(NetObject DataSource) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("DataSource", DataSource == null ? null : DataSource.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Assembly getProviderAssembly() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("ProviderAssembly");
            return new Assembly(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setProviderAssembly(Assembly ProviderAssembly) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("ProviderAssembly", ProviderAssembly == null ? null : ProviderAssembly.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getAutoMapIdentityName() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (java.lang.String)classInstance.Get("AutoMapIdentityName");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAutoMapIdentityName(java.lang.String AutoMapIdentityName) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("AutoMapIdentityName", AutoMapIdentityName);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getAutoMapKeyName() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (java.lang.String)classInstance.Get("AutoMapKeyName");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAutoMapKeyName(java.lang.String AutoMapKeyName) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("AutoMapKeyName", AutoMapKeyName);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getColumnSynchronizeDeleteKeySubsetFormula() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (java.lang.String)classInstance.Get("ColumnSynchronizeDeleteKeySubsetFormula");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setColumnSynchronizeDeleteKeySubsetFormula(java.lang.String ColumnSynchronizeDeleteKeySubsetFormula) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("ColumnSynchronizeDeleteKeySubsetFormula", ColumnSynchronizeDeleteKeySubsetFormula);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getCommandParameterPrefix() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (java.lang.String)classInstance.Get("CommandParameterPrefix");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setCommandParameterPrefix(java.lang.String CommandParameterPrefix) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("CommandParameterPrefix", CommandParameterPrefix);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getCommandParameterSuffix() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (java.lang.String)classInstance.Get("CommandParameterSuffix");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setCommandParameterSuffix(java.lang.String CommandParameterSuffix) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("CommandParameterSuffix", CommandParameterSuffix);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getConnectionName() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (java.lang.String)classInstance.Get("ConnectionName");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setConnectionName(java.lang.String ConnectionName) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("ConnectionName", ConnectionName);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getConnectionString() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (java.lang.String)classInstance.Get("ConnectionString");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setConnectionString(java.lang.String ConnectionString) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("ConnectionString", ConnectionString);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getDeleteMatchedAndFormula() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (java.lang.String)classInstance.Get("DeleteMatchedAndFormula");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setDeleteMatchedAndFormula(java.lang.String DeleteMatchedAndFormula) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("DeleteMatchedAndFormula", DeleteMatchedAndFormula);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getDeletePrimaryKeyAndFormula() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (java.lang.String)classInstance.Get("DeletePrimaryKeyAndFormula");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setDeletePrimaryKeyAndFormula(java.lang.String DeletePrimaryKeyAndFormula) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("DeletePrimaryKeyAndFormula", DeletePrimaryKeyAndFormula);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getDeleteStagingTableFilterFormula() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (java.lang.String)classInstance.Get("DeleteStagingTableFilterFormula");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setDeleteStagingTableFilterFormula(java.lang.String DeleteStagingTableFilterFormula) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("DeleteStagingTableFilterFormula", DeleteStagingTableFilterFormula);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getDestinationSchemaName() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (java.lang.String)classInstance.Get("DestinationSchemaName");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setDestinationSchemaName(java.lang.String DestinationSchemaName) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("DestinationSchemaName", DestinationSchemaName);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getDestinationTableName() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (java.lang.String)classInstance.Get("DestinationTableName");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setDestinationTableName(java.lang.String DestinationTableName) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("DestinationTableName", DestinationTableName);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getInsertNotMatchedAndFormula() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (java.lang.String)classInstance.Get("InsertNotMatchedAndFormula");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setInsertNotMatchedAndFormula(java.lang.String InsertNotMatchedAndFormula) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("InsertNotMatchedAndFormula", InsertNotMatchedAndFormula);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getInsertPrimaryKeyAndFormula() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (java.lang.String)classInstance.Get("InsertPrimaryKeyAndFormula");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setInsertPrimaryKeyAndFormula(java.lang.String InsertPrimaryKeyAndFormula) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("InsertPrimaryKeyAndFormula", InsertPrimaryKeyAndFormula);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getInsertStagingTableFilterFormula() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (java.lang.String)classInstance.Get("InsertStagingTableFilterFormula");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setInsertStagingTableFilterFormula(java.lang.String InsertStagingTableFilterFormula) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("InsertStagingTableFilterFormula", InsertStagingTableFilterFormula);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getMergeMatchedAndFormula() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (java.lang.String)classInstance.Get("MergeMatchedAndFormula");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setMergeMatchedAndFormula(java.lang.String MergeMatchedAndFormula) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("MergeMatchedAndFormula", MergeMatchedAndFormula);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getMergeNotMatchedAndFormula() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (java.lang.String)classInstance.Get("MergeNotMatchedAndFormula");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setMergeNotMatchedAndFormula(java.lang.String MergeNotMatchedAndFormula) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("MergeNotMatchedAndFormula", MergeNotMatchedAndFormula);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getMergePrimaryKeyAndFormula() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (java.lang.String)classInstance.Get("MergePrimaryKeyAndFormula");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setMergePrimaryKeyAndFormula(java.lang.String MergePrimaryKeyAndFormula) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("MergePrimaryKeyAndFormula", MergePrimaryKeyAndFormula);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getMergeStagingTableFilterFormula() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (java.lang.String)classInstance.Get("MergeStagingTableFilterFormula");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setMergeStagingTableFilterFormula(java.lang.String MergeStagingTableFilterFormula) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("MergeStagingTableFilterFormula", MergeStagingTableFilterFormula);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getSynchronizeDeleteDestinationTableFilterFormula() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (java.lang.String)classInstance.Get("SynchronizeDeleteDestinationTableFilterFormula");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setSynchronizeDeleteDestinationTableFilterFormula(java.lang.String SynchronizeDeleteDestinationTableFilterFormula) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("SynchronizeDeleteDestinationTableFilterFormula", SynchronizeDeleteDestinationTableFilterFormula);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getSynchronizeMatchedAndFormula() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (java.lang.String)classInstance.Get("SynchronizeMatchedAndFormula");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setSynchronizeMatchedAndFormula(java.lang.String SynchronizeMatchedAndFormula) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("SynchronizeMatchedAndFormula", SynchronizeMatchedAndFormula);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getSynchronizeNotMatchedAndFormula() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (java.lang.String)classInstance.Get("SynchronizeNotMatchedAndFormula");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setSynchronizeNotMatchedAndFormula(java.lang.String SynchronizeNotMatchedAndFormula) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("SynchronizeNotMatchedAndFormula", SynchronizeNotMatchedAndFormula);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getSynchronizePrimaryKeyAndFormulaDelete() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (java.lang.String)classInstance.Get("SynchronizePrimaryKeyAndFormulaDelete");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setSynchronizePrimaryKeyAndFormulaDelete(java.lang.String SynchronizePrimaryKeyAndFormulaDelete) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("SynchronizePrimaryKeyAndFormulaDelete", SynchronizePrimaryKeyAndFormulaDelete);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getSynchronizePrimaryKeyAndFormulaMerge() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (java.lang.String)classInstance.Get("SynchronizePrimaryKeyAndFormulaMerge");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setSynchronizePrimaryKeyAndFormulaMerge(java.lang.String SynchronizePrimaryKeyAndFormulaMerge) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("SynchronizePrimaryKeyAndFormulaMerge", SynchronizePrimaryKeyAndFormulaMerge);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getSynchronizeSoftDeleteFormula() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (java.lang.String)classInstance.Get("SynchronizeSoftDeleteFormula");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setSynchronizeSoftDeleteFormula(java.lang.String SynchronizeSoftDeleteFormula) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("SynchronizeSoftDeleteFormula", SynchronizeSoftDeleteFormula);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getTableHintSql() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (java.lang.String)classInstance.Get("TableHintSql");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setTableHintSql(java.lang.String TableHintSql) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("TableHintSql", TableHintSql);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getTemporaryTableName() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (java.lang.String)classInstance.Get("TemporaryTableName");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setTemporaryTableName(java.lang.String TemporaryTableName) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("TemporaryTableName", TemporaryTableName);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getTemporaryTableSchemaName() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (java.lang.String)classInstance.Get("TemporaryTableSchemaName");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setTemporaryTableSchemaName(java.lang.String TemporaryTableSchemaName) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("TemporaryTableSchemaName", TemporaryTableSchemaName);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getUpdateMatchedAndFormula() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (java.lang.String)classInstance.Get("UpdateMatchedAndFormula");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setUpdateMatchedAndFormula(java.lang.String UpdateMatchedAndFormula) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("UpdateMatchedAndFormula", UpdateMatchedAndFormula);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getUpdatePrimaryKeyAndFormula() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (java.lang.String)classInstance.Get("UpdatePrimaryKeyAndFormula");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setUpdatePrimaryKeyAndFormula(java.lang.String UpdatePrimaryKeyAndFormula) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("UpdatePrimaryKeyAndFormula", UpdatePrimaryKeyAndFormula);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public java.lang.String getUpdateStagingTableFilterFormula() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (java.lang.String)classInstance.Get("UpdateStagingTableFilterFormula");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setUpdateStagingTableFilterFormula(java.lang.String UpdateStagingTableFilterFormula) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("UpdateStagingTableFilterFormula", UpdateStagingTableFilterFormula);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public StringBuilder getLogDump() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("LogDump");
            return new StringBuilder(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setLogDump(StringBuilder LogDump) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("LogDump", LogDump == null ? null : LogDump.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public TimeSpan getRetryInterval() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("RetryInterval");
            return new TimeSpan(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setRetryInterval(TimeSpan RetryInterval) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("RetryInterval", RetryInterval == null ? null : RetryInterval.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetType getEntityType() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("EntityType");
            return new NetType(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setEntityType(NetType EntityType) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("EntityType", EntityType == null ? null : EntityType.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public AuditModeType getAuditMode() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("AuditMode");
            return new AuditModeType(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAuditMode(AuditModeType AuditMode) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("AuditMode", AuditMode == null ? null : AuditMode.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public AutoMapType getAutoMap() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("AutoMap");
            return new AutoMapType(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setAutoMap(AutoMapType AutoMap) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("AutoMap", AutoMap == null ? null : AutoMap.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public CaseSensitiveType getCaseSensitive() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("CaseSensitive");
            return new CaseSensitiveType(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setCaseSensitive(CaseSensitiveType CaseSensitive) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("CaseSensitive", CaseSensitive == null ? null : CaseSensitive.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public CustomProvider getCustomProvider() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("CustomProvider");
            return new CustomProvider(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setCustomProvider(CustomProvider CustomProvider) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("CustomProvider", CustomProvider == null ? null : CustomProvider.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DefaultValueResolutionType getDefaultValueResolution() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("DefaultValueResolution");
            return new DefaultValueResolutionType(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setDefaultValueResolution(DefaultValueResolutionType DefaultValueResolution) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("DefaultValueResolution", DefaultValueResolution == null ? null : DefaultValueResolution.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ErrorModeType getErrorMode() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("ErrorMode");
            return new ErrorModeType(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setErrorMode(ErrorModeType ErrorMode) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("ErrorMode", ErrorMode == null ? null : ErrorMode.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public InternalOptions getInternalOptions() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("InternalOptions");
            return new InternalOptions(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setInternalOptions(InternalOptions InternalOptions) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("InternalOptions", InternalOptions == null ? null : InternalOptions.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public InternalTransactionType getInternalTransaction() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("InternalTransaction");
            return new InternalTransactionType(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setInternalTransaction(InternalTransactionType InternalTransaction) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("InternalTransaction", InternalTransaction == null ? null : InternalTransaction.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ProviderType getProvider() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("Provider");
            return new ProviderType(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setProvider(ProviderType Provider) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("Provider", Provider == null ? null : Provider.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ResolutionType getResolution() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("Resolution");
            return new ResolutionType(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setResolution(ResolutionType Resolution) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("Resolution", Resolution == null ? null : Resolution.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public ResultInfo getResultInfo() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("ResultInfo");
            return new ResultInfo(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void setResultInfo(ResultInfo ResultInfo) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Set("ResultInfo", ResultInfo == null ? null : ResultInfo.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



    // Instance Events section
    

}