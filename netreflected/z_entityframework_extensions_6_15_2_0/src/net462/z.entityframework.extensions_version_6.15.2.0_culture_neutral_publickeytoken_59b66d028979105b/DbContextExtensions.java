/*
 *  MIT License
 *
 *  Copyright (c) 2022 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package ;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import system.data.entity.core.objects.ObjectContext;
import system.data.entity.core.objects.SaveOptions;
import system.data.entity.DbContext;
import system.threading.tasks.Task;
import system.threading.CancellationToken;
import z.entityframework.extensions.core.infrastructure.DbModel;
import z.entityframework.extensions.MySqlDatabase;
import z.entityframework.extensions.OracleDevArtDatabase;
import z.entityframework.extensions.SqlCeDatabase;
import z.entityframework.extensions.SqlDatabase;
import z.entityframework.extensions.SQLiteDatabase;


/**
 * The base .NET class managing DbContextExtensions, Z.EntityFramework.Extensions, Version=6.15.2.0, Culture=neutral, PublicKeyToken=59b66d028979105b.
 * <p>
 * 
 * See: <a href="https://docs.microsoft.com/en-us/dotnet/api/DbContextExtensions" target="_top">https://docs.microsoft.com/en-us/dotnet/api/DbContextExtensions</a>
 */
public class DbContextExtensions extends NetObject  {
    /**
     * Fully assembly qualified name: Z.EntityFramework.Extensions, Version=6.15.2.0, Culture=neutral, PublicKeyToken=59b66d028979105b
     */
    public static final String assemblyFullName = "Z.EntityFramework.Extensions, Version=6.15.2.0, Culture=neutral, PublicKeyToken=59b66d028979105b";
    /**
     * Assembly name: Z.EntityFramework.Extensions
     */
    public static final String assemblyShortName = "Z.EntityFramework.Extensions";
    /**
     * Qualified class name: DbContextExtensions
     */
    public static final String className = "DbContextExtensions";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    /**
     * The type managed from JCOBridge. See {@link JCType}
     */
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            String classToCreate = className + ", "
                    + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Creating %s", classToCreate);
            JCType typeCreated = bridge.GetType(classToCreate);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Created: %s",
                        (typeCreated != null) ? typeCreated.toString() : "Returned null value");
            return typeCreated;
        } catch (JCException e) {
            JCOReflector.writeLog(e);
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }
    /**
     * Internal constructor. Use with caution 
     */
    public DbContextExtensions(java.lang.Object instance) throws Throwable {
        super(instance);
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public java.lang.Object getJCOInstance() {
        return classInstance;
    }

    public void setJCOInstance(JCObject instance) {
        classInstance = instance;
        super.setJCOInstance(classInstance);
    }

    public JCType getJCOType() {
        return classType;
    }
    /**
     * Try to cast the {@link IJCOBridgeReflected} instance into {@link DbContextExtensions}, a cast assert is made to check if types are compatible.
     * @param from {@link IJCOBridgeReflected} instance to be casted
     * @return {@link DbContextExtensions} instance
     * @throws java.lang.Throwable in case of error during cast operation
     */
    public static DbContextExtensions cast(IJCOBridgeReflected from) throws Throwable {
        NetType.AssertCast(classType, from);
        return new DbContextExtensions(from.getJCOInstance());
    }

    // Constructors section
    
    public DbContextExtensions() throws Throwable {
    }

    
    // Methods section
    
    public static int BatchSaveChanges(ObjectContext this) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.threading.ThreadAbortException, system.InvalidOperationException, system.configuration.ConfigurationException, system.TypeLoadException, system.resources.MissingManifestResourceException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.NotImplementedException, system.ObjectDisposedException, system.NotSupportedException, system.collections.generic.KeyNotFoundException, system.OverflowException, system.FormatException, system.OutOfMemoryException, system.PlatformNotSupportedException, system.security.cryptography.CryptographicException, system.MulticastNotSupportedException, system.data.entity.validation.DbEntityValidationException, system.data.entity.core.UpdateException, system.data.entity.infrastructure.CommitFailedException, system.data.entity.infrastructure.DbUpdateException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (int)classType.Invoke("BatchSaveChanges", this == null ? null : this.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int BatchSaveChanges(ObjectContext this, SaveOptions saveOptions) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.threading.ThreadAbortException, system.InvalidOperationException, system.configuration.ConfigurationException, system.TypeLoadException, system.resources.MissingManifestResourceException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.NotImplementedException, system.ObjectDisposedException, system.NotSupportedException, system.collections.generic.KeyNotFoundException, system.OverflowException, system.FormatException, system.OutOfMemoryException, system.PlatformNotSupportedException, system.security.cryptography.CryptographicException, system.MulticastNotSupportedException, system.data.entity.validation.DbEntityValidationException, system.data.entity.core.UpdateException, system.data.entity.infrastructure.CommitFailedException, system.data.entity.infrastructure.DbUpdateException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (int)classType.Invoke("BatchSaveChanges", this == null ? null : this.getJCOInstance(), saveOptions == null ? null : saveOptions.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int BatchSaveChanges(DbContext this) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.globalization.CultureNotFoundException, system.NotSupportedException, system.IndexOutOfRangeException, system.ArgumentOutOfRangeException, system.NotImplementedException, system.resources.MissingManifestResourceException, system.InvalidOperationException, system.collections.generic.KeyNotFoundException, system.ObjectDisposedException, system.OverflowException, system.FormatException, system.OutOfMemoryException, system.PlatformNotSupportedException, system.security.cryptography.CryptographicException, system.MulticastNotSupportedException, system.data.entity.validation.DbEntityValidationException, system.NullReferenceException, system.data.entity.core.UpdateException, system.data.entity.infrastructure.CommitFailedException, system.data.entity.infrastructure.DbUpdateException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (int)classType.Invoke("BatchSaveChanges", this == null ? null : this.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static ObjectContext GetObjectContext(DbContext this) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objGetObjectContext = (JCObject)classType.Invoke("GetObjectContext", this == null ? null : this.getJCOInstance());
            return new ObjectContext(objGetObjectContext);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static DbContext GetDbContext(ObjectContext this) throws Throwable, system.ArgumentNullException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objGetDbContext = (JCObject)classType.Invoke("GetDbContext", this == null ? null : this.getJCOInstance());
            return new DbContext(objGetDbContext);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static DbContext GetOrCreateDbContext(ObjectContext this) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.threading.ThreadAbortException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.configuration.ConfigurationErrorsException, system.ArgumentOutOfRangeException, system.configuration.ConfigurationException, system.TypeLoadException, system.resources.MissingManifestResourceException, system.ObjectDisposedException, system.IndexOutOfRangeException, system.NotImplementedException, system.NotSupportedException, system.collections.generic.KeyNotFoundException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objGetOrCreateDbContext = (JCObject)classType.Invoke("GetOrCreateDbContext", this == null ? null : this.getJCOInstance());
            return new DbContext(objGetOrCreateDbContext);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Task BulkSaveChangesAsync(ObjectContext this) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.threading.ThreadAbortException, system.InvalidOperationException, system.configuration.ConfigurationException, system.TypeLoadException, system.resources.MissingManifestResourceException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.NotImplementedException, system.ObjectDisposedException, system.NotSupportedException, system.collections.generic.KeyNotFoundException, system.security.SecurityException, system.NullReferenceException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objBulkSaveChangesAsync = (JCObject)classType.Invoke("BulkSaveChangesAsync", this == null ? null : this.getJCOInstance());
            return new Task(objBulkSaveChangesAsync);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Task BulkSaveChangesAsync(ObjectContext this, boolean useEntityFrameworkPropagation) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.threading.ThreadAbortException, system.InvalidOperationException, system.configuration.ConfigurationException, system.TypeLoadException, system.resources.MissingManifestResourceException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.NotImplementedException, system.ObjectDisposedException, system.NotSupportedException, system.collections.generic.KeyNotFoundException, system.security.SecurityException, system.NullReferenceException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objBulkSaveChangesAsync = (JCObject)classType.Invoke("BulkSaveChangesAsync", this == null ? null : this.getJCOInstance(), useEntityFrameworkPropagation);
            return new Task(objBulkSaveChangesAsync);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Task BulkSaveChangesAsync(ObjectContext this, boolean useEntityFrameworkPropagation, CancellationToken cancellationToken) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.threading.ThreadAbortException, system.InvalidOperationException, system.configuration.ConfigurationException, system.TypeLoadException, system.resources.MissingManifestResourceException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.NotImplementedException, system.ObjectDisposedException, system.NotSupportedException, system.collections.generic.KeyNotFoundException, system.security.SecurityException, system.NullReferenceException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objBulkSaveChangesAsync = (JCObject)classType.Invoke("BulkSaveChangesAsync", this == null ? null : this.getJCOInstance(), useEntityFrameworkPropagation, cancellationToken == null ? null : cancellationToken.getJCOInstance());
            return new Task(objBulkSaveChangesAsync);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Task BulkSaveChangesAsync(ObjectContext this, CancellationToken cancellationToken) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.threading.ThreadAbortException, system.InvalidOperationException, system.configuration.ConfigurationException, system.TypeLoadException, system.resources.MissingManifestResourceException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.NotImplementedException, system.ObjectDisposedException, system.NotSupportedException, system.collections.generic.KeyNotFoundException, system.security.SecurityException, system.NullReferenceException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objBulkSaveChangesAsync = (JCObject)classType.Invoke("BulkSaveChangesAsync", this == null ? null : this.getJCOInstance(), cancellationToken == null ? null : cancellationToken.getJCOInstance());
            return new Task(objBulkSaveChangesAsync);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Task BulkSaveChangesAsync(DbContext this) throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.security.SecurityException, system.InvalidOperationException, system.ArgumentException, system.NullReferenceException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objBulkSaveChangesAsync = (JCObject)classType.Invoke("BulkSaveChangesAsync", this == null ? null : this.getJCOInstance());
            return new Task(objBulkSaveChangesAsync);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Task BulkSaveChangesAsync(DbContext this, boolean useEntityFrameworkPropagation) throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.security.SecurityException, system.InvalidOperationException, system.ArgumentException, system.NullReferenceException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objBulkSaveChangesAsync = (JCObject)classType.Invoke("BulkSaveChangesAsync", this == null ? null : this.getJCOInstance(), useEntityFrameworkPropagation);
            return new Task(objBulkSaveChangesAsync);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Task BulkSaveChangesAsync(DbContext this, boolean useEntityFrameworkPropagation, CancellationToken cancellationToken) throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.security.SecurityException, system.InvalidOperationException, system.ArgumentException, system.NullReferenceException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objBulkSaveChangesAsync = (JCObject)classType.Invoke("BulkSaveChangesAsync", this == null ? null : this.getJCOInstance(), useEntityFrameworkPropagation, cancellationToken == null ? null : cancellationToken.getJCOInstance());
            return new Task(objBulkSaveChangesAsync);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Task BulkSaveChangesAsync(DbContext this, CancellationToken cancellationToken) throws Throwable, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.security.SecurityException, system.InvalidOperationException, system.ArgumentException, system.NullReferenceException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objBulkSaveChangesAsync = (JCObject)classType.Invoke("BulkSaveChangesAsync", this == null ? null : this.getJCOInstance(), cancellationToken == null ? null : cancellationToken.getJCOInstance());
            return new Task(objBulkSaveChangesAsync);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Task SingleDeleteAsync(DbContext this, NetType type, NetObject entity) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.NotSupportedException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objSingleDeleteAsync = (JCObject)classType.Invoke("SingleDeleteAsync", this == null ? null : this.getJCOInstance(), type == null ? null : type.getJCOInstance(), entity == null ? null : entity.getJCOInstance());
            return new Task(objSingleDeleteAsync);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Task SingleDeleteAsync(DbContext this, NetType type, NetObject entity, CancellationToken cancellationToken) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.NotSupportedException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objSingleDeleteAsync = (JCObject)classType.Invoke("SingleDeleteAsync", this == null ? null : this.getJCOInstance(), type == null ? null : type.getJCOInstance(), entity == null ? null : entity.getJCOInstance(), cancellationToken == null ? null : cancellationToken.getJCOInstance());
            return new Task(objSingleDeleteAsync);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Task SingleInsertAsync(DbContext this, NetType type, NetObject entity) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.NotSupportedException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objSingleInsertAsync = (JCObject)classType.Invoke("SingleInsertAsync", this == null ? null : this.getJCOInstance(), type == null ? null : type.getJCOInstance(), entity == null ? null : entity.getJCOInstance());
            return new Task(objSingleInsertAsync);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Task SingleInsertAsync(DbContext this, NetType type, NetObject entity, CancellationToken cancellationToken) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.NotSupportedException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objSingleInsertAsync = (JCObject)classType.Invoke("SingleInsertAsync", this == null ? null : this.getJCOInstance(), type == null ? null : type.getJCOInstance(), entity == null ? null : entity.getJCOInstance(), cancellationToken == null ? null : cancellationToken.getJCOInstance());
            return new Task(objSingleInsertAsync);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Task SingleMergeAsync(DbContext this, NetType type, NetObject entity) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.NotSupportedException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objSingleMergeAsync = (JCObject)classType.Invoke("SingleMergeAsync", this == null ? null : this.getJCOInstance(), type == null ? null : type.getJCOInstance(), entity == null ? null : entity.getJCOInstance());
            return new Task(objSingleMergeAsync);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Task SingleMergeAsync(DbContext this, NetType type, NetObject entity, CancellationToken cancellationToken) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.NotSupportedException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objSingleMergeAsync = (JCObject)classType.Invoke("SingleMergeAsync", this == null ? null : this.getJCOInstance(), type == null ? null : type.getJCOInstance(), entity == null ? null : entity.getJCOInstance(), cancellationToken == null ? null : cancellationToken.getJCOInstance());
            return new Task(objSingleMergeAsync);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Task SingleSynchronizeAsync(DbContext this, NetType type, NetObject entity) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.NotSupportedException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objSingleSynchronizeAsync = (JCObject)classType.Invoke("SingleSynchronizeAsync", this == null ? null : this.getJCOInstance(), type == null ? null : type.getJCOInstance(), entity == null ? null : entity.getJCOInstance());
            return new Task(objSingleSynchronizeAsync);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Task SingleSynchronizeAsync(DbContext this, NetType type, NetObject entity, CancellationToken cancellationToken) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.NotSupportedException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objSingleSynchronizeAsync = (JCObject)classType.Invoke("SingleSynchronizeAsync", this == null ? null : this.getJCOInstance(), type == null ? null : type.getJCOInstance(), entity == null ? null : entity.getJCOInstance(), cancellationToken == null ? null : cancellationToken.getJCOInstance());
            return new Task(objSingleSynchronizeAsync);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Task SingleUpdateAsync(DbContext this, NetType type, NetObject entity) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.NotSupportedException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objSingleUpdateAsync = (JCObject)classType.Invoke("SingleUpdateAsync", this == null ? null : this.getJCOInstance(), type == null ? null : type.getJCOInstance(), entity == null ? null : entity.getJCOInstance());
            return new Task(objSingleUpdateAsync);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Task SingleUpdateAsync(DbContext this, NetType type, NetObject entity, CancellationToken cancellationToken) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.NotSupportedException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objSingleUpdateAsync = (JCObject)classType.Invoke("SingleUpdateAsync", this == null ? null : this.getJCOInstance(), type == null ? null : type.getJCOInstance(), entity == null ? null : entity.getJCOInstance(), cancellationToken == null ? null : cancellationToken.getJCOInstance());
            return new Task(objSingleUpdateAsync);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static NetType GetRealType(ObjectContext this) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objGetRealType = (JCObject)classType.Invoke("GetRealType", this == null ? null : this.getJCOInstance());
            return new NetType(objGetRealType);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void BulkSaveChanges(ObjectContext this) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.threading.ThreadAbortException, system.InvalidOperationException, system.configuration.ConfigurationException, system.TypeLoadException, system.resources.MissingManifestResourceException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.NotImplementedException, system.ObjectDisposedException, system.NotSupportedException, system.collections.generic.KeyNotFoundException, system.MulticastNotSupportedException, system.data.entity.validation.DbEntityValidationException, system.OutOfMemoryException, system.FormatException, system.configuration.ConfigurationErrorsException, system.OperationCanceledException, z.bulkoperations.DbBulkOperationConcurrencyException, system.MissingMethodException, system.data.entity.core.MetadataException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("BulkSaveChanges", this == null ? null : this.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void BulkSaveChanges(ObjectContext this, boolean useEntityFrameworkPropagation) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.threading.ThreadAbortException, system.InvalidOperationException, system.configuration.ConfigurationException, system.TypeLoadException, system.resources.MissingManifestResourceException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.NotImplementedException, system.ObjectDisposedException, system.NotSupportedException, system.collections.generic.KeyNotFoundException, system.MulticastNotSupportedException, system.data.entity.validation.DbEntityValidationException, system.OutOfMemoryException, system.FormatException, system.configuration.ConfigurationErrorsException, system.OperationCanceledException, z.bulkoperations.DbBulkOperationConcurrencyException, system.MissingMethodException, system.data.entity.core.MetadataException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("BulkSaveChanges", this == null ? null : this.getJCOInstance(), useEntityFrameworkPropagation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void BulkSaveChanges(DbContext this) throws Throwable, system.ArgumentException, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.NotImplementedException, system.MulticastNotSupportedException, system.data.entity.validation.DbEntityValidationException, system.IndexOutOfRangeException, system.NotSupportedException, system.collections.generic.KeyNotFoundException, system.ObjectDisposedException, system.InvalidOperationException, system.OutOfMemoryException, system.configuration.ConfigurationErrorsException, system.FormatException, system.OperationCanceledException, system.data.DataException, z.bulkoperations.DbBulkOperationConcurrencyException, system.MissingMethodException, system.reflection.TargetInvocationException, system.xml.XmlException, system.RankException, system.threading.SynchronizationLockException, system.data.entity.core.MetadataException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("BulkSaveChanges", this == null ? null : this.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void BulkSaveChanges(DbContext this, boolean useEntityFrameworkPropagation) throws Throwable, system.ArgumentException, system.ArgumentNullException, system.ArgumentOutOfRangeException, system.NotImplementedException, system.MulticastNotSupportedException, system.data.entity.validation.DbEntityValidationException, system.IndexOutOfRangeException, system.NotSupportedException, system.collections.generic.KeyNotFoundException, system.ObjectDisposedException, system.InvalidOperationException, system.OutOfMemoryException, system.configuration.ConfigurationErrorsException, system.FormatException, system.OperationCanceledException, system.data.DataException, z.bulkoperations.DbBulkOperationConcurrencyException, system.MissingMethodException, system.reflection.TargetInvocationException, system.xml.XmlException, system.RankException, system.threading.SynchronizationLockException, system.data.entity.core.MetadataException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("BulkSaveChanges", this == null ? null : this.getJCOInstance(), useEntityFrameworkPropagation);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void RefreshModel(DbContext this) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.globalization.CultureNotFoundException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.diagnostics.tracing.EventSourceException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("RefreshModel", this == null ? null : this.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void SingleDelete(DbContext this, NetType type, NetObject entity) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.NotSupportedException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("SingleDelete", this == null ? null : this.getJCOInstance(), type == null ? null : type.getJCOInstance(), entity == null ? null : entity.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void SingleInsert(DbContext this, NetType type, NetObject entity) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.NotSupportedException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("SingleInsert", this == null ? null : this.getJCOInstance(), type == null ? null : type.getJCOInstance(), entity == null ? null : entity.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void SingleMerge(DbContext this, NetType type, NetObject entity) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.NotSupportedException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("SingleMerge", this == null ? null : this.getJCOInstance(), type == null ? null : type.getJCOInstance(), entity == null ? null : entity.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void SingleSynchronize(DbContext this, NetType type, NetObject entity) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.NotSupportedException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("SingleSynchronize", this == null ? null : this.getJCOInstance(), type == null ? null : type.getJCOInstance(), entity == null ? null : entity.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void SingleUpdate(DbContext this, NetType type, NetObject entity) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.NotSupportedException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("SingleUpdate", this == null ? null : this.getJCOInstance(), type == null ? null : type.getJCOInstance(), entity == null ? null : entity.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static DbModel GetModel(DbContext this) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.InvalidOperationException, system.MissingMethodException, system.reflection.TargetInvocationException, system.globalization.CultureNotFoundException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.threading.ThreadAbortException, system.resources.MissingManifestResourceException, system.NotImplementedException, system.ObjectDisposedException, system.NotSupportedException, system.threading.SynchronizationLockException, system.io.IOException, system.xml.XmlException, system.OverflowException, system.io.FileNotFoundException, system.collections.generic.KeyNotFoundException, system.data.entity.core.ProviderIncompatibleException, system.data.entity.modelconfiguration.ModelValidationException, system.data.entity.core.MappingException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objGetModel = (JCObject)classType.Invoke("GetModel", this == null ? null : this.getJCOInstance());
            return new DbModel(objGetModel);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static MySqlDatabase MySqlDatabase(DbContext this) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objMySqlDatabase = (JCObject)classType.Invoke("MySqlDatabase", this == null ? null : this.getJCOInstance());
            return new MySqlDatabase(objMySqlDatabase);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static OracleDevArtDatabase OracleDevArtDatabase(DbContext this) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objOracleDevArtDatabase = (JCObject)classType.Invoke("OracleDevArtDatabase", this == null ? null : this.getJCOInstance());
            return new OracleDevArtDatabase(objOracleDevArtDatabase);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static SqlCeDatabase SqlCeDatabase(DbContext this) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objSqlCeDatabase = (JCObject)classType.Invoke("SqlCeDatabase", this == null ? null : this.getJCOInstance());
            return new SqlCeDatabase(objSqlCeDatabase);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static SqlDatabase SqlDatabase(DbContext this) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objSqlDatabase = (JCObject)classType.Invoke("SqlDatabase", this == null ? null : this.getJCOInstance());
            return new SqlDatabase(objSqlDatabase);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static SQLiteDatabase SQLiteDatabase(DbContext this) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objSQLiteDatabase = (JCObject)classType.Invoke("SQLiteDatabase", this == null ? null : this.getJCOInstance());
            return new SQLiteDatabase(objSQLiteDatabase);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    


    // Instance Events section
    

}