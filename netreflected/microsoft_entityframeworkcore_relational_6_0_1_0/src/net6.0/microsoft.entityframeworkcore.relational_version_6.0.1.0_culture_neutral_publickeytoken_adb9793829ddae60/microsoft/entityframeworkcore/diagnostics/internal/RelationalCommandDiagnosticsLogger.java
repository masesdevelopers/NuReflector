/*
 *  MIT License
 *
 *  Copyright (c) 2022 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package microsoft.entityframeworkcore.diagnostics.internal;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import microsoft.extensions.logging.ILoggerFactory;
import microsoft.extensions.logging.ILoggerFactoryImplementation;
import microsoft.entityframeworkcore.diagnostics.ILoggingOptions;
import microsoft.entityframeworkcore.diagnostics.ILoggingOptionsImplementation;
import system.diagnostics.DiagnosticSource;
import microsoft.entityframeworkcore.diagnostics.LoggingDefinitions;
import microsoft.entityframeworkcore.diagnostics.IDbContextLogger;
import microsoft.entityframeworkcore.diagnostics.IDbContextLoggerImplementation;
import microsoft.entityframeworkcore.infrastructure.IDbContextOptions;
import microsoft.entityframeworkcore.infrastructure.IDbContextOptionsImplementation;
import microsoft.entityframeworkcore.diagnostics.IInterceptors;
import microsoft.entityframeworkcore.diagnostics.IInterceptorsImplementation;
import system.DateTimeOffset;
import microsoft.entityframeworkcore.storage.IRelationalConnection;
import microsoft.entityframeworkcore.storage.IRelationalConnectionImplementation;
import system.data.common.DbCommand;
import microsoft.entityframeworkcore.DbContext;
import system.Guid;
import system.TimeSpan;
import microsoft.entityframeworkcore.diagnostics.CommandSource;
import microsoft.entityframeworkcore.diagnostics.InterceptionResult;
import system.data.common.DbDataReader;
import microsoft.entityframeworkcore.diagnostics.DbCommandMethod;
import system.threading.tasks.Task;
import system.threading.CancellationToken;


/**
 * The base .NET class managing Microsoft.EntityFrameworkCore.Diagnostics.Internal.RelationalCommandDiagnosticsLogger, Microsoft.EntityFrameworkCore.Relational, Version=6.0.1.0, Culture=neutral, PublicKeyToken=adb9793829ddae60.
 * <p>
 * 
 * See: <a href="https://docs.microsoft.com/en-us/dotnet/api/Microsoft.EntityFrameworkCore.Diagnostics.Internal.RelationalCommandDiagnosticsLogger" target="_top">https://docs.microsoft.com/en-us/dotnet/api/Microsoft.EntityFrameworkCore.Diagnostics.Internal.RelationalCommandDiagnosticsLogger</a>
 */
public class RelationalCommandDiagnosticsLogger extends NetObject  {
    /**
     * Fully assembly qualified name: Microsoft.EntityFrameworkCore.Relational, Version=6.0.1.0, Culture=neutral, PublicKeyToken=adb9793829ddae60
     */
    public static final String assemblyFullName = "Microsoft.EntityFrameworkCore.Relational, Version=6.0.1.0, Culture=neutral, PublicKeyToken=adb9793829ddae60";
    /**
     * Assembly name: Microsoft.EntityFrameworkCore.Relational
     */
    public static final String assemblyShortName = "Microsoft.EntityFrameworkCore.Relational";
    /**
     * Qualified class name: Microsoft.EntityFrameworkCore.Diagnostics.Internal.RelationalCommandDiagnosticsLogger
     */
    public static final String className = "Microsoft.EntityFrameworkCore.Diagnostics.Internal.RelationalCommandDiagnosticsLogger";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    /**
     * The type managed from JCOBridge. See {@link JCType}
     */
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            String classToCreate = className + ", "
                    + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Creating %s", classToCreate);
            JCType typeCreated = bridge.GetType(classToCreate);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Created: %s",
                        (typeCreated != null) ? typeCreated.toString() : "Returned null value");
            return typeCreated;
        } catch (JCException e) {
            JCOReflector.writeLog(e);
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }
    /**
     * Internal constructor. Use with caution 
     */
    public RelationalCommandDiagnosticsLogger(java.lang.Object instance) throws Throwable {
        super(instance);
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public java.lang.Object getJCOInstance() {
        return classInstance;
    }

    public void setJCOInstance(JCObject instance) {
        classInstance = instance;
        super.setJCOInstance(classInstance);
    }

    public JCType getJCOType() {
        return classType;
    }
    /**
     * Try to cast the {@link IJCOBridgeReflected} instance into {@link RelationalCommandDiagnosticsLogger}, a cast assert is made to check if types are compatible.
     * @param from {@link IJCOBridgeReflected} instance to be casted
     * @return {@link RelationalCommandDiagnosticsLogger} instance
     * @throws java.lang.Throwable in case of error during cast operation
     */
    public static RelationalCommandDiagnosticsLogger cast(IJCOBridgeReflected from) throws Throwable {
        NetType.AssertCast(classType, from);
        return new RelationalCommandDiagnosticsLogger(from.getJCOInstance());
    }

    // Constructors section
    
    public RelationalCommandDiagnosticsLogger() throws Throwable {
    }

    public RelationalCommandDiagnosticsLogger(ILoggerFactory loggerFactory, ILoggingOptions loggingOptions, DiagnosticSource diagnosticSource, LoggingDefinitions loggingDefinitions, IDbContextLogger contextLogger, IDbContextOptions contextOptions, IInterceptors interceptors) throws Throwable, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.FormatException, system.ArgumentException, system.MethodAccessException, system.MissingMethodException, system.MemberAccessException, system.reflection.TargetInvocationException, system.ArgumentOutOfRangeException {
        try {
            // add reference to assemblyName.dll file
            addReference(JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            setJCOInstance((JCObject)classType.NewObject(loggerFactory == null ? null : loggerFactory.getJCOInstance(), loggingOptions == null ? null : loggingOptions.getJCOInstance(), diagnosticSource == null ? null : diagnosticSource.getJCOInstance(), loggingDefinitions == null ? null : loggingDefinitions.getJCOInstance(), contextLogger == null ? null : contextLogger.getJCOInstance(), contextOptions == null ? null : contextOptions.getJCOInstance(), interceptors == null ? null : interceptors.getJCOInstance()));
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



    
    // Methods section
    
    public boolean ShouldLogCommandCreate(DateTimeOffset now) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("ShouldLogCommandCreate", now == null ? null : now.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean ShouldLogCommandExecute(DateTimeOffset now) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("ShouldLogCommandExecute", now == null ? null : now.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean ShouldLogDataReaderDispose(DateTimeOffset now) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("ShouldLogDataReaderDispose", now == null ? null : now.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public int CommandNonQueryExecuted(IRelationalConnection connection, DbCommand command, DbContext context, Guid commandId, Guid connectionId, int methodResult, DateTimeOffset startTime, TimeSpan duration, CommandSource commandSource) throws Throwable, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ObjectDisposedException, system.ArgumentOutOfRangeException, system.ArgumentException, system.ArrayTypeMismatchException, system.OutOfMemoryException, system.NotSupportedException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (int)classInstance.Invoke("CommandNonQueryExecuted", connection == null ? null : connection.getJCOInstance(), command == null ? null : command.getJCOInstance(), context == null ? null : context.getJCOInstance(), commandId == null ? null : commandId.getJCOInstance(), connectionId == null ? null : connectionId.getJCOInstance(), methodResult, startTime == null ? null : startTime.getJCOInstance(), duration == null ? null : duration.getJCOInstance(), commandSource == null ? null : commandSource.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public InterceptionResult DataReaderDisposing(IRelationalConnection connection, DbCommand command, DbDataReader dataReader, Guid commandId, int recordsAffected, int readCount, DateTimeOffset startTime, TimeSpan duration) throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentException, system.ArgumentNullException, system.InvalidTimeZoneException, system.security.SecurityException, system.UnauthorizedAccessException, system.io.IOException, system.OverflowException, system.InvalidOperationException, system.PlatformNotSupportedException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objDataReaderDisposing = (JCObject)classInstance.Invoke("DataReaderDisposing", connection == null ? null : connection.getJCOInstance(), command == null ? null : command.getJCOInstance(), dataReader == null ? null : dataReader.getJCOInstance(), commandId == null ? null : commandId.getJCOInstance(), recordsAffected, readCount, startTime == null ? null : startTime.getJCOInstance(), duration == null ? null : duration.getJCOInstance());
            return new InterceptionResult(objDataReaderDisposing);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbCommand CommandCreated(IRelationalConnection connection, DbCommand command, DbCommandMethod commandMethod, DbContext context, Guid commandId, Guid connectionId, DateTimeOffset startTime, TimeSpan duration, CommandSource commandSource) throws Throwable, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ObjectDisposedException, system.ArgumentOutOfRangeException, system.ArgumentException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objCommandCreated = (JCObject)classInstance.Invoke("CommandCreated", connection == null ? null : connection.getJCOInstance(), command == null ? null : command.getJCOInstance(), commandMethod == null ? null : commandMethod.getJCOInstance(), context == null ? null : context.getJCOInstance(), commandId == null ? null : commandId.getJCOInstance(), connectionId == null ? null : connectionId.getJCOInstance(), startTime == null ? null : startTime.getJCOInstance(), duration == null ? null : duration.getJCOInstance(), commandSource == null ? null : commandSource.getJCOInstance());
            return new DbCommand(objCommandCreated);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public DbDataReader CommandReaderExecuted(IRelationalConnection connection, DbCommand command, DbContext context, Guid commandId, Guid connectionId, DbDataReader methodResult, DateTimeOffset startTime, TimeSpan duration, CommandSource commandSource) throws Throwable, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ObjectDisposedException, system.ArgumentOutOfRangeException, system.ArgumentException, system.ArrayTypeMismatchException, system.OutOfMemoryException, system.NotSupportedException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objCommandReaderExecuted = (JCObject)classInstance.Invoke("CommandReaderExecuted", connection == null ? null : connection.getJCOInstance(), command == null ? null : command.getJCOInstance(), context == null ? null : context.getJCOInstance(), commandId == null ? null : commandId.getJCOInstance(), connectionId == null ? null : connectionId.getJCOInstance(), methodResult == null ? null : methodResult.getJCOInstance(), startTime == null ? null : startTime.getJCOInstance(), duration == null ? null : duration.getJCOInstance(), commandSource == null ? null : commandSource.getJCOInstance());
            return new DbDataReader(objCommandReaderExecuted);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public NetObject CommandScalarExecuted(IRelationalConnection connection, DbCommand command, DbContext context, Guid commandId, Guid connectionId, NetObject methodResult, DateTimeOffset startTime, TimeSpan duration, CommandSource commandSource) throws Throwable, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ObjectDisposedException, system.ArgumentOutOfRangeException, system.ArgumentException, system.ArrayTypeMismatchException, system.OutOfMemoryException, system.NotSupportedException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objCommandScalarExecuted = (JCObject)classInstance.Invoke("CommandScalarExecuted", connection == null ? null : connection.getJCOInstance(), command == null ? null : command.getJCOInstance(), context == null ? null : context.getJCOInstance(), commandId == null ? null : commandId.getJCOInstance(), connectionId == null ? null : connectionId.getJCOInstance(), methodResult == null ? null : methodResult.getJCOInstance(), startTime == null ? null : startTime.getJCOInstance(), duration == null ? null : duration.getJCOInstance(), commandSource == null ? null : commandSource.getJCOInstance());
            return new NetObject(objCommandScalarExecuted);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public Task CommandErrorAsync(IRelationalConnection connection, DbCommand command, DbContext context, DbCommandMethod executeMethod, Guid commandId, Guid connectionId, NetException exception, DateTimeOffset startTime, TimeSpan duration, CommandSource commandSource, CancellationToken cancellationToken) throws Throwable, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ObjectDisposedException, system.ArgumentOutOfRangeException, system.ArgumentException, system.OutOfMemoryException, system.NotSupportedException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objCommandErrorAsync = (JCObject)classInstance.Invoke("CommandErrorAsync", connection == null ? null : connection.getJCOInstance(), command == null ? null : command.getJCOInstance(), context == null ? null : context.getJCOInstance(), executeMethod == null ? null : executeMethod.getJCOInstance(), commandId == null ? null : commandId.getJCOInstance(), connectionId == null ? null : connectionId.getJCOInstance(), exception == null ? null : exception.getJCOInstance(), startTime == null ? null : startTime.getJCOInstance(), duration == null ? null : duration.getJCOInstance(), commandSource == null ? null : commandSource.getJCOInstance(), cancellationToken == null ? null : cancellationToken.getJCOInstance());
            return new Task(objCommandErrorAsync);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public void CommandError(IRelationalConnection connection, DbCommand command, DbContext context, DbCommandMethod executeMethod, Guid commandId, Guid connectionId, NetException exception, DateTimeOffset startTime, TimeSpan duration, CommandSource commandSource) throws Throwable, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ObjectDisposedException, system.ArgumentOutOfRangeException, system.ArgumentException, system.OutOfMemoryException, system.NotSupportedException, system.FormatException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            classInstance.Invoke("CommandError", connection == null ? null : connection.getJCOInstance(), command == null ? null : command.getJCOInstance(), context == null ? null : context.getJCOInstance(), executeMethod == null ? null : executeMethod.getJCOInstance(), commandId == null ? null : commandId.getJCOInstance(), connectionId == null ? null : connectionId.getJCOInstance(), exception == null ? null : exception.getJCOInstance(), startTime == null ? null : startTime.getJCOInstance(), duration == null ? null : duration.getJCOInstance(), commandSource == null ? null : commandSource.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    


    // Instance Events section
    

}