/*
 *  MIT License
 *
 *  Copyright (c) 2022 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package org.bouncycastle.math.ec.rfc8032;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import org.bouncycastle.crypto.IXof;
import org.bouncycastle.crypto.IXofImplementation;
import org.bouncycastle.security.SecureRandom;


/**
 * The base .NET class managing Org.BouncyCastle.Math.EC.Rfc8032.Ed448, BouncyCastle.Crypto, Version=1.9.0.0, Culture=neutral, PublicKeyToken=0e99375e54769942.
 * <p>
 * 
 * See: <a href="https://docs.microsoft.com/en-us/dotnet/api/Org.BouncyCastle.Math.EC.Rfc8032.Ed448" target="_top">https://docs.microsoft.com/en-us/dotnet/api/Org.BouncyCastle.Math.EC.Rfc8032.Ed448</a>
 */
public class Ed448 extends NetObject  {
    /**
     * Fully assembly qualified name: BouncyCastle.Crypto, Version=1.9.0.0, Culture=neutral, PublicKeyToken=0e99375e54769942
     */
    public static final String assemblyFullName = "BouncyCastle.Crypto, Version=1.9.0.0, Culture=neutral, PublicKeyToken=0e99375e54769942";
    /**
     * Assembly name: BouncyCastle.Crypto
     */
    public static final String assemblyShortName = "BouncyCastle.Crypto";
    /**
     * Qualified class name: Org.BouncyCastle.Math.EC.Rfc8032.Ed448
     */
    public static final String className = "Org.BouncyCastle.Math.EC.Rfc8032.Ed448";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    /**
     * The type managed from JCOBridge. See {@link JCType}
     */
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            String classToCreate = className + ", "
                    + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Creating %s", classToCreate);
            JCType typeCreated = bridge.GetType(classToCreate);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Created: %s",
                        (typeCreated != null) ? typeCreated.toString() : "Returned null value");
            return typeCreated;
        } catch (JCException e) {
            JCOReflector.writeLog(e);
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }
    /**
     * Internal constructor. Use with caution 
     */
    public Ed448(java.lang.Object instance) throws Throwable {
        super(instance);
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public java.lang.Object getJCOInstance() {
        return classInstance;
    }

    public void setJCOInstance(JCObject instance) {
        classInstance = instance;
        super.setJCOInstance(classInstance);
    }

    public JCType getJCOType() {
        return classType;
    }
    /**
     * Try to cast the {@link IJCOBridgeReflected} instance into {@link Ed448}, a cast assert is made to check if types are compatible.
     * @param from {@link IJCOBridgeReflected} instance to be casted
     * @return {@link Ed448} instance
     * @throws java.lang.Throwable in case of error during cast operation
     */
    public static Ed448 cast(IJCOBridgeReflected from) throws Throwable {
        NetType.AssertCast(classType, from);
        return new Ed448(from.getJCOInstance());
    }

    // Constructors section
    
    public Ed448() throws Throwable {
    }

    
    // Methods section
    
    public static boolean ValidatePublicKeyFull(byte[] pk, int pkOff) throws Throwable, system.PlatformNotSupportedException, system.ArgumentNullException, system.RankException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.ArgumentException, system.ArrayTypeMismatchException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("ValidatePublicKeyFull", pk, pkOff);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean ValidatePublicKeyFull(JCORefOut dupParam0, int dupParam1) throws Throwable, system.PlatformNotSupportedException, system.ArgumentNullException, system.RankException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.ArgumentException, system.ArrayTypeMismatchException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("ValidatePublicKeyFull", dupParam0.getJCRefOut(), dupParam1);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean ValidatePublicKeyPartial(byte[] pk, int pkOff) throws Throwable, system.PlatformNotSupportedException, system.ArgumentNullException, system.RankException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.ArgumentException, system.ArrayTypeMismatchException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("ValidatePublicKeyPartial", pk, pkOff);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean ValidatePublicKeyPartial(JCORefOut dupParam0, int dupParam1) throws Throwable, system.PlatformNotSupportedException, system.ArgumentNullException, system.RankException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.ArgumentException, system.ArrayTypeMismatchException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("ValidatePublicKeyPartial", dupParam0.getJCRefOut(), dupParam1);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean Verify(byte[] sig, int sigOff, byte[] pk, int pkOff, byte[] ctx, byte[] m, int mOff, int mLen) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.ArgumentNullException, system.RankException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.ArrayTypeMismatchException, system.InvalidOperationException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("Verify", sig, sigOff, pk, pkOff, ctx, m, mOff, mLen);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean Verify(JCORefOut dupParam0, int dupParam1, JCORefOut dupParam2, int dupParam3, JCORefOut dupParam4, JCORefOut dupParam5, int dupParam6, int dupParam7) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.ArgumentNullException, system.RankException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.ArrayTypeMismatchException, system.InvalidOperationException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("Verify", dupParam0.getJCRefOut(), dupParam1, dupParam2.getJCRefOut(), dupParam3, dupParam4.getJCRefOut(), dupParam5.getJCRefOut(), dupParam6, dupParam7);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean VerifyPrehash(byte[] sig, int sigOff, byte[] pk, int pkOff, byte[] ctx, byte[] ph, int phOff) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.ArgumentNullException, system.RankException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.ArrayTypeMismatchException, system.InvalidOperationException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("VerifyPrehash", sig, sigOff, pk, pkOff, ctx, ph, phOff);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean VerifyPrehash(JCORefOut dupParam0, int dupParam1, JCORefOut dupParam2, int dupParam3, JCORefOut dupParam4, JCORefOut dupParam5, int dupParam6) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.ArgumentNullException, system.RankException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.ArrayTypeMismatchException, system.InvalidOperationException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("VerifyPrehash", dupParam0.getJCRefOut(), dupParam1, dupParam2.getJCRefOut(), dupParam3, dupParam4.getJCRefOut(), dupParam5.getJCRefOut(), dupParam6);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean VerifyPrehash(byte[] sig, int sigOff, byte[] pk, int pkOff, byte[] ctx, IXof ph) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.ArgumentNullException, system.RankException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.ArrayTypeMismatchException, system.InvalidOperationException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("VerifyPrehash", sig, sigOff, pk, pkOff, ctx, ph == null ? null : ph.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean VerifyPrehash(JCORefOut dupParam0, int dupParam1, JCORefOut dupParam2, int dupParam3, JCORefOut dupParam4, IXof dupParam5) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.ArgumentNullException, system.RankException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.ArrayTypeMismatchException, system.InvalidOperationException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("VerifyPrehash", dupParam0.getJCRefOut(), dupParam1, dupParam2.getJCRefOut(), dupParam3, dupParam4.getJCRefOut(), dupParam5 == null ? null : dupParam5.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static IXof CreatePrehash() throws Throwable, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.InvalidOperationException, system.ArgumentException, system.ArgumentNullException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objCreatePrehash = (JCObject)classType.Invoke("CreatePrehash");
            return new IXofImplementation(objCreatePrehash);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void GeneratePrivateKey(SecureRandom random, byte[] k) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("GeneratePrivateKey", random == null ? null : random.getJCOInstance(), k);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void GeneratePrivateKey(SecureRandom dupParam0, JCORefOut dupParam1) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("GeneratePrivateKey", dupParam0 == null ? null : dupParam0.getJCOInstance(), dupParam1.getJCRefOut());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void GeneratePublicKey(byte[] sk, int skOff, byte[] pk, int pkOff) throws Throwable, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.InvalidOperationException, system.ArgumentException, system.ArgumentNullException, system.RankException, system.ArgumentOutOfRangeException, system.ArrayTypeMismatchException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("GeneratePublicKey", sk, skOff, pk, pkOff);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void GeneratePublicKey(JCORefOut dupParam0, int dupParam1, JCORefOut dupParam2, int dupParam3) throws Throwable, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.InvalidOperationException, system.ArgumentException, system.ArgumentNullException, system.RankException, system.ArgumentOutOfRangeException, system.ArrayTypeMismatchException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("GeneratePublicKey", dupParam0.getJCRefOut(), dupParam1, dupParam2.getJCRefOut(), dupParam3);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void Precompute() throws Throwable, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.ArgumentException, system.NotSupportedException, system.ObjectDisposedException, system.RankException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("Precompute");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void Sign(byte[] sk, int skOff, byte[] ctx, byte[] m, int mOff, int mLen, byte[] sig, int sigOff) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.InvalidOperationException, system.ArgumentNullException, system.NotSupportedException, system.ArgumentOutOfRangeException, system.RankException, system.ArrayTypeMismatchException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("Sign", sk, skOff, ctx, m, mOff, mLen, sig, sigOff);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void Sign(JCORefOut dupParam0, int dupParam1, JCORefOut dupParam2, JCORefOut dupParam3, int dupParam4, int dupParam5, JCORefOut dupParam6, int dupParam7) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.InvalidOperationException, system.ArgumentNullException, system.NotSupportedException, system.ArgumentOutOfRangeException, system.RankException, system.ArrayTypeMismatchException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("Sign", dupParam0.getJCRefOut(), dupParam1, dupParam2.getJCRefOut(), dupParam3.getJCRefOut(), dupParam4, dupParam5, dupParam6.getJCRefOut(), dupParam7);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void Sign(byte[] sk, int skOff, byte[] pk, int pkOff, byte[] ctx, byte[] m, int mOff, int mLen, byte[] sig, int sigOff) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.InvalidOperationException, system.ArgumentNullException, system.NotSupportedException, system.ArgumentOutOfRangeException, system.RankException, system.ArrayTypeMismatchException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("Sign", sk, skOff, pk, pkOff, ctx, m, mOff, mLen, sig, sigOff);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void Sign(JCORefOut dupParam0, int dupParam1, JCORefOut dupParam2, int dupParam3, JCORefOut dupParam4, JCORefOut dupParam5, int dupParam6, int dupParam7, JCORefOut dupParam8, int dupParam9) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.InvalidOperationException, system.ArgumentNullException, system.NotSupportedException, system.ArgumentOutOfRangeException, system.RankException, system.ArrayTypeMismatchException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("Sign", dupParam0.getJCRefOut(), dupParam1, dupParam2.getJCRefOut(), dupParam3, dupParam4.getJCRefOut(), dupParam5.getJCRefOut(), dupParam6, dupParam7, dupParam8.getJCRefOut(), dupParam9);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void SignPrehash(byte[] sk, int skOff, byte[] ctx, byte[] ph, int phOff, byte[] sig, int sigOff) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.InvalidOperationException, system.ArgumentNullException, system.NotSupportedException, system.ArgumentOutOfRangeException, system.RankException, system.ArrayTypeMismatchException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("SignPrehash", sk, skOff, ctx, ph, phOff, sig, sigOff);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void SignPrehash(JCORefOut dupParam0, int dupParam1, JCORefOut dupParam2, JCORefOut dupParam3, int dupParam4, JCORefOut dupParam5, int dupParam6) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.InvalidOperationException, system.ArgumentNullException, system.NotSupportedException, system.ArgumentOutOfRangeException, system.RankException, system.ArrayTypeMismatchException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("SignPrehash", dupParam0.getJCRefOut(), dupParam1, dupParam2.getJCRefOut(), dupParam3.getJCRefOut(), dupParam4, dupParam5.getJCRefOut(), dupParam6);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void SignPrehash(byte[] sk, int skOff, byte[] pk, int pkOff, byte[] ctx, byte[] ph, int phOff, byte[] sig, int sigOff) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.InvalidOperationException, system.ArgumentNullException, system.NotSupportedException, system.ArgumentOutOfRangeException, system.RankException, system.ArrayTypeMismatchException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("SignPrehash", sk, skOff, pk, pkOff, ctx, ph, phOff, sig, sigOff);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void SignPrehash(JCORefOut dupParam0, int dupParam1, JCORefOut dupParam2, int dupParam3, JCORefOut dupParam4, JCORefOut dupParam5, int dupParam6, JCORefOut dupParam7, int dupParam8) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.InvalidOperationException, system.ArgumentNullException, system.NotSupportedException, system.ArgumentOutOfRangeException, system.RankException, system.ArrayTypeMismatchException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("SignPrehash", dupParam0.getJCRefOut(), dupParam1, dupParam2.getJCRefOut(), dupParam3, dupParam4.getJCRefOut(), dupParam5.getJCRefOut(), dupParam6, dupParam7.getJCRefOut(), dupParam8);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void SignPrehash(byte[] sk, int skOff, byte[] pk, int pkOff, byte[] ctx, IXof ph, byte[] sig, int sigOff) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.InvalidOperationException, system.ArgumentNullException, system.NotSupportedException, system.ArgumentOutOfRangeException, system.RankException, system.ArrayTypeMismatchException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("SignPrehash", sk, skOff, pk, pkOff, ctx, ph == null ? null : ph.getJCOInstance(), sig, sigOff);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void SignPrehash(JCORefOut dupParam0, int dupParam1, JCORefOut dupParam2, int dupParam3, JCORefOut dupParam4, IXof dupParam5, JCORefOut dupParam6, int dupParam7) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.InvalidOperationException, system.ArgumentNullException, system.NotSupportedException, system.ArgumentOutOfRangeException, system.RankException, system.ArrayTypeMismatchException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("SignPrehash", dupParam0.getJCRefOut(), dupParam1, dupParam2.getJCRefOut(), dupParam3, dupParam4.getJCRefOut(), dupParam5 == null ? null : dupParam5.getJCOInstance(), dupParam6.getJCRefOut(), dupParam7);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void SignPrehash(byte[] sk, int skOff, byte[] ctx, IXof ph, byte[] sig, int sigOff) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.InvalidOperationException, system.ArgumentNullException, system.NotSupportedException, system.ArgumentOutOfRangeException, system.RankException, system.ArrayTypeMismatchException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("SignPrehash", sk, skOff, ctx, ph == null ? null : ph.getJCOInstance(), sig, sigOff);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void SignPrehash(JCORefOut dupParam0, int dupParam1, JCORefOut dupParam2, IXof dupParam3, JCORefOut dupParam4, int dupParam5) throws Throwable, system.ArgumentException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.InvalidOperationException, system.ArgumentNullException, system.NotSupportedException, system.ArgumentOutOfRangeException, system.RankException, system.ArrayTypeMismatchException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("SignPrehash", dupParam0.getJCRefOut(), dupParam1, dupParam2.getJCRefOut(), dupParam3 == null ? null : dupParam3.getJCOInstance(), dupParam4.getJCRefOut(), dupParam5);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    


    // Instance Events section
    

}