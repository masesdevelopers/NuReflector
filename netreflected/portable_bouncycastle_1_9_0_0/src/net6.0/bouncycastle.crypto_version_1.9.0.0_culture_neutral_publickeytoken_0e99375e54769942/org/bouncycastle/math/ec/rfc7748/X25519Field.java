/*
 *  MIT License
 *
 *  Copyright (c) 2022 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package org.bouncycastle.math.ec.rfc7748;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import system.UInt32;


/**
 * The base .NET class managing Org.BouncyCastle.Math.EC.Rfc7748.X25519Field, BouncyCastle.Crypto, Version=1.9.0.0, Culture=neutral, PublicKeyToken=0e99375e54769942.
 * <p>
 * 
 * See: <a href="https://docs.microsoft.com/en-us/dotnet/api/Org.BouncyCastle.Math.EC.Rfc7748.X25519Field" target="_top">https://docs.microsoft.com/en-us/dotnet/api/Org.BouncyCastle.Math.EC.Rfc7748.X25519Field</a>
 */
public class X25519Field extends NetObject  {
    /**
     * Fully assembly qualified name: BouncyCastle.Crypto, Version=1.9.0.0, Culture=neutral, PublicKeyToken=0e99375e54769942
     */
    public static final String assemblyFullName = "BouncyCastle.Crypto, Version=1.9.0.0, Culture=neutral, PublicKeyToken=0e99375e54769942";
    /**
     * Assembly name: BouncyCastle.Crypto
     */
    public static final String assemblyShortName = "BouncyCastle.Crypto";
    /**
     * Qualified class name: Org.BouncyCastle.Math.EC.Rfc7748.X25519Field
     */
    public static final String className = "Org.BouncyCastle.Math.EC.Rfc7748.X25519Field";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    /**
     * The type managed from JCOBridge. See {@link JCType}
     */
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            String classToCreate = className + ", "
                    + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Creating %s", classToCreate);
            JCType typeCreated = bridge.GetType(classToCreate);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Created: %s",
                        (typeCreated != null) ? typeCreated.toString() : "Returned null value");
            return typeCreated;
        } catch (JCException e) {
            JCOReflector.writeLog(e);
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }
    /**
     * Internal constructor. Use with caution 
     */
    public X25519Field(java.lang.Object instance) throws Throwable {
        super(instance);
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public java.lang.Object getJCOInstance() {
        return classInstance;
    }

    public void setJCOInstance(JCObject instance) {
        classInstance = instance;
        super.setJCOInstance(classInstance);
    }

    public JCType getJCOType() {
        return classType;
    }
    /**
     * Try to cast the {@link IJCOBridgeReflected} instance into {@link X25519Field}, a cast assert is made to check if types are compatible.
     * @param from {@link IJCOBridgeReflected} instance to be casted
     * @return {@link X25519Field} instance
     * @throws java.lang.Throwable in case of error during cast operation
     */
    public static X25519Field cast(IJCOBridgeReflected from) throws Throwable {
        NetType.AssertCast(classType, from);
        return new X25519Field(from.getJCOInstance());
    }

    // Constructors section
    
    public X25519Field() throws Throwable {
    }

    
    // Methods section
    
    public static boolean AreEqualVar(int[] x, int[] y) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("AreEqualVar", x, y);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean AreEqualVar(JCORefOut dupParam0, JCORefOut dupParam1) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("AreEqualVar", dupParam0.getJCRefOut(), dupParam1.getJCRefOut());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean IsOneVar(int[] x) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("IsOneVar", (java.lang.Object)x);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean IsOneVar(JCORefOut dupParam0) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("IsOneVar", (java.lang.Object)dupParam0.getJCRefOut());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean IsZeroVar(int[] x) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("IsZeroVar", (java.lang.Object)x);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean IsZeroVar(JCORefOut dupParam0) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("IsZeroVar", (java.lang.Object)dupParam0.getJCRefOut());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean SqrtRatioVar(int[] u, int[] v, int[] z) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("SqrtRatioVar", u, v, z);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean SqrtRatioVar(JCORefOut dupParam0, JCORefOut dupParam1, JCORefOut dupParam2) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("SqrtRatioVar", dupParam0.getJCRefOut(), dupParam1.getJCRefOut(), dupParam2.getJCRefOut());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int AreEqual(int[] x, int[] y) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (int)classType.Invoke("AreEqual", x, y);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int AreEqual(JCORefOut dupParam0, JCORefOut dupParam1) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (int)classType.Invoke("AreEqual", dupParam0.getJCRefOut(), dupParam1.getJCRefOut());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int IsOne(int[] x) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (int)classType.Invoke("IsOne", (java.lang.Object)x);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int IsOne(JCORefOut dupParam0) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (int)classType.Invoke("IsOne", (java.lang.Object)dupParam0.getJCRefOut());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int IsZero(int[] x) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (int)classType.Invoke("IsZero", (java.lang.Object)x);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int IsZero(JCORefOut dupParam0) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (int)classType.Invoke("IsZero", (java.lang.Object)dupParam0.getJCRefOut());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int[] Create() throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            ArrayList<java.lang.Object> resultingArrayList = new ArrayList<java.lang.Object>();
            JCObject resultingObjects = (JCObject)classType.Invoke("Create");
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            int[] resultingArray = new int[resultingArrayList.size()];
            for(int indexCreate = 0; indexCreate < resultingArrayList.size(); indexCreate++ ) {
				resultingArray[indexCreate] = (int)resultingArrayList.get(indexCreate);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int[] CreateTable(int n) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            ArrayList<java.lang.Object> resultingArrayList = new ArrayList<java.lang.Object>();
            JCObject resultingObjects = (JCObject)classType.Invoke("CreateTable", n);
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            int[] resultingArray = new int[resultingArrayList.size()];
            for(int indexCreateTable = 0; indexCreateTable < resultingArrayList.size(); indexCreateTable++ ) {
				resultingArray[indexCreateTable] = (int)resultingArrayList.get(indexCreateTable);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void Add(int[] x, int[] y, int[] z) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("Add", x, y, z);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void Add(JCORefOut dupParam0, JCORefOut dupParam1, JCORefOut dupParam2) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("Add", dupParam0.getJCRefOut(), dupParam1.getJCRefOut(), dupParam2.getJCRefOut());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void AddOne(int[] z, int zOff) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("AddOne", z, zOff);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void AddOne(JCORefOut dupParam0, int dupParam1) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("AddOne", dupParam0.getJCRefOut(), dupParam1);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void AddOne(int[] z) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("AddOne", (java.lang.Object)z);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void AddOne(JCORefOut dupParam0) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("AddOne", (java.lang.Object)dupParam0.getJCRefOut());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void Apm(int[] x, int[] y, int[] zp, int[] zm) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("Apm", x, y, zp, zm);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void Apm(JCORefOut dupParam0, JCORefOut dupParam1, JCORefOut dupParam2, JCORefOut dupParam3) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("Apm", dupParam0.getJCRefOut(), dupParam1.getJCRefOut(), dupParam2.getJCRefOut(), dupParam3.getJCRefOut());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void Carry(int[] z) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("Carry", (java.lang.Object)z);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void Carry(JCORefOut dupParam0) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("Carry", (java.lang.Object)dupParam0.getJCRefOut());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void CMov(int cond, int[] x, int xOff, int[] z, int zOff) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("CMov", cond, x, xOff, z, zOff);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void CMov(int dupParam0, JCORefOut dupParam1, int dupParam2, JCORefOut dupParam3, int dupParam4) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("CMov", dupParam0, dupParam1.getJCRefOut(), dupParam2, dupParam3.getJCRefOut(), dupParam4);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void CNegate(int negate, int[] z) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("CNegate", negate, z);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void CNegate(int dupParam0, JCORefOut dupParam1) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("CNegate", dupParam0, dupParam1.getJCRefOut());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void Copy(int[] x, int xOff, int[] z, int zOff) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("Copy", x, xOff, z, zOff);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void Copy(JCORefOut dupParam0, int dupParam1, JCORefOut dupParam2, int dupParam3) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("Copy", dupParam0.getJCRefOut(), dupParam1, dupParam2.getJCRefOut(), dupParam3);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void CSwap(int swap, int[] a, int[] b) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("CSwap", swap, a, b);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void CSwap(int dupParam0, JCORefOut dupParam1, JCORefOut dupParam2) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("CSwap", dupParam0, dupParam1.getJCRefOut(), dupParam2.getJCRefOut());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void Decode(byte[] x, int xOff, int[] z) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("Decode", x, xOff, z);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void Decode(JCORefOut dupParam0, int dupParam1, JCORefOut dupParam2) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("Decode", dupParam0.getJCRefOut(), dupParam1, dupParam2.getJCRefOut());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void Decode(UInt32[] x, int xOff, int[] z) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("Decode", toObjectFromArray(x), xOff, z);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void Decode(UInt32[] dupParam0, int dupParam1, JCORefOut dupParam2) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("Decode", toObjectFromArray(dupParam0), dupParam1, dupParam2.getJCRefOut());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void Encode(int[] x, byte[] z, int zOff) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("Encode", x, z, zOff);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void Encode(JCORefOut dupParam0, JCORefOut dupParam1, int dupParam2) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("Encode", dupParam0.getJCRefOut(), dupParam1.getJCRefOut(), dupParam2);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void Encode(int[] x, UInt32[] z, int zOff) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("Encode", x, toObjectFromArray(z), zOff);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void Encode(JCORefOut dupParam0, UInt32[] dupParam1, int dupParam2) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("Encode", dupParam0.getJCRefOut(), toObjectFromArray(dupParam1), dupParam2);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void Inv(int[] x, int[] z) throws Throwable, system.PlatformNotSupportedException, system.ArgumentNullException, system.RankException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.ArgumentException, system.ArrayTypeMismatchException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("Inv", x, z);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void Inv(JCORefOut dupParam0, JCORefOut dupParam1) throws Throwable, system.PlatformNotSupportedException, system.ArgumentNullException, system.RankException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.ArgumentException, system.ArrayTypeMismatchException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("Inv", dupParam0.getJCRefOut(), dupParam1.getJCRefOut());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void InvVar(int[] x, int[] z) throws Throwable, system.PlatformNotSupportedException, system.ArgumentNullException, system.RankException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.ArgumentException, system.ArrayTypeMismatchException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("InvVar", x, z);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void InvVar(JCORefOut dupParam0, JCORefOut dupParam1) throws Throwable, system.PlatformNotSupportedException, system.ArgumentNullException, system.RankException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.ArgumentException, system.ArrayTypeMismatchException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("InvVar", dupParam0.getJCRefOut(), dupParam1.getJCRefOut());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void Mul(int[] x, int y, int[] z) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("Mul", x, y, z);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void Mul(JCORefOut dupParam0, int dupParam1, JCORefOut dupParam2) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("Mul", dupParam0.getJCRefOut(), dupParam1, dupParam2.getJCRefOut());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void Mul(int[] x, int[] y, int[] z) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("Mul", x, y, z);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void Mul(JCORefOut dupParam0, JCORefOut dupParam1, JCORefOut dupParam2) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("Mul", dupParam0.getJCRefOut(), dupParam1.getJCRefOut(), dupParam2.getJCRefOut());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void Negate(int[] x, int[] z) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("Negate", x, z);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void Negate(JCORefOut dupParam0, JCORefOut dupParam1) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("Negate", dupParam0.getJCRefOut(), dupParam1.getJCRefOut());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void Normalize(int[] z) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("Normalize", (java.lang.Object)z);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void Normalize(JCORefOut dupParam0) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("Normalize", (java.lang.Object)dupParam0.getJCRefOut());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void One(int[] z) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("One", (java.lang.Object)z);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void One(JCORefOut dupParam0) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("One", (java.lang.Object)dupParam0.getJCRefOut());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void Sqr(int[] x, int n, int[] z) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("Sqr", x, n, z);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void Sqr(JCORefOut dupParam0, int dupParam1, JCORefOut dupParam2) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("Sqr", dupParam0.getJCRefOut(), dupParam1, dupParam2.getJCRefOut());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void Sqr(int[] x, int[] z) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("Sqr", x, z);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void Sqr(JCORefOut dupParam0, JCORefOut dupParam1) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("Sqr", dupParam0.getJCRefOut(), dupParam1.getJCRefOut());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void Sub(int[] x, int[] y, int[] z) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("Sub", x, y, z);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void Sub(JCORefOut dupParam0, JCORefOut dupParam1, JCORefOut dupParam2) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("Sub", dupParam0.getJCRefOut(), dupParam1.getJCRefOut(), dupParam2.getJCRefOut());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void SubOne(int[] z) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("SubOne", (java.lang.Object)z);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void SubOne(JCORefOut dupParam0) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("SubOne", (java.lang.Object)dupParam0.getJCRefOut());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void Zero(int[] z) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("Zero", (java.lang.Object)z);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void Zero(JCORefOut dupParam0) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("Zero", (java.lang.Object)dupParam0.getJCRefOut());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    


    // Instance Events section
    

}