/*
 *  MIT License
 *
 *  Copyright (c) 2022 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package org.bouncycastle.tls.crypto;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;

// Import section
import org.bouncycastle.tls.SignatureAndHashAlgorithm;
import org.bouncycastle.tls.crypto.TlsCertificate;
import org.bouncycastle.tls.crypto.TlsCertificateImplementation;
import org.bouncycastle.tls.crypto.TlsCipher;
import org.bouncycastle.tls.crypto.TlsCipherImplementation;
import org.bouncycastle.tls.crypto.TlsCryptoParameters;
import org.bouncycastle.tls.crypto.TlsDHDomain;
import org.bouncycastle.tls.crypto.TlsDHDomainImplementation;
import org.bouncycastle.tls.crypto.TlsDHConfig;
import org.bouncycastle.tls.crypto.TlsECDomain;
import org.bouncycastle.tls.crypto.TlsECDomainImplementation;
import org.bouncycastle.tls.crypto.TlsECConfig;
import org.bouncycastle.tls.crypto.TlsHash;
import org.bouncycastle.tls.crypto.TlsHashImplementation;
import org.bouncycastle.tls.crypto.TlsHmac;
import org.bouncycastle.tls.crypto.TlsHmacImplementation;
import org.bouncycastle.tls.crypto.TlsNonceGenerator;
import org.bouncycastle.tls.crypto.TlsNonceGeneratorImplementation;
import org.bouncycastle.tls.crypto.TlsSecret;
import org.bouncycastle.tls.crypto.TlsSecretImplementation;
import org.bouncycastle.tls.ProtocolVersion;
import org.bouncycastle.tls.crypto.TlsSrp6Client;
import org.bouncycastle.tls.crypto.TlsSrp6ClientImplementation;
import org.bouncycastle.tls.crypto.TlsSrpConfig;
import org.bouncycastle.tls.crypto.TlsSrp6Server;
import org.bouncycastle.tls.crypto.TlsSrp6ServerImplementation;
import org.bouncycastle.math.BigInteger;
import org.bouncycastle.tls.crypto.TlsSrp6VerifierGenerator;
import org.bouncycastle.tls.crypto.TlsSrp6VerifierGeneratorImplementation;
import org.bouncycastle.security.SecureRandom;


/**
 * The base .NET class managing Org.BouncyCastle.Tls.Crypto.TlsCrypto, BouncyCastle.Crypto, Version=1.9.0.0, Culture=neutral, PublicKeyToken=0e99375e54769942.
 * <p>
 * 
 * See: <a href="https://docs.microsoft.com/en-us/dotnet/api/Org.BouncyCastle.Tls.Crypto.TlsCrypto" target="_top">https://docs.microsoft.com/en-us/dotnet/api/Org.BouncyCastle.Tls.Crypto.TlsCrypto</a>
 */
public interface TlsCrypto extends IJCOBridgeReflected {
    /**
     * Fully assembly qualified name: BouncyCastle.Crypto, Version=1.9.0.0, Culture=neutral, PublicKeyToken=0e99375e54769942
     */
    public static final String assemblyFullName = "BouncyCastle.Crypto, Version=1.9.0.0, Culture=neutral, PublicKeyToken=0e99375e54769942";
    /**
     * Assembly name: BouncyCastle.Crypto
     */
    public static final String assemblyShortName = "BouncyCastle.Crypto";
    /**
     * Qualified class name: Org.BouncyCastle.Tls.Crypto.TlsCrypto
     */
    public static final String className = "Org.BouncyCastle.Tls.Crypto.TlsCrypto";
    /**
     * Try to cast the {@link IJCOBridgeReflected} instance into {@link TlsCrypto}, a cast assert is made to check if types are compatible.
     * @param from {@link IJCOBridgeReflected} instance to be casted
     * @return {@link TlsCrypto} instance
     * @throws java.lang.Throwable in case of error during cast operation
     */
    public static TlsCrypto ToTlsCrypto(IJCOBridgeReflected from) throws Throwable {
        JCOBridge bridge = JCOBridgeInstance.getInstance("BouncyCastle.Crypto, Version=1.9.0.0, Culture=neutral, PublicKeyToken=0e99375e54769942");
        JCType classType = bridge.GetType(className + ", " + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName));
        NetType.AssertCast(classType, from);
        return new TlsCryptoImplementation(from.getJCOInstance());
    }

    /**
     * Returns the reflected Assembly name
     * 
     * @return A {@link String} representing the Fullname of reflected Assembly
     */
    public String getJCOAssemblyName();

    /**
     * Returns the reflected Class name
     * 
     * @return A {@link String} representing the Fullname of reflected Class
     */
    public String getJCOClassName();

    /**
     * Returns the reflected Class name used to build the object
     * 
     * @return A {@link String} representing the name used to allocated the object
     *         in CLR context
     */
    public String getJCOObjectName();

    /**
     * Returns the instantiated class
     * 
     * @return An {@link java.lang.Object} representing the instance of the instantiated Class
     */
    public java.lang.Object getJCOInstance();

    /**
     * Returns the instantiated class Type
     * 
     * @return A {@link JCType} representing the Type of the instantiated Class
     */
    public JCType getJCOType();

    // Methods section
    
    public boolean HasAllRawSignatureAlgorithms() throws Throwable;

    public boolean HasCryptoHashAlgorithm(int cryptoHashAlgorithm) throws Throwable;

    public boolean HasCryptoSignatureAlgorithm(int cryptoSignatureAlgorithm) throws Throwable;

    public boolean HasDHAgreement() throws Throwable;

    public boolean HasECDHAgreement() throws Throwable;

    public boolean HasEncryptionAlgorithm(int encryptionAlgorithm) throws Throwable;

    public boolean HasMacAlgorithm(int macAlgorithm) throws Throwable;

    public boolean HasNamedGroup(int namedGroup) throws Throwable;

    public boolean HasRsaEncryption() throws Throwable;

    public boolean HasSignatureAlgorithm(short signatureAlgorithm) throws Throwable;

    public boolean HasSignatureAndHashAlgorithm(SignatureAndHashAlgorithm sigAndHashAlgorithm) throws Throwable;

    public boolean HasSignatureScheme(int signatureScheme) throws Throwable;

    public boolean HasSrpAuthentication() throws Throwable;

    public TlsCertificate CreateCertificate(byte[] encoding) throws Throwable;

    public TlsCertificate CreateCertificate(JCORefOut dupParam0) throws Throwable;

    public TlsCipher CreateCipher(TlsCryptoParameters cryptoParams, int encryptionAlgorithm, int macAlgorithm) throws Throwable;

    public TlsDHDomain CreateDHDomain(TlsDHConfig dhConfig) throws Throwable;

    public TlsECDomain CreateECDomain(TlsECConfig ecConfig) throws Throwable;

    public TlsHash CreateHash(int cryptoHashAlgorithm) throws Throwable;

    public TlsHmac CreateHmac(int macAlgorithm) throws Throwable;

    public TlsHmac CreateHmacForHash(int cryptoHashAlgorithm) throws Throwable;

    public TlsNonceGenerator CreateNonceGenerator(byte[] additionalSeedMaterial) throws Throwable;

    public TlsNonceGenerator CreateNonceGenerator(JCORefOut dupParam0) throws Throwable;

    public TlsSecret AdoptSecret(TlsSecret secret) throws Throwable;

    public TlsSecret CreateSecret(byte[] data) throws Throwable;

    public TlsSecret CreateSecret(JCORefOut dupParam0) throws Throwable;

    public TlsSecret GenerateRsaPreMasterSecret(ProtocolVersion clientVersion) throws Throwable;

    public TlsSecret HkdfInit(int cryptoHashAlgorithm) throws Throwable;

    public TlsSrp6Client CreateSrp6Client(TlsSrpConfig srpConfig) throws Throwable;

    public TlsSrp6Server CreateSrp6Server(TlsSrpConfig srpConfig, BigInteger srpVerifier) throws Throwable;

    public TlsSrp6VerifierGenerator CreateSrp6VerifierGenerator(TlsSrpConfig srpConfig) throws Throwable;


    
    // Properties section
    
    public SecureRandom getSecureRandom() throws Throwable;



    // Instance Events section
    

}