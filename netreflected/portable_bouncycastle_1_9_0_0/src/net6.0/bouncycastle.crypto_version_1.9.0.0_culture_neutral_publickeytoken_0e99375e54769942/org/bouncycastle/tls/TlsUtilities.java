/*
 *  MIT License
 *
 *  Copyright (c) 2022 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package org.bouncycastle.tls;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import system.collections.IList;
import system.collections.IListImplementation;
import org.bouncycastle.tls.SignatureAndHashAlgorithm;
import system.collections.IDictionary;
import system.collections.IDictionaryImplementation;
import org.bouncycastle.tls.ProtocolVersion;
import org.bouncycastle.tls.TlsContext;
import org.bouncycastle.tls.TlsContextImplementation;
import org.bouncycastle.tls.crypto.TlsCrypto;
import org.bouncycastle.tls.crypto.TlsCryptoImplementation;
import system.net.sockets.SocketException;
import org.bouncycastle.tls.SecurityParameters;
import system.io.Stream;
import org.bouncycastle.asn1.Asn1Object;
import org.bouncycastle.asn1.DerObjectIdentifier;
import org.bouncycastle.tls.crypto.TlsSecret;
import org.bouncycastle.tls.crypto.TlsSecretImplementation;
import org.bouncycastle.tls.crypto.TlsEncryptor;
import org.bouncycastle.tls.crypto.TlsEncryptorImplementation;
import org.bouncycastle.tls.TlsCredentialedSigner;
import org.bouncycastle.tls.TlsCredentialedSignerImplementation;
import org.bouncycastle.tls.TlsSession;
import org.bouncycastle.tls.TlsSessionImplementation;
import org.bouncycastle.tls.SessionParameters;
import org.bouncycastle.tls.crypto.TlsCertificate;
import org.bouncycastle.tls.crypto.TlsCertificateImplementation;


/**
 * The base .NET class managing Org.BouncyCastle.Tls.TlsUtilities, BouncyCastle.Crypto, Version=1.9.0.0, Culture=neutral, PublicKeyToken=0e99375e54769942.
 * <p>
 * 
 * See: <a href="https://docs.microsoft.com/en-us/dotnet/api/Org.BouncyCastle.Tls.TlsUtilities" target="_top">https://docs.microsoft.com/en-us/dotnet/api/Org.BouncyCastle.Tls.TlsUtilities</a>
 */
public class TlsUtilities extends NetObject  {
    /**
     * Fully assembly qualified name: BouncyCastle.Crypto, Version=1.9.0.0, Culture=neutral, PublicKeyToken=0e99375e54769942
     */
    public static final String assemblyFullName = "BouncyCastle.Crypto, Version=1.9.0.0, Culture=neutral, PublicKeyToken=0e99375e54769942";
    /**
     * Assembly name: BouncyCastle.Crypto
     */
    public static final String assemblyShortName = "BouncyCastle.Crypto";
    /**
     * Qualified class name: Org.BouncyCastle.Tls.TlsUtilities
     */
    public static final String className = "Org.BouncyCastle.Tls.TlsUtilities";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    /**
     * The type managed from JCOBridge. See {@link JCType}
     */
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            String classToCreate = className + ", "
                    + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Creating %s", classToCreate);
            JCType typeCreated = bridge.GetType(classToCreate);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Created: %s",
                        (typeCreated != null) ? typeCreated.toString() : "Returned null value");
            return typeCreated;
        } catch (JCException e) {
            JCOReflector.writeLog(e);
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }
    /**
     * Internal constructor. Use with caution 
     */
    public TlsUtilities(java.lang.Object instance) throws Throwable {
        super(instance);
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public java.lang.Object getJCOInstance() {
        return classInstance;
    }

    public void setJCOInstance(JCObject instance) {
        classInstance = instance;
        super.setJCOInstance(classInstance);
    }

    public JCType getJCOType() {
        return classType;
    }
    /**
     * Try to cast the {@link IJCOBridgeReflected} instance into {@link TlsUtilities}, a cast assert is made to check if types are compatible.
     * @param from {@link IJCOBridgeReflected} instance to be casted
     * @return {@link TlsUtilities} instance
     * @throws java.lang.Throwable in case of error during cast operation
     */
    public static TlsUtilities cast(IJCOBridgeReflected from) throws Throwable {
        NetType.AssertCast(classType, from);
        return new TlsUtilities(from.getJCOInstance());
    }

    // Constructors section
    
    public TlsUtilities() throws Throwable {
    }

    
    // Methods section
    
    public static boolean AddToSet(IList s, int i) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("AddToSet", s == null ? null : s.getJCOInstance(), i);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean ConstantTimeAreEqual(int len, byte[] a, int aOff, byte[] b, int bOff) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("ConstantTimeAreEqual", len, a, aOff, b, bOff);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean ConstantTimeAreEqual(int dupParam0, JCORefOut dupParam1, int dupParam2, JCORefOut dupParam3, int dupParam4) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("ConstantTimeAreEqual", dupParam0, dupParam1.getJCRefOut(), dupParam2, dupParam3.getJCRefOut(), dupParam4);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean ContainsAnySignatureAlgorithm(IList supportedSignatureAlgorithms, short signatureAlgorithm) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("ContainsAnySignatureAlgorithm", supportedSignatureAlgorithms == null ? null : supportedSignatureAlgorithms.getJCOInstance(), signatureAlgorithm);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean ContainsNonAscii(byte[] bs) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("ContainsNonAscii", (java.lang.Object)bs);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean ContainsNonAscii(JCORefOut dupParam0) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("ContainsNonAscii", (java.lang.Object)dupParam0.getJCRefOut());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean ContainsNonAscii(java.lang.String s) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("ContainsNonAscii", s);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean ContainsSignatureAlgorithm(IList supportedSignatureAlgorithms, SignatureAndHashAlgorithm signatureAlgorithm) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("ContainsSignatureAlgorithm", supportedSignatureAlgorithms == null ? null : supportedSignatureAlgorithms.getJCOInstance(), signatureAlgorithm == null ? null : signatureAlgorithm.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean HasExpectedEmptyExtensionData(IDictionary extensions, int extensionType, short alertDescription) throws Throwable, system.IndexOutOfRangeException, org.bouncycastle.tls.TlsFatalAlert {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("HasExpectedEmptyExtensionData", extensions == null ? null : extensions.getJCOInstance(), extensionType, alertDescription);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean HasSigningCapability(short clientCertificateType) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("HasSigningCapability", clientCertificateType);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean IsAeadCipherSuite(int cipherSuite) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("IsAeadCipherSuite", cipherSuite);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean IsBlockCipherSuite(int cipherSuite) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("IsBlockCipherSuite", cipherSuite);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean IsNullOrContainsNull(NetObject[] array) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("IsNullOrContainsNull", (java.lang.Object)toObjectFromArray(array));
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean IsNullOrEmpty(byte[] array) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("IsNullOrEmpty", (java.lang.Object)array);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean IsNullOrEmpty(JCORefOut dupParam0) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("IsNullOrEmpty", (java.lang.Object)dupParam0.getJCRefOut());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean IsNullOrEmpty(short[] array) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("IsNullOrEmpty", (java.lang.Object)array);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean IsNullOrEmpty(int[] array) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("IsNullOrEmpty", (java.lang.Object)array);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean IsNullOrEmpty(IList v) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("IsNullOrEmpty", v == null ? null : v.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean IsNullOrEmpty(NetObject[] array) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("IsNullOrEmpty", (java.lang.Object)toObjectFromArray(array));
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean IsNullOrEmpty(java.lang.String s) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("IsNullOrEmpty", s);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean IsSignatureAlgorithmsExtensionAllowed(ProtocolVersion version) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("IsSignatureAlgorithmsExtensionAllowed", version == null ? null : version.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean IsSsl(TlsContext context) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("IsSsl", context == null ? null : context.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean IsStreamCipherSuite(int cipherSuite) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("IsStreamCipherSuite", cipherSuite);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean IsSupportedCipherSuite(TlsCrypto crypto, int cipherSuite) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("IsSupportedCipherSuite", crypto == null ? null : crypto.getJCOInstance(), cipherSuite);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean IsSupportedKeyExchange(TlsCrypto crypto, int keyExchangeAlgorithm) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("IsSupportedKeyExchange", crypto == null ? null : crypto.getJCOInstance(), keyExchangeAlgorithm);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean IsTimeout(SocketException e) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("IsTimeout", e == null ? null : e.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean IsTlsV10(ProtocolVersion version) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("IsTlsV10", version == null ? null : version.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean IsTlsV10(TlsContext context) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("IsTlsV10", context == null ? null : context.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean IsTlsV11(ProtocolVersion version) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("IsTlsV11", version == null ? null : version.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean IsTlsV11(TlsContext context) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("IsTlsV11", context == null ? null : context.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean IsTlsV12(ProtocolVersion version) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("IsTlsV12", version == null ? null : version.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean IsTlsV12(TlsContext context) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("IsTlsV12", context == null ? null : context.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean IsTlsV13(ProtocolVersion version) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("IsTlsV13", version == null ? null : version.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean IsTlsV13(TlsContext context) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("IsTlsV13", context == null ? null : context.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean IsValidCipherSuiteForSignatureAlgorithms(int cipherSuite, IList sigAlgs) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("IsValidCipherSuiteForSignatureAlgorithms", cipherSuite, sigAlgs == null ? null : sigAlgs.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean IsValidSignatureSchemeForServerKeyExchange(int signatureScheme, int keyExchangeAlgorithm) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("IsValidSignatureSchemeForServerKeyExchange", signatureScheme, keyExchangeAlgorithm);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean IsValidUint16(int i) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("IsValidUint16", i);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean IsValidUint16(long i) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("IsValidUint16", i);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean IsValidUint24(int i) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("IsValidUint24", i);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean IsValidUint24(long i) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("IsValidUint24", i);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean IsValidUint32(long i) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("IsValidUint32", i);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean IsValidUint48(long i) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("IsValidUint48", i);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean IsValidUint64(long i) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("IsValidUint64", i);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean IsValidUint8(short i) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("IsValidUint8", i);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean IsValidUint8(int i) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("IsValidUint8", i);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean IsValidUint8(long i) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("IsValidUint8", i);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static boolean IsValidVersionForCipherSuite(int cipherSuite, ProtocolVersion version) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (boolean)classType.Invoke("IsValidVersionForCipherSuite", cipherSuite, version == null ? null : version.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static byte[] CalculateExporterSeed(SecurityParameters securityParameters, byte[] context) throws Throwable, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.RankException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.ArrayTypeMismatchException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            ArrayList<java.lang.Object> resultingArrayList = new ArrayList<java.lang.Object>();
            JCObject resultingObjects = (JCObject)classType.Invoke("CalculateExporterSeed", securityParameters == null ? null : securityParameters.getJCOInstance(), context);
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            byte[] resultingArray = new byte[resultingArrayList.size()];
            for(int indexCalculateExporterSeed = 0; indexCalculateExporterSeed < resultingArrayList.size(); indexCalculateExporterSeed++ ) {
				resultingArray[indexCalculateExporterSeed] = (byte)resultingArrayList.get(indexCalculateExporterSeed);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static byte[] CalculateExporterSeed(SecurityParameters dupParam0, JCORefOut dupParam1) throws Throwable, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.RankException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.ArrayTypeMismatchException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            ArrayList<java.lang.Object> resultingArrayList = new ArrayList<java.lang.Object>();
            JCObject resultingObjects = (JCObject)classType.Invoke("CalculateExporterSeed", dupParam0 == null ? null : dupParam0.getJCOInstance(), dupParam1.getJCRefOut());
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            byte[] resultingArray = new byte[resultingArrayList.size()];
            for(int indexCalculateExporterSeed = 0; indexCalculateExporterSeed < resultingArrayList.size(); indexCalculateExporterSeed++ ) {
				resultingArray[indexCalculateExporterSeed] = (byte)resultingArrayList.get(indexCalculateExporterSeed);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static byte[] Clone(byte[] data) throws Throwable, system.PlatformNotSupportedException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            ArrayList<java.lang.Object> resultingArrayList = new ArrayList<java.lang.Object>();
            JCObject resultingObjects = (JCObject)classType.Invoke("Clone", (java.lang.Object)data);
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            byte[] resultingArray = new byte[resultingArrayList.size()];
            for(int indexClone = 0; indexClone < resultingArrayList.size(); indexClone++ ) {
				resultingArray[indexClone] = (byte)resultingArrayList.get(indexClone);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static byte[] Clone(JCORefOut dupParam0) throws Throwable, system.PlatformNotSupportedException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            ArrayList<java.lang.Object> resultingArrayList = new ArrayList<java.lang.Object>();
            JCObject resultingObjects = (JCObject)classType.Invoke("Clone", (java.lang.Object)dupParam0.getJCRefOut());
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            byte[] resultingArray = new byte[resultingArrayList.size()];
            for(int indexClone = 0; indexClone < resultingArrayList.size(); indexClone++ ) {
				resultingArray[indexClone] = (byte)resultingArrayList.get(indexClone);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static byte[] CopyOfRangeExact(byte[] original, int from, int to) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.RankException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.ArrayTypeMismatchException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            ArrayList<java.lang.Object> resultingArrayList = new ArrayList<java.lang.Object>();
            JCObject resultingObjects = (JCObject)classType.Invoke("CopyOfRangeExact", original, from, to);
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            byte[] resultingArray = new byte[resultingArrayList.size()];
            for(int indexCopyOfRangeExact = 0; indexCopyOfRangeExact < resultingArrayList.size(); indexCopyOfRangeExact++ ) {
				resultingArray[indexCopyOfRangeExact] = (byte)resultingArrayList.get(indexCopyOfRangeExact);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static byte[] CopyOfRangeExact(JCORefOut dupParam0, int dupParam1, int dupParam2) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.RankException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.ArrayTypeMismatchException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            ArrayList<java.lang.Object> resultingArrayList = new ArrayList<java.lang.Object>();
            JCObject resultingObjects = (JCObject)classType.Invoke("CopyOfRangeExact", dupParam0.getJCRefOut(), dupParam1, dupParam2);
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            byte[] resultingArray = new byte[resultingArrayList.size()];
            for(int indexCopyOfRangeExact = 0; indexCopyOfRangeExact < resultingArrayList.size(); indexCopyOfRangeExact++ ) {
				resultingArray[indexCopyOfRangeExact] = (byte)resultingArrayList.get(indexCopyOfRangeExact);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static byte[] DecodeOpaque16(byte[] buf, int minLength) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.ObjectDisposedException, org.bouncycastle.tls.TlsFatalAlert {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            ArrayList<java.lang.Object> resultingArrayList = new ArrayList<java.lang.Object>();
            JCObject resultingObjects = (JCObject)classType.Invoke("DecodeOpaque16", buf, minLength);
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            byte[] resultingArray = new byte[resultingArrayList.size()];
            for(int indexDecodeOpaque16 = 0; indexDecodeOpaque16 < resultingArrayList.size(); indexDecodeOpaque16++ ) {
				resultingArray[indexDecodeOpaque16] = (byte)resultingArrayList.get(indexDecodeOpaque16);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static byte[] DecodeOpaque16(JCORefOut dupParam0, int dupParam1) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.ObjectDisposedException, org.bouncycastle.tls.TlsFatalAlert {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            ArrayList<java.lang.Object> resultingArrayList = new ArrayList<java.lang.Object>();
            JCObject resultingObjects = (JCObject)classType.Invoke("DecodeOpaque16", dupParam0.getJCRefOut(), dupParam1);
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            byte[] resultingArray = new byte[resultingArrayList.size()];
            for(int indexDecodeOpaque16 = 0; indexDecodeOpaque16 < resultingArrayList.size(); indexDecodeOpaque16++ ) {
				resultingArray[indexDecodeOpaque16] = (byte)resultingArrayList.get(indexDecodeOpaque16);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static byte[] DecodeOpaque16(byte[] buf) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.NotSupportedException, system.ObjectDisposedException, system.RankException, org.bouncycastle.tls.TlsFatalAlert {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            ArrayList<java.lang.Object> resultingArrayList = new ArrayList<java.lang.Object>();
            JCObject resultingObjects = (JCObject)classType.Invoke("DecodeOpaque16", (java.lang.Object)buf);
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            byte[] resultingArray = new byte[resultingArrayList.size()];
            for(int indexDecodeOpaque16 = 0; indexDecodeOpaque16 < resultingArrayList.size(); indexDecodeOpaque16++ ) {
				resultingArray[indexDecodeOpaque16] = (byte)resultingArrayList.get(indexDecodeOpaque16);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static byte[] DecodeOpaque16(JCORefOut dupParam0) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.NotSupportedException, system.ObjectDisposedException, system.RankException, org.bouncycastle.tls.TlsFatalAlert {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            ArrayList<java.lang.Object> resultingArrayList = new ArrayList<java.lang.Object>();
            JCObject resultingObjects = (JCObject)classType.Invoke("DecodeOpaque16", (java.lang.Object)dupParam0.getJCRefOut());
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            byte[] resultingArray = new byte[resultingArrayList.size()];
            for(int indexDecodeOpaque16 = 0; indexDecodeOpaque16 < resultingArrayList.size(); indexDecodeOpaque16++ ) {
				resultingArray[indexDecodeOpaque16] = (byte)resultingArrayList.get(indexDecodeOpaque16);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static byte[] DecodeOpaque8(byte[] buf, int minLength) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.ObjectDisposedException, org.bouncycastle.tls.TlsFatalAlert {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            ArrayList<java.lang.Object> resultingArrayList = new ArrayList<java.lang.Object>();
            JCObject resultingObjects = (JCObject)classType.Invoke("DecodeOpaque8", buf, minLength);
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            byte[] resultingArray = new byte[resultingArrayList.size()];
            for(int indexDecodeOpaque8 = 0; indexDecodeOpaque8 < resultingArrayList.size(); indexDecodeOpaque8++ ) {
				resultingArray[indexDecodeOpaque8] = (byte)resultingArrayList.get(indexDecodeOpaque8);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static byte[] DecodeOpaque8(JCORefOut dupParam0, int dupParam1) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.ObjectDisposedException, org.bouncycastle.tls.TlsFatalAlert {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            ArrayList<java.lang.Object> resultingArrayList = new ArrayList<java.lang.Object>();
            JCObject resultingObjects = (JCObject)classType.Invoke("DecodeOpaque8", dupParam0.getJCRefOut(), dupParam1);
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            byte[] resultingArray = new byte[resultingArrayList.size()];
            for(int indexDecodeOpaque8 = 0; indexDecodeOpaque8 < resultingArrayList.size(); indexDecodeOpaque8++ ) {
				resultingArray[indexDecodeOpaque8] = (byte)resultingArrayList.get(indexDecodeOpaque8);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static byte[] DecodeOpaque8(byte[] buf) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.NotSupportedException, system.ObjectDisposedException, system.RankException, org.bouncycastle.tls.TlsFatalAlert {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            ArrayList<java.lang.Object> resultingArrayList = new ArrayList<java.lang.Object>();
            JCObject resultingObjects = (JCObject)classType.Invoke("DecodeOpaque8", (java.lang.Object)buf);
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            byte[] resultingArray = new byte[resultingArrayList.size()];
            for(int indexDecodeOpaque8 = 0; indexDecodeOpaque8 < resultingArrayList.size(); indexDecodeOpaque8++ ) {
				resultingArray[indexDecodeOpaque8] = (byte)resultingArrayList.get(indexDecodeOpaque8);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static byte[] DecodeOpaque8(JCORefOut dupParam0) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.NotSupportedException, system.ObjectDisposedException, system.RankException, org.bouncycastle.tls.TlsFatalAlert {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            ArrayList<java.lang.Object> resultingArrayList = new ArrayList<java.lang.Object>();
            JCObject resultingObjects = (JCObject)classType.Invoke("DecodeOpaque8", (java.lang.Object)dupParam0.getJCRefOut());
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            byte[] resultingArray = new byte[resultingArrayList.size()];
            for(int indexDecodeOpaque8 = 0; indexDecodeOpaque8 < resultingArrayList.size(); indexDecodeOpaque8++ ) {
				resultingArray[indexDecodeOpaque8] = (byte)resultingArrayList.get(indexDecodeOpaque8);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static byte[] EncodeOpaque16(byte[] buf) throws Throwable, org.bouncycastle.tls.TlsFatalAlert, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.RankException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.ArrayTypeMismatchException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            ArrayList<java.lang.Object> resultingArrayList = new ArrayList<java.lang.Object>();
            JCObject resultingObjects = (JCObject)classType.Invoke("EncodeOpaque16", (java.lang.Object)buf);
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            byte[] resultingArray = new byte[resultingArrayList.size()];
            for(int indexEncodeOpaque16 = 0; indexEncodeOpaque16 < resultingArrayList.size(); indexEncodeOpaque16++ ) {
				resultingArray[indexEncodeOpaque16] = (byte)resultingArrayList.get(indexEncodeOpaque16);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static byte[] EncodeOpaque16(JCORefOut dupParam0) throws Throwable, org.bouncycastle.tls.TlsFatalAlert, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.RankException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.ArrayTypeMismatchException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            ArrayList<java.lang.Object> resultingArrayList = new ArrayList<java.lang.Object>();
            JCObject resultingObjects = (JCObject)classType.Invoke("EncodeOpaque16", (java.lang.Object)dupParam0.getJCRefOut());
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            byte[] resultingArray = new byte[resultingArrayList.size()];
            for(int indexEncodeOpaque16 = 0; indexEncodeOpaque16 < resultingArrayList.size(); indexEncodeOpaque16++ ) {
				resultingArray[indexEncodeOpaque16] = (byte)resultingArrayList.get(indexEncodeOpaque16);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static byte[] EncodeOpaque24(byte[] buf) throws Throwable, org.bouncycastle.tls.TlsFatalAlert, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.RankException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.ArrayTypeMismatchException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            ArrayList<java.lang.Object> resultingArrayList = new ArrayList<java.lang.Object>();
            JCObject resultingObjects = (JCObject)classType.Invoke("EncodeOpaque24", (java.lang.Object)buf);
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            byte[] resultingArray = new byte[resultingArrayList.size()];
            for(int indexEncodeOpaque24 = 0; indexEncodeOpaque24 < resultingArrayList.size(); indexEncodeOpaque24++ ) {
				resultingArray[indexEncodeOpaque24] = (byte)resultingArrayList.get(indexEncodeOpaque24);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static byte[] EncodeOpaque24(JCORefOut dupParam0) throws Throwable, org.bouncycastle.tls.TlsFatalAlert, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.RankException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.ArrayTypeMismatchException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            ArrayList<java.lang.Object> resultingArrayList = new ArrayList<java.lang.Object>();
            JCObject resultingObjects = (JCObject)classType.Invoke("EncodeOpaque24", (java.lang.Object)dupParam0.getJCRefOut());
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            byte[] resultingArray = new byte[resultingArrayList.size()];
            for(int indexEncodeOpaque24 = 0; indexEncodeOpaque24 < resultingArrayList.size(); indexEncodeOpaque24++ ) {
				resultingArray[indexEncodeOpaque24] = (byte)resultingArrayList.get(indexEncodeOpaque24);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static byte[] EncodeOpaque8(byte[] buf) throws Throwable, org.bouncycastle.tls.TlsFatalAlert, system.PlatformNotSupportedException, system.ArgumentNullException, system.RankException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.ArgumentException, system.ArrayTypeMismatchException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            ArrayList<java.lang.Object> resultingArrayList = new ArrayList<java.lang.Object>();
            JCObject resultingObjects = (JCObject)classType.Invoke("EncodeOpaque8", (java.lang.Object)buf);
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            byte[] resultingArray = new byte[resultingArrayList.size()];
            for(int indexEncodeOpaque8 = 0; indexEncodeOpaque8 < resultingArrayList.size(); indexEncodeOpaque8++ ) {
				resultingArray[indexEncodeOpaque8] = (byte)resultingArrayList.get(indexEncodeOpaque8);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static byte[] EncodeOpaque8(JCORefOut dupParam0) throws Throwable, org.bouncycastle.tls.TlsFatalAlert, system.PlatformNotSupportedException, system.ArgumentNullException, system.RankException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.ArgumentException, system.ArrayTypeMismatchException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            ArrayList<java.lang.Object> resultingArrayList = new ArrayList<java.lang.Object>();
            JCObject resultingObjects = (JCObject)classType.Invoke("EncodeOpaque8", (java.lang.Object)dupParam0.getJCRefOut());
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            byte[] resultingArray = new byte[resultingArrayList.size()];
            for(int indexEncodeOpaque8 = 0; indexEncodeOpaque8 < resultingArrayList.size(); indexEncodeOpaque8++ ) {
				resultingArray[indexEncodeOpaque8] = (byte)resultingArrayList.get(indexEncodeOpaque8);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static byte[] EncodeUint16(int u16) throws Throwable, org.bouncycastle.tls.TlsFatalAlert {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            ArrayList<java.lang.Object> resultingArrayList = new ArrayList<java.lang.Object>();
            JCObject resultingObjects = (JCObject)classType.Invoke("EncodeUint16", u16);
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            byte[] resultingArray = new byte[resultingArrayList.size()];
            for(int indexEncodeUint16 = 0; indexEncodeUint16 < resultingArrayList.size(); indexEncodeUint16++ ) {
				resultingArray[indexEncodeUint16] = (byte)resultingArrayList.get(indexEncodeUint16);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static byte[] EncodeUint16ArrayWithUint16Length(int[] u16s) throws Throwable, org.bouncycastle.tls.TlsFatalAlert {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            ArrayList<java.lang.Object> resultingArrayList = new ArrayList<java.lang.Object>();
            JCObject resultingObjects = (JCObject)classType.Invoke("EncodeUint16ArrayWithUint16Length", (java.lang.Object)u16s);
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            byte[] resultingArray = new byte[resultingArrayList.size()];
            for(int indexEncodeUint16ArrayWithUint16Length = 0; indexEncodeUint16ArrayWithUint16Length < resultingArrayList.size(); indexEncodeUint16ArrayWithUint16Length++ ) {
				resultingArray[indexEncodeUint16ArrayWithUint16Length] = (byte)resultingArrayList.get(indexEncodeUint16ArrayWithUint16Length);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static byte[] EncodeUint16ArrayWithUint16Length(JCORefOut dupParam0) throws Throwable, org.bouncycastle.tls.TlsFatalAlert {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            ArrayList<java.lang.Object> resultingArrayList = new ArrayList<java.lang.Object>();
            JCObject resultingObjects = (JCObject)classType.Invoke("EncodeUint16ArrayWithUint16Length", (java.lang.Object)dupParam0.getJCRefOut());
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            byte[] resultingArray = new byte[resultingArrayList.size()];
            for(int indexEncodeUint16ArrayWithUint16Length = 0; indexEncodeUint16ArrayWithUint16Length < resultingArrayList.size(); indexEncodeUint16ArrayWithUint16Length++ ) {
				resultingArray[indexEncodeUint16ArrayWithUint16Length] = (byte)resultingArrayList.get(indexEncodeUint16ArrayWithUint16Length);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static byte[] EncodeUint24(int u24) throws Throwable, org.bouncycastle.tls.TlsFatalAlert {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            ArrayList<java.lang.Object> resultingArrayList = new ArrayList<java.lang.Object>();
            JCObject resultingObjects = (JCObject)classType.Invoke("EncodeUint24", u24);
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            byte[] resultingArray = new byte[resultingArrayList.size()];
            for(int indexEncodeUint24 = 0; indexEncodeUint24 < resultingArrayList.size(); indexEncodeUint24++ ) {
				resultingArray[indexEncodeUint24] = (byte)resultingArrayList.get(indexEncodeUint24);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static byte[] EncodeUint32(long u32) throws Throwable, org.bouncycastle.tls.TlsFatalAlert {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            ArrayList<java.lang.Object> resultingArrayList = new ArrayList<java.lang.Object>();
            JCObject resultingObjects = (JCObject)classType.Invoke("EncodeUint32", u32);
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            byte[] resultingArray = new byte[resultingArrayList.size()];
            for(int indexEncodeUint32 = 0; indexEncodeUint32 < resultingArrayList.size(); indexEncodeUint32++ ) {
				resultingArray[indexEncodeUint32] = (byte)resultingArrayList.get(indexEncodeUint32);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static byte[] EncodeUint8(short u8) throws Throwable, org.bouncycastle.tls.TlsFatalAlert {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            ArrayList<java.lang.Object> resultingArrayList = new ArrayList<java.lang.Object>();
            JCObject resultingObjects = (JCObject)classType.Invoke("EncodeUint8", u8);
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            byte[] resultingArray = new byte[resultingArrayList.size()];
            for(int indexEncodeUint8 = 0; indexEncodeUint8 < resultingArrayList.size(); indexEncodeUint8++ ) {
				resultingArray[indexEncodeUint8] = (byte)resultingArrayList.get(indexEncodeUint8);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static byte[] EncodeUint8ArrayWithUint8Length(short[] u8s) throws Throwable, org.bouncycastle.tls.TlsFatalAlert {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            ArrayList<java.lang.Object> resultingArrayList = new ArrayList<java.lang.Object>();
            JCObject resultingObjects = (JCObject)classType.Invoke("EncodeUint8ArrayWithUint8Length", (java.lang.Object)u8s);
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            byte[] resultingArray = new byte[resultingArrayList.size()];
            for(int indexEncodeUint8ArrayWithUint8Length = 0; indexEncodeUint8ArrayWithUint8Length < resultingArrayList.size(); indexEncodeUint8ArrayWithUint8Length++ ) {
				resultingArray[indexEncodeUint8ArrayWithUint8Length] = (byte)resultingArrayList.get(indexEncodeUint8ArrayWithUint8Length);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static byte[] EncodeUint8ArrayWithUint8Length(JCORefOut dupParam0) throws Throwable, org.bouncycastle.tls.TlsFatalAlert {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            ArrayList<java.lang.Object> resultingArrayList = new ArrayList<java.lang.Object>();
            JCObject resultingObjects = (JCObject)classType.Invoke("EncodeUint8ArrayWithUint8Length", (java.lang.Object)dupParam0.getJCRefOut());
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            byte[] resultingArray = new byte[resultingArrayList.size()];
            for(int indexEncodeUint8ArrayWithUint8Length = 0; indexEncodeUint8ArrayWithUint8Length < resultingArrayList.size(); indexEncodeUint8ArrayWithUint8Length++ ) {
				resultingArray[indexEncodeUint8ArrayWithUint8Length] = (byte)resultingArrayList.get(indexEncodeUint8ArrayWithUint8Length);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static byte[] EncodeVersion(ProtocolVersion version) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            ArrayList<java.lang.Object> resultingArrayList = new ArrayList<java.lang.Object>();
            JCObject resultingObjects = (JCObject)classType.Invoke("EncodeVersion", version == null ? null : version.getJCOInstance());
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            byte[] resultingArray = new byte[resultingArrayList.size()];
            for(int indexEncodeVersion = 0; indexEncodeVersion < resultingArrayList.size(); indexEncodeVersion++ ) {
				resultingArray[indexEncodeVersion] = (byte)resultingArrayList.get(indexEncodeVersion);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static byte[] GetExtensionData(IDictionary extensions, int extensionType) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            ArrayList<java.lang.Object> resultingArrayList = new ArrayList<java.lang.Object>();
            JCObject resultingObjects = (JCObject)classType.Invoke("GetExtensionData", extensions == null ? null : extensions.getJCOInstance(), extensionType);
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            byte[] resultingArray = new byte[resultingArrayList.size()];
            for(int indexGetExtensionData = 0; indexGetExtensionData < resultingArrayList.size(); indexGetExtensionData++ ) {
				resultingArray[indexGetExtensionData] = (byte)resultingArrayList.get(indexGetExtensionData);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static byte[] ReadAllOrNothing(int length, Stream input) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.ObjectDisposedException, system.io.EndOfStreamException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            ArrayList<java.lang.Object> resultingArrayList = new ArrayList<java.lang.Object>();
            JCObject resultingObjects = (JCObject)classType.Invoke("ReadAllOrNothing", length, input == null ? null : input.getJCOInstance());
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            byte[] resultingArray = new byte[resultingArrayList.size()];
            for(int indexReadAllOrNothing = 0; indexReadAllOrNothing < resultingArrayList.size(); indexReadAllOrNothing++ ) {
				resultingArray[indexReadAllOrNothing] = (byte)resultingArrayList.get(indexReadAllOrNothing);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static byte[] ReadFully(int length, Stream input) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.ObjectDisposedException, system.io.EndOfStreamException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            ArrayList<java.lang.Object> resultingArrayList = new ArrayList<java.lang.Object>();
            JCObject resultingObjects = (JCObject)classType.Invoke("ReadFully", length, input == null ? null : input.getJCOInstance());
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            byte[] resultingArray = new byte[resultingArrayList.size()];
            for(int indexReadFully = 0; indexReadFully < resultingArrayList.size(); indexReadFully++ ) {
				resultingArray[indexReadFully] = (byte)resultingArrayList.get(indexReadFully);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static byte[] ReadOpaque16(Stream input, int minLength) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.NotSupportedException, system.ObjectDisposedException, system.RankException, system.io.EndOfStreamException, org.bouncycastle.tls.TlsFatalAlert {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            ArrayList<java.lang.Object> resultingArrayList = new ArrayList<java.lang.Object>();
            JCObject resultingObjects = (JCObject)classType.Invoke("ReadOpaque16", input == null ? null : input.getJCOInstance(), minLength);
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            byte[] resultingArray = new byte[resultingArrayList.size()];
            for(int indexReadOpaque16 = 0; indexReadOpaque16 < resultingArrayList.size(); indexReadOpaque16++ ) {
				resultingArray[indexReadOpaque16] = (byte)resultingArrayList.get(indexReadOpaque16);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static byte[] ReadOpaque16(Stream input) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.NotSupportedException, system.ObjectDisposedException, system.RankException, system.io.EndOfStreamException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            ArrayList<java.lang.Object> resultingArrayList = new ArrayList<java.lang.Object>();
            JCObject resultingObjects = (JCObject)classType.Invoke("ReadOpaque16", input == null ? null : input.getJCOInstance());
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            byte[] resultingArray = new byte[resultingArrayList.size()];
            for(int indexReadOpaque16 = 0; indexReadOpaque16 < resultingArrayList.size(); indexReadOpaque16++ ) {
				resultingArray[indexReadOpaque16] = (byte)resultingArrayList.get(indexReadOpaque16);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static byte[] ReadOpaque24(Stream input, int minLength) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.NotSupportedException, system.ObjectDisposedException, system.RankException, system.io.EndOfStreamException, org.bouncycastle.tls.TlsFatalAlert {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            ArrayList<java.lang.Object> resultingArrayList = new ArrayList<java.lang.Object>();
            JCObject resultingObjects = (JCObject)classType.Invoke("ReadOpaque24", input == null ? null : input.getJCOInstance(), minLength);
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            byte[] resultingArray = new byte[resultingArrayList.size()];
            for(int indexReadOpaque24 = 0; indexReadOpaque24 < resultingArrayList.size(); indexReadOpaque24++ ) {
				resultingArray[indexReadOpaque24] = (byte)resultingArrayList.get(indexReadOpaque24);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static byte[] ReadOpaque24(Stream input) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.NotSupportedException, system.ObjectDisposedException, system.RankException, system.io.EndOfStreamException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            ArrayList<java.lang.Object> resultingArrayList = new ArrayList<java.lang.Object>();
            JCObject resultingObjects = (JCObject)classType.Invoke("ReadOpaque24", input == null ? null : input.getJCOInstance());
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            byte[] resultingArray = new byte[resultingArrayList.size()];
            for(int indexReadOpaque24 = 0; indexReadOpaque24 < resultingArrayList.size(); indexReadOpaque24++ ) {
				resultingArray[indexReadOpaque24] = (byte)resultingArrayList.get(indexReadOpaque24);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static byte[] ReadOpaque8(Stream input, int minLength, int maxLength) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.NotSupportedException, system.ObjectDisposedException, system.RankException, system.io.EndOfStreamException, org.bouncycastle.tls.TlsFatalAlert {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            ArrayList<java.lang.Object> resultingArrayList = new ArrayList<java.lang.Object>();
            JCObject resultingObjects = (JCObject)classType.Invoke("ReadOpaque8", input == null ? null : input.getJCOInstance(), minLength, maxLength);
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            byte[] resultingArray = new byte[resultingArrayList.size()];
            for(int indexReadOpaque8 = 0; indexReadOpaque8 < resultingArrayList.size(); indexReadOpaque8++ ) {
				resultingArray[indexReadOpaque8] = (byte)resultingArrayList.get(indexReadOpaque8);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static byte[] ReadOpaque8(Stream input, int minLength) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.NotSupportedException, system.ObjectDisposedException, system.RankException, system.io.EndOfStreamException, org.bouncycastle.tls.TlsFatalAlert {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            ArrayList<java.lang.Object> resultingArrayList = new ArrayList<java.lang.Object>();
            JCObject resultingObjects = (JCObject)classType.Invoke("ReadOpaque8", input == null ? null : input.getJCOInstance(), minLength);
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            byte[] resultingArray = new byte[resultingArrayList.size()];
            for(int indexReadOpaque8 = 0; indexReadOpaque8 < resultingArrayList.size(); indexReadOpaque8++ ) {
				resultingArray[indexReadOpaque8] = (byte)resultingArrayList.get(indexReadOpaque8);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static byte[] ReadOpaque8(Stream input) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.NotSupportedException, system.ObjectDisposedException, system.RankException, system.io.EndOfStreamException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            ArrayList<java.lang.Object> resultingArrayList = new ArrayList<java.lang.Object>();
            JCObject resultingObjects = (JCObject)classType.Invoke("ReadOpaque8", input == null ? null : input.getJCOInstance());
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            byte[] resultingArray = new byte[resultingArrayList.size()];
            for(int indexReadOpaque8 = 0; indexReadOpaque8 < resultingArrayList.size(); indexReadOpaque8++ ) {
				resultingArray[indexReadOpaque8] = (byte)resultingArrayList.get(indexReadOpaque8);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static short DecodeUint8(byte[] buf) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.ObjectDisposedException, org.bouncycastle.tls.TlsFatalAlert {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (short)classType.Invoke("DecodeUint8", (java.lang.Object)buf);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static short DecodeUint8(JCORefOut dupParam0) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.ObjectDisposedException, org.bouncycastle.tls.TlsFatalAlert {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (short)classType.Invoke("DecodeUint8", (java.lang.Object)dupParam0.getJCRefOut());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static short GetLegacyClientCertType(short signatureAlgorithm) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (short)classType.Invoke("GetLegacyClientCertType", signatureAlgorithm);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static short GetLegacySignatureAlgorithmClient(short clientCertificateType) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (short)classType.Invoke("GetLegacySignatureAlgorithmClient", clientCertificateType);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static short GetLegacySignatureAlgorithmClientCert(short clientCertificateType) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (short)classType.Invoke("GetLegacySignatureAlgorithmClientCert", clientCertificateType);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static short GetLegacySignatureAlgorithmServer(int keyExchangeAlgorithm) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (short)classType.Invoke("GetLegacySignatureAlgorithmServer", keyExchangeAlgorithm);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static short GetLegacySignatureAlgorithmServerCert(int keyExchangeAlgorithm) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (short)classType.Invoke("GetLegacySignatureAlgorithmServerCert", keyExchangeAlgorithm);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static short ReadUint8(byte[] buf, int offset) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (short)classType.Invoke("ReadUint8", buf, offset);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static short ReadUint8(JCORefOut dupParam0, int dupParam1) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (short)classType.Invoke("ReadUint8", dupParam0.getJCRefOut(), dupParam1);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static short ReadUint8(Stream input) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.ObjectDisposedException, system.io.EndOfStreamException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (short)classType.Invoke("ReadUint8", input == null ? null : input.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static short[] DecodeUint8ArrayWithUint8Length(byte[] buf) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.ObjectDisposedException, org.bouncycastle.tls.TlsFatalAlert {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            ArrayList<java.lang.Object> resultingArrayList = new ArrayList<java.lang.Object>();
            JCObject resultingObjects = (JCObject)classType.Invoke("DecodeUint8ArrayWithUint8Length", (java.lang.Object)buf);
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            short[] resultingArray = new short[resultingArrayList.size()];
            for(int indexDecodeUint8ArrayWithUint8Length = 0; indexDecodeUint8ArrayWithUint8Length < resultingArrayList.size(); indexDecodeUint8ArrayWithUint8Length++ ) {
				resultingArray[indexDecodeUint8ArrayWithUint8Length] = (short)resultingArrayList.get(indexDecodeUint8ArrayWithUint8Length);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static short[] DecodeUint8ArrayWithUint8Length(JCORefOut dupParam0) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.ObjectDisposedException, org.bouncycastle.tls.TlsFatalAlert {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            ArrayList<java.lang.Object> resultingArrayList = new ArrayList<java.lang.Object>();
            JCObject resultingObjects = (JCObject)classType.Invoke("DecodeUint8ArrayWithUint8Length", (java.lang.Object)dupParam0.getJCRefOut());
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            short[] resultingArray = new short[resultingArrayList.size()];
            for(int indexDecodeUint8ArrayWithUint8Length = 0; indexDecodeUint8ArrayWithUint8Length < resultingArrayList.size(); indexDecodeUint8ArrayWithUint8Length++ ) {
				resultingArray[indexDecodeUint8ArrayWithUint8Length] = (short)resultingArrayList.get(indexDecodeUint8ArrayWithUint8Length);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static short[] ReadUint8Array(int count, Stream input) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.NotSupportedException, system.ObjectDisposedException, system.RankException, system.io.EndOfStreamException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            ArrayList<java.lang.Object> resultingArrayList = new ArrayList<java.lang.Object>();
            JCObject resultingObjects = (JCObject)classType.Invoke("ReadUint8Array", count, input == null ? null : input.getJCOInstance());
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            short[] resultingArray = new short[resultingArrayList.size()];
            for(int indexReadUint8Array = 0; indexReadUint8Array < resultingArrayList.size(); indexReadUint8Array++ ) {
				resultingArray[indexReadUint8Array] = (short)resultingArrayList.get(indexReadUint8Array);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static short[] ReadUint8ArrayWithUint8Length(Stream input, int minLength) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.NotSupportedException, system.ObjectDisposedException, system.RankException, system.io.EndOfStreamException, org.bouncycastle.tls.TlsFatalAlert {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            ArrayList<java.lang.Object> resultingArrayList = new ArrayList<java.lang.Object>();
            JCObject resultingObjects = (JCObject)classType.Invoke("ReadUint8ArrayWithUint8Length", input == null ? null : input.getJCOInstance(), minLength);
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            short[] resultingArray = new short[resultingArrayList.size()];
            for(int indexReadUint8ArrayWithUint8Length = 0; indexReadUint8ArrayWithUint8Length < resultingArrayList.size(); indexReadUint8ArrayWithUint8Length++ ) {
				resultingArray[indexReadUint8ArrayWithUint8Length] = (short)resultingArrayList.get(indexReadUint8ArrayWithUint8Length);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int DecodeUint16(byte[] buf) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.ObjectDisposedException, org.bouncycastle.tls.TlsFatalAlert {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (int)classType.Invoke("DecodeUint16", (java.lang.Object)buf);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int DecodeUint16(JCORefOut dupParam0) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.ObjectDisposedException, org.bouncycastle.tls.TlsFatalAlert {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (int)classType.Invoke("DecodeUint16", (java.lang.Object)dupParam0.getJCRefOut());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int GetCipherType(int cipherSuite) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (int)classType.Invoke("GetCipherType", cipherSuite);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int GetCommonCipherSuite13(ProtocolVersion negotiatedVersion, int[] peerCipherSuites, int[] localCipherSuites, boolean useLocalOrder) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (int)classType.Invoke("GetCommonCipherSuite13", negotiatedVersion == null ? null : negotiatedVersion.getJCOInstance(), peerCipherSuites, localCipherSuites, useLocalOrder);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int GetCommonCipherSuite13(ProtocolVersion dupParam0, JCORefOut dupParam1, JCORefOut dupParam2, boolean dupParam3) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (int)classType.Invoke("GetCommonCipherSuite13", dupParam0 == null ? null : dupParam0.getJCOInstance(), dupParam1.getJCRefOut(), dupParam2.getJCRefOut(), dupParam3);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int GetEncryptionAlgorithm(int cipherSuite) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (int)classType.Invoke("GetEncryptionAlgorithm", cipherSuite);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int GetEncryptionAlgorithmType(int encryptionAlgorithm) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (int)classType.Invoke("GetEncryptionAlgorithmType", encryptionAlgorithm);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int GetKeyExchangeAlgorithm(int cipherSuite) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (int)classType.Invoke("GetKeyExchangeAlgorithm", cipherSuite);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int GetMacAlgorithm(int cipherSuite) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (int)classType.Invoke("GetMacAlgorithm", cipherSuite);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int ReadInt32(byte[] buf, int offset) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (int)classType.Invoke("ReadInt32", buf, offset);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int ReadInt32(JCORefOut dupParam0, int dupParam1) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (int)classType.Invoke("ReadInt32", dupParam0.getJCRefOut(), dupParam1);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int ReadUint16(byte[] buf, int offset) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (int)classType.Invoke("ReadUint16", buf, offset);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int ReadUint16(JCORefOut dupParam0, int dupParam1) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (int)classType.Invoke("ReadUint16", dupParam0.getJCRefOut(), dupParam1);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int ReadUint16(Stream input) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.ObjectDisposedException, system.io.EndOfStreamException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (int)classType.Invoke("ReadUint16", input == null ? null : input.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int ReadUint24(byte[] buf, int offset) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (int)classType.Invoke("ReadUint24", buf, offset);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int ReadUint24(JCORefOut dupParam0, int dupParam1) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (int)classType.Invoke("ReadUint24", dupParam0.getJCRefOut(), dupParam1);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int ReadUint24(Stream input) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.ObjectDisposedException, system.io.EndOfStreamException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (int)classType.Invoke("ReadUint24", input == null ? null : input.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int[] GetCommonCipherSuites(int[] peerCipherSuites, int[] localCipherSuites, boolean useLocalOrder) throws Throwable, system.PlatformNotSupportedException, system.ArgumentNullException, system.RankException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.ArgumentException, system.ArrayTypeMismatchException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            ArrayList<java.lang.Object> resultingArrayList = new ArrayList<java.lang.Object>();
            JCObject resultingObjects = (JCObject)classType.Invoke("GetCommonCipherSuites", peerCipherSuites, localCipherSuites, useLocalOrder);
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            int[] resultingArray = new int[resultingArrayList.size()];
            for(int indexGetCommonCipherSuites = 0; indexGetCommonCipherSuites < resultingArrayList.size(); indexGetCommonCipherSuites++ ) {
				resultingArray[indexGetCommonCipherSuites] = (int)resultingArrayList.get(indexGetCommonCipherSuites);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int[] GetCommonCipherSuites(JCORefOut dupParam0, JCORefOut dupParam1, boolean dupParam2) throws Throwable, system.PlatformNotSupportedException, system.ArgumentNullException, system.RankException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.ArgumentException, system.ArrayTypeMismatchException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            ArrayList<java.lang.Object> resultingArrayList = new ArrayList<java.lang.Object>();
            JCObject resultingObjects = (JCObject)classType.Invoke("GetCommonCipherSuites", dupParam0.getJCRefOut(), dupParam1.getJCRefOut(), dupParam2);
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            int[] resultingArray = new int[resultingArrayList.size()];
            for(int indexGetCommonCipherSuites = 0; indexGetCommonCipherSuites < resultingArrayList.size(); indexGetCommonCipherSuites++ ) {
				resultingArray[indexGetCommonCipherSuites] = (int)resultingArrayList.get(indexGetCommonCipherSuites);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int[] GetSupportedCipherSuites(TlsCrypto crypto, int[] suites, int suitesOff, int suitesCount) throws Throwable, system.PlatformNotSupportedException, system.ArgumentNullException, system.RankException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.ArgumentException, system.ArrayTypeMismatchException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            ArrayList<java.lang.Object> resultingArrayList = new ArrayList<java.lang.Object>();
            JCObject resultingObjects = (JCObject)classType.Invoke("GetSupportedCipherSuites", crypto == null ? null : crypto.getJCOInstance(), suites, suitesOff, suitesCount);
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            int[] resultingArray = new int[resultingArrayList.size()];
            for(int indexGetSupportedCipherSuites = 0; indexGetSupportedCipherSuites < resultingArrayList.size(); indexGetSupportedCipherSuites++ ) {
				resultingArray[indexGetSupportedCipherSuites] = (int)resultingArrayList.get(indexGetSupportedCipherSuites);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int[] GetSupportedCipherSuites(TlsCrypto dupParam0, JCORefOut dupParam1, int dupParam2, int dupParam3) throws Throwable, system.PlatformNotSupportedException, system.ArgumentNullException, system.RankException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.ArgumentException, system.ArrayTypeMismatchException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            ArrayList<java.lang.Object> resultingArrayList = new ArrayList<java.lang.Object>();
            JCObject resultingObjects = (JCObject)classType.Invoke("GetSupportedCipherSuites", dupParam0 == null ? null : dupParam0.getJCOInstance(), dupParam1.getJCRefOut(), dupParam2, dupParam3);
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            int[] resultingArray = new int[resultingArrayList.size()];
            for(int indexGetSupportedCipherSuites = 0; indexGetSupportedCipherSuites < resultingArrayList.size(); indexGetSupportedCipherSuites++ ) {
				resultingArray[indexGetSupportedCipherSuites] = (int)resultingArrayList.get(indexGetSupportedCipherSuites);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int[] GetSupportedCipherSuites(TlsCrypto crypto, int[] suites) throws Throwable, system.PlatformNotSupportedException, system.ArgumentNullException, system.RankException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.ArgumentException, system.ArrayTypeMismatchException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            ArrayList<java.lang.Object> resultingArrayList = new ArrayList<java.lang.Object>();
            JCObject resultingObjects = (JCObject)classType.Invoke("GetSupportedCipherSuites", crypto == null ? null : crypto.getJCOInstance(), suites);
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            int[] resultingArray = new int[resultingArrayList.size()];
            for(int indexGetSupportedCipherSuites = 0; indexGetSupportedCipherSuites < resultingArrayList.size(); indexGetSupportedCipherSuites++ ) {
				resultingArray[indexGetSupportedCipherSuites] = (int)resultingArrayList.get(indexGetSupportedCipherSuites);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int[] GetSupportedCipherSuites(TlsCrypto dupParam0, JCORefOut dupParam1) throws Throwable, system.PlatformNotSupportedException, system.ArgumentNullException, system.RankException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.ArgumentException, system.ArrayTypeMismatchException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            ArrayList<java.lang.Object> resultingArrayList = new ArrayList<java.lang.Object>();
            JCObject resultingObjects = (JCObject)classType.Invoke("GetSupportedCipherSuites", dupParam0 == null ? null : dupParam0.getJCOInstance(), dupParam1.getJCRefOut());
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            int[] resultingArray = new int[resultingArrayList.size()];
            for(int indexGetSupportedCipherSuites = 0; indexGetSupportedCipherSuites < resultingArrayList.size(); indexGetSupportedCipherSuites++ ) {
				resultingArray[indexGetSupportedCipherSuites] = (int)resultingArrayList.get(indexGetSupportedCipherSuites);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static int[] ReadUint16Array(int count, Stream input) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.NotSupportedException, system.ObjectDisposedException, system.RankException, system.io.EndOfStreamException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            ArrayList<java.lang.Object> resultingArrayList = new ArrayList<java.lang.Object>();
            JCObject resultingObjects = (JCObject)classType.Invoke("ReadUint16Array", count, input == null ? null : input.getJCOInstance());
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            int[] resultingArray = new int[resultingArrayList.size()];
            for(int indexReadUint16Array = 0; indexReadUint16Array < resultingArrayList.size(); indexReadUint16Array++ ) {
				resultingArray[indexReadUint16Array] = (int)resultingArrayList.get(indexReadUint16Array);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static long DecodeUint32(byte[] buf) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.ObjectDisposedException, org.bouncycastle.tls.TlsFatalAlert {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (long)classType.Invoke("DecodeUint32", (java.lang.Object)buf);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static long DecodeUint32(JCORefOut dupParam0) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.ObjectDisposedException, org.bouncycastle.tls.TlsFatalAlert {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (long)classType.Invoke("DecodeUint32", (java.lang.Object)dupParam0.getJCRefOut());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static long ReadUint32(byte[] buf, int offset) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (long)classType.Invoke("ReadUint32", buf, offset);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static long ReadUint32(JCORefOut dupParam0, int dupParam1) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (long)classType.Invoke("ReadUint32", dupParam0.getJCRefOut(), dupParam1);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static long ReadUint32(Stream input) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.ObjectDisposedException, system.io.EndOfStreamException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (long)classType.Invoke("ReadUint32", input == null ? null : input.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static long ReadUint48(byte[] buf, int offset) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (long)classType.Invoke("ReadUint48", buf, offset);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static long ReadUint48(JCORefOut dupParam0, int dupParam1) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (long)classType.Invoke("ReadUint48", dupParam0.getJCRefOut(), dupParam1);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static long ReadUint48(Stream input) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.NotSupportedException, system.ObjectDisposedException, system.RankException, system.io.EndOfStreamException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            return (long)classType.Invoke("ReadUint48", input == null ? null : input.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Asn1Object ReadAsn1Object(byte[] encoding) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.NotSupportedException, system.ObjectDisposedException, system.RankException, system.io.IOException, system.io.EndOfStreamException, org.bouncycastle.asn1.Asn1Exception, org.bouncycastle.asn1.Asn1ParsingException, org.bouncycastle.tls.TlsFatalAlert {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objReadAsn1Object = (JCObject)classType.Invoke("ReadAsn1Object", (java.lang.Object)encoding);
            return new Asn1Object(objReadAsn1Object);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Asn1Object ReadAsn1Object(JCORefOut dupParam0) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.NotSupportedException, system.ObjectDisposedException, system.RankException, system.io.IOException, system.io.EndOfStreamException, org.bouncycastle.asn1.Asn1Exception, org.bouncycastle.asn1.Asn1ParsingException, org.bouncycastle.tls.TlsFatalAlert {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objReadAsn1Object = (JCObject)classType.Invoke("ReadAsn1Object", (java.lang.Object)dupParam0.getJCRefOut());
            return new Asn1Object(objReadAsn1Object);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Asn1Object ReadDerObject(byte[] encoding) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.io.IOException, system.io.EndOfStreamException, org.bouncycastle.asn1.Asn1Exception, org.bouncycastle.asn1.Asn1ParsingException, org.bouncycastle.tls.TlsFatalAlert {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objReadDerObject = (JCObject)classType.Invoke("ReadDerObject", (java.lang.Object)encoding);
            return new Asn1Object(objReadDerObject);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static Asn1Object ReadDerObject(JCORefOut dupParam0) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.io.IOException, system.io.EndOfStreamException, org.bouncycastle.asn1.Asn1Exception, org.bouncycastle.asn1.Asn1ParsingException, org.bouncycastle.tls.TlsFatalAlert {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objReadDerObject = (JCObject)classType.Invoke("ReadDerObject", (java.lang.Object)dupParam0.getJCRefOut());
            return new Asn1Object(objReadDerObject);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static DerObjectIdentifier GetOidForHashAlgorithm(short hashAlgorithm) throws Throwable, system.PlatformNotSupportedException, system.IndexOutOfRangeException, system.InvalidOperationException, system.ArgumentException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objGetOidForHashAlgorithm = (JCObject)classType.Invoke("GetOidForHashAlgorithm", hashAlgorithm);
            return new DerObjectIdentifier(objGetOidForHashAlgorithm);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static TlsSecret GenerateEncryptedPreMasterSecret(TlsContext context, TlsEncryptor encryptor, Stream output) throws Throwable, org.bouncycastle.tls.TlsFatalAlert {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objGenerateEncryptedPreMasterSecret = (JCObject)classType.Invoke("GenerateEncryptedPreMasterSecret", context == null ? null : context.getJCOInstance(), encryptor == null ? null : encryptor.getJCOInstance(), output == null ? null : output.getJCOInstance());
            return new TlsSecretImplementation(objGenerateEncryptedPreMasterSecret);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static TlsSecret Prf(SecurityParameters securityParameters, TlsSecret secret, java.lang.String asciiLabel, byte[] seed, int length) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objPrf = (JCObject)classType.Invoke("Prf", securityParameters == null ? null : securityParameters.getJCOInstance(), secret == null ? null : secret.getJCOInstance(), asciiLabel, seed, length);
            return new TlsSecretImplementation(objPrf);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static TlsSecret Prf(SecurityParameters dupParam0, TlsSecret dupParam1, java.lang.String dupParam2, JCORefOut dupParam3, int dupParam4) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objPrf = (JCObject)classType.Invoke("Prf", dupParam0 == null ? null : dupParam0.getJCOInstance(), dupParam1 == null ? null : dupParam1.getJCOInstance(), dupParam2, dupParam3.getJCRefOut(), dupParam4);
            return new TlsSecretImplementation(objPrf);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static ProtocolVersion GetMinimumVersion(int cipherSuite) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objGetMinimumVersion = (JCObject)classType.Invoke("GetMinimumVersion", cipherSuite);
            return new ProtocolVersion(objGetMinimumVersion);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static ProtocolVersion ReadVersion(byte[] buf, int offset) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.globalization.CultureNotFoundException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objReadVersion = (JCObject)classType.Invoke("ReadVersion", buf, offset);
            return new ProtocolVersion(objReadVersion);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static ProtocolVersion ReadVersion(JCORefOut dupParam0, int dupParam1) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.globalization.CultureNotFoundException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objReadVersion = (JCObject)classType.Invoke("ReadVersion", dupParam0.getJCRefOut(), dupParam1);
            return new ProtocolVersion(objReadVersion);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static ProtocolVersion ReadVersion(Stream input) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.ObjectDisposedException, system.io.EndOfStreamException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objReadVersion = (JCObject)classType.Invoke("ReadVersion", input == null ? null : input.getJCOInstance());
            return new ProtocolVersion(objReadVersion);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static SignatureAndHashAlgorithm ChooseSignatureAndHashAlgorithm(ProtocolVersion negotiatedVersion, IList sigHashAlgs, short signatureAlgorithm) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, org.bouncycastle.tls.TlsFatalAlert {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objChooseSignatureAndHashAlgorithm = (JCObject)classType.Invoke("ChooseSignatureAndHashAlgorithm", negotiatedVersion == null ? null : negotiatedVersion.getJCOInstance(), sigHashAlgs == null ? null : sigHashAlgs.getJCOInstance(), signatureAlgorithm);
            return new SignatureAndHashAlgorithm(objChooseSignatureAndHashAlgorithm);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static SignatureAndHashAlgorithm ChooseSignatureAndHashAlgorithm(TlsContext context, IList sigHashAlgs, short signatureAlgorithm) throws Throwable, system.ArgumentException, system.NotSupportedException, system.ArgumentNullException, system.FormatException, system.ArgumentOutOfRangeException, org.bouncycastle.tls.TlsFatalAlert {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objChooseSignatureAndHashAlgorithm = (JCObject)classType.Invoke("ChooseSignatureAndHashAlgorithm", context == null ? null : context.getJCOInstance(), sigHashAlgs == null ? null : sigHashAlgs.getJCOInstance(), signatureAlgorithm);
            return new SignatureAndHashAlgorithm(objChooseSignatureAndHashAlgorithm);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static SignatureAndHashAlgorithm GetDefaultSignatureAlgorithm(short signatureAlgorithm) throws Throwable, system.ArgumentException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objGetDefaultSignatureAlgorithm = (JCObject)classType.Invoke("GetDefaultSignatureAlgorithm", signatureAlgorithm);
            return new SignatureAndHashAlgorithm(objGetDefaultSignatureAlgorithm);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static SignatureAndHashAlgorithm GetSignatureAndHashAlgorithm(TlsContext context, TlsCredentialedSigner signerCredentials) throws Throwable, org.bouncycastle.tls.TlsFatalAlert {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objGetSignatureAndHashAlgorithm = (JCObject)classType.Invoke("GetSignatureAndHashAlgorithm", context == null ? null : context.getJCOInstance(), signerCredentials == null ? null : signerCredentials.getJCOInstance());
            return new SignatureAndHashAlgorithm(objGetSignatureAndHashAlgorithm);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static TlsSession ImportSession(byte[] sessionID, SessionParameters sessionParameters) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.NotSupportedException, system.ObjectDisposedException, system.RankException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objImportSession = (JCObject)classType.Invoke("ImportSession", sessionID, sessionParameters == null ? null : sessionParameters.getJCOInstance());
            return new TlsSessionImplementation(objImportSession);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static TlsSession ImportSession(JCORefOut dupParam0, SessionParameters dupParam1) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.NotSupportedException, system.ObjectDisposedException, system.RankException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objImportSession = (JCObject)classType.Invoke("ImportSession", dupParam0.getJCRefOut(), dupParam1 == null ? null : dupParam1.getJCOInstance());
            return new TlsSessionImplementation(objImportSession);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static IList GetDefaultDssSignatureAlgorithms() throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objGetDefaultDssSignatureAlgorithms = (JCObject)classType.Invoke("GetDefaultDssSignatureAlgorithms");
            return new IListImplementation(objGetDefaultDssSignatureAlgorithms);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static IList GetDefaultECDsaSignatureAlgorithms() throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objGetDefaultECDsaSignatureAlgorithms = (JCObject)classType.Invoke("GetDefaultECDsaSignatureAlgorithms");
            return new IListImplementation(objGetDefaultECDsaSignatureAlgorithms);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static IList GetDefaultRsaSignatureAlgorithms() throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objGetDefaultRsaSignatureAlgorithms = (JCObject)classType.Invoke("GetDefaultRsaSignatureAlgorithms");
            return new IListImplementation(objGetDefaultRsaSignatureAlgorithms);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static IList GetDefaultSignatureAlgorithms(short signatureAlgorithm) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objGetDefaultSignatureAlgorithms = (JCObject)classType.Invoke("GetDefaultSignatureAlgorithms", signatureAlgorithm);
            return new IListImplementation(objGetDefaultSignatureAlgorithms);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static IList GetDefaultSupportedSignatureAlgorithms(TlsContext context) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.NotSupportedException, system.ObjectDisposedException, system.RankException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objGetDefaultSupportedSignatureAlgorithms = (JCObject)classType.Invoke("GetDefaultSupportedSignatureAlgorithms", context == null ? null : context.getJCOInstance());
            return new IListImplementation(objGetDefaultSupportedSignatureAlgorithms);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static IList GetKeyExchangeAlgorithms(int[] cipherSuites) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objGetKeyExchangeAlgorithms = (JCObject)classType.Invoke("GetKeyExchangeAlgorithms", (java.lang.Object)cipherSuites);
            return new IListImplementation(objGetKeyExchangeAlgorithms);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static IList GetKeyExchangeAlgorithms(JCORefOut dupParam0) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objGetKeyExchangeAlgorithms = (JCObject)classType.Invoke("GetKeyExchangeAlgorithms", (java.lang.Object)dupParam0.getJCRefOut());
            return new IListImplementation(objGetKeyExchangeAlgorithms);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static IList GetLegacySupportedSignatureAlgorithms() throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.NotSupportedException, system.ObjectDisposedException, system.RankException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objGetLegacySupportedSignatureAlgorithms = (JCObject)classType.Invoke("GetLegacySupportedSignatureAlgorithms");
            return new IListImplementation(objGetLegacySupportedSignatureAlgorithms);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static IList GetNamedGroupRoles(int[] cipherSuites) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objGetNamedGroupRoles = (JCObject)classType.Invoke("GetNamedGroupRoles", (java.lang.Object)cipherSuites);
            return new IListImplementation(objGetNamedGroupRoles);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static IList GetNamedGroupRoles(JCORefOut dupParam0) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objGetNamedGroupRoles = (JCObject)classType.Invoke("GetNamedGroupRoles", (java.lang.Object)dupParam0.getJCRefOut());
            return new IListImplementation(objGetNamedGroupRoles);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static IList GetNamedGroupRoles(IList keyExchangeAlgorithms) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objGetNamedGroupRoles = (JCObject)classType.Invoke("GetNamedGroupRoles", keyExchangeAlgorithms == null ? null : keyExchangeAlgorithms.getJCOInstance());
            return new IListImplementation(objGetNamedGroupRoles);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static IList GetUsableSignatureAlgorithms(IList sigHashAlgs) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.NotSupportedException, system.ObjectDisposedException, system.RankException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objGetUsableSignatureAlgorithms = (JCObject)classType.Invoke("GetUsableSignatureAlgorithms", sigHashAlgs == null ? null : sigHashAlgs.getJCOInstance());
            return new IListImplementation(objGetUsableSignatureAlgorithms);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static IList ParseSupportedSignatureAlgorithms(Stream input) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.NotSupportedException, system.ObjectDisposedException, system.RankException, system.io.EndOfStreamException, org.bouncycastle.tls.TlsFatalAlert {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objParseSupportedSignatureAlgorithms = (JCObject)classType.Invoke("ParseSupportedSignatureAlgorithms", input == null ? null : input.getJCOInstance());
            return new IListImplementation(objParseSupportedSignatureAlgorithms);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static IList VectorOfOne(NetObject obj) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.NotSupportedException, system.ObjectDisposedException, system.RankException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objVectorOfOne = (JCObject)classType.Invoke("VectorOfOne", obj == null ? null : obj.getJCOInstance());
            return new IListImplementation(objVectorOfOne);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static java.lang.String[] Clone(java.lang.String[] s) throws Throwable, system.PlatformNotSupportedException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            ArrayList<java.lang.Object> resultingArrayList = new ArrayList<java.lang.Object>();
            JCObject resultingObjects = (JCObject)classType.Invoke("Clone", (java.lang.Object)s);
            for (java.lang.Object resultingObject : resultingObjects) {
			    resultingArrayList.add(resultingObject);
            }
            java.lang.String[] resultingArray = new java.lang.String[resultingArrayList.size()];
            for(int indexClone = 0; indexClone < resultingArrayList.size(); indexClone++ ) {
				resultingArray[indexClone] = (java.lang.String)resultingArrayList.get(indexClone);
            }
            return resultingArray;
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void AddIfSupported(IList supportedGroups, TlsCrypto crypto, int namedGroup) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("AddIfSupported", supportedGroups == null ? null : supportedGroups.getJCOInstance(), crypto == null ? null : crypto.getJCOInstance(), namedGroup);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void AddIfSupported(IList supportedGroups, TlsCrypto crypto, int[] namedGroups) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("AddIfSupported", supportedGroups == null ? null : supportedGroups.getJCOInstance(), crypto == null ? null : crypto.getJCOInstance(), namedGroups);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void AddIfSupported(IList dupParam0, TlsCrypto dupParam1, JCORefOut dupParam2) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("AddIfSupported", dupParam0 == null ? null : dupParam0.getJCOInstance(), dupParam1 == null ? null : dupParam1.getJCOInstance(), dupParam2.getJCRefOut());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void AddIfSupported(IList supportedAlgs, TlsCrypto crypto, SignatureAndHashAlgorithm alg) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("AddIfSupported", supportedAlgs == null ? null : supportedAlgs.getJCOInstance(), crypto == null ? null : crypto.getJCOInstance(), alg == null ? null : alg.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void CheckPeerSigAlgs(TlsContext context, TlsCertificate[] peerCertPath) throws Throwable, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.IndexOutOfRangeException, system.io.IOException, org.bouncycastle.asn1.Asn1Exception, org.bouncycastle.tls.TlsFatalAlert {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("CheckPeerSigAlgs", context == null ? null : context.getJCOInstance(), toObjectFromArray(peerCertPath));
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void CheckUint16(int i) throws Throwable, system.IndexOutOfRangeException, org.bouncycastle.tls.TlsFatalAlert {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("CheckUint16", i);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void CheckUint16(long i) throws Throwable, system.IndexOutOfRangeException, org.bouncycastle.tls.TlsFatalAlert {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("CheckUint16", i);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void CheckUint24(int i) throws Throwable, system.IndexOutOfRangeException, org.bouncycastle.tls.TlsFatalAlert {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("CheckUint24", i);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void CheckUint24(long i) throws Throwable, system.IndexOutOfRangeException, org.bouncycastle.tls.TlsFatalAlert {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("CheckUint24", i);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void CheckUint32(long i) throws Throwable, system.IndexOutOfRangeException, org.bouncycastle.tls.TlsFatalAlert {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("CheckUint32", i);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void CheckUint48(long i) throws Throwable, system.IndexOutOfRangeException, org.bouncycastle.tls.TlsFatalAlert {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("CheckUint48", i);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void CheckUint64(long i) throws Throwable, system.IndexOutOfRangeException, org.bouncycastle.tls.TlsFatalAlert {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("CheckUint64", i);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void CheckUint8(short i) throws Throwable, system.IndexOutOfRangeException, org.bouncycastle.tls.TlsFatalAlert {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("CheckUint8", i);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void CheckUint8(int i) throws Throwable, system.IndexOutOfRangeException, org.bouncycastle.tls.TlsFatalAlert {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("CheckUint8", i);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void CheckUint8(long i) throws Throwable, system.IndexOutOfRangeException, org.bouncycastle.tls.TlsFatalAlert {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("CheckUint8", i);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void EncodeSupportedSignatureAlgorithms(IList supportedSignatureAlgorithms, Stream output) throws Throwable, system.ArgumentException, org.bouncycastle.tls.TlsFatalAlert {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("EncodeSupportedSignatureAlgorithms", supportedSignatureAlgorithms == null ? null : supportedSignatureAlgorithms.getJCOInstance(), output == null ? null : output.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void ReadFully(byte[] buf, Stream input) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.ObjectDisposedException, system.io.EndOfStreamException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("ReadFully", buf, input == null ? null : input.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void ReadFully(JCORefOut dupParam0, Stream dupParam1) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.ObjectDisposedException, system.io.EndOfStreamException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("ReadFully", dupParam0.getJCRefOut(), dupParam1 == null ? null : dupParam1.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void VerifySupportedSignatureAlgorithm(IList supportedSignatureAlgorithms, SignatureAndHashAlgorithm signatureAlgorithm) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.NotSupportedException, system.globalization.CultureNotFoundException, system.ObjectDisposedException, org.bouncycastle.tls.TlsFatalAlert {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("VerifySupportedSignatureAlgorithm", supportedSignatureAlgorithms == null ? null : supportedSignatureAlgorithms.getJCOInstance(), signatureAlgorithm == null ? null : signatureAlgorithm.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void WriteGmtUnixTime(byte[] buf, int offset) throws Throwable, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.ArgumentException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("WriteGmtUnixTime", buf, offset);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void WriteGmtUnixTime(JCORefOut dupParam0, int dupParam1) throws Throwable, system.ArgumentOutOfRangeException, system.PlatformNotSupportedException, system.ArgumentException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("WriteGmtUnixTime", dupParam0.getJCRefOut(), dupParam1);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void WriteOpaque16(byte[] data, byte[] buf, int off) throws Throwable, org.bouncycastle.tls.TlsFatalAlert, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.RankException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.ArrayTypeMismatchException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("WriteOpaque16", data, buf, off);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void WriteOpaque16(JCORefOut dupParam0, JCORefOut dupParam1, int dupParam2) throws Throwable, org.bouncycastle.tls.TlsFatalAlert, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.RankException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.ArrayTypeMismatchException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("WriteOpaque16", dupParam0.getJCRefOut(), dupParam1.getJCRefOut(), dupParam2);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void WriteOpaque16(byte[] buf, Stream output) throws Throwable, org.bouncycastle.tls.TlsFatalAlert {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("WriteOpaque16", buf, output == null ? null : output.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void WriteOpaque16(JCORefOut dupParam0, Stream dupParam1) throws Throwable, org.bouncycastle.tls.TlsFatalAlert {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("WriteOpaque16", dupParam0.getJCRefOut(), dupParam1 == null ? null : dupParam1.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void WriteOpaque24(byte[] data, byte[] buf, int off) throws Throwable, org.bouncycastle.tls.TlsFatalAlert, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.RankException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.ArrayTypeMismatchException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("WriteOpaque24", data, buf, off);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void WriteOpaque24(JCORefOut dupParam0, JCORefOut dupParam1, int dupParam2) throws Throwable, org.bouncycastle.tls.TlsFatalAlert, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.RankException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.ArrayTypeMismatchException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("WriteOpaque24", dupParam0.getJCRefOut(), dupParam1.getJCRefOut(), dupParam2);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void WriteOpaque24(byte[] buf, Stream output) throws Throwable, org.bouncycastle.tls.TlsFatalAlert {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("WriteOpaque24", buf, output == null ? null : output.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void WriteOpaque24(JCORefOut dupParam0, Stream dupParam1) throws Throwable, org.bouncycastle.tls.TlsFatalAlert {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("WriteOpaque24", dupParam0.getJCRefOut(), dupParam1 == null ? null : dupParam1.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void WriteOpaque8(byte[] data, byte[] buf, int off) throws Throwable, org.bouncycastle.tls.TlsFatalAlert, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.RankException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.ArrayTypeMismatchException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("WriteOpaque8", data, buf, off);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void WriteOpaque8(JCORefOut dupParam0, JCORefOut dupParam1, int dupParam2) throws Throwable, org.bouncycastle.tls.TlsFatalAlert, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.RankException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.ArrayTypeMismatchException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("WriteOpaque8", dupParam0.getJCRefOut(), dupParam1.getJCRefOut(), dupParam2);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void WriteOpaque8(byte[] buf, Stream output) throws Throwable, org.bouncycastle.tls.TlsFatalAlert {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("WriteOpaque8", buf, output == null ? null : output.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void WriteOpaque8(JCORefOut dupParam0, Stream dupParam1) throws Throwable, org.bouncycastle.tls.TlsFatalAlert {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("WriteOpaque8", dupParam0.getJCRefOut(), dupParam1 == null ? null : dupParam1.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void WriteUint16(int i, byte[] buf, int offset) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("WriteUint16", i, buf, offset);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void WriteUint16(int dupParam0, JCORefOut dupParam1, int dupParam2) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("WriteUint16", dupParam0, dupParam1.getJCRefOut(), dupParam2);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void WriteUint16(int i, Stream output) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("WriteUint16", i, output == null ? null : output.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void WriteUint16Array(int[] u16s, byte[] buf, int offset) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("WriteUint16Array", u16s, buf, offset);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void WriteUint16Array(JCORefOut dupParam0, JCORefOut dupParam1, int dupParam2) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("WriteUint16Array", dupParam0.getJCRefOut(), dupParam1.getJCRefOut(), dupParam2);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void WriteUint16Array(int[] u16s, Stream output) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("WriteUint16Array", u16s, output == null ? null : output.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void WriteUint16Array(JCORefOut dupParam0, Stream dupParam1) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("WriteUint16Array", dupParam0.getJCRefOut(), dupParam1 == null ? null : dupParam1.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void WriteUint16ArrayWithUint16Length(int[] u16s, byte[] buf, int offset) throws Throwable, org.bouncycastle.tls.TlsFatalAlert {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("WriteUint16ArrayWithUint16Length", u16s, buf, offset);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void WriteUint16ArrayWithUint16Length(JCORefOut dupParam0, JCORefOut dupParam1, int dupParam2) throws Throwable, org.bouncycastle.tls.TlsFatalAlert {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("WriteUint16ArrayWithUint16Length", dupParam0.getJCRefOut(), dupParam1.getJCRefOut(), dupParam2);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void WriteUint16ArrayWithUint16Length(int[] u16s, Stream output) throws Throwable, org.bouncycastle.tls.TlsFatalAlert {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("WriteUint16ArrayWithUint16Length", u16s, output == null ? null : output.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void WriteUint16ArrayWithUint16Length(JCORefOut dupParam0, Stream dupParam1) throws Throwable, org.bouncycastle.tls.TlsFatalAlert {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("WriteUint16ArrayWithUint16Length", dupParam0.getJCRefOut(), dupParam1 == null ? null : dupParam1.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void WriteUint24(int i, byte[] buf, int offset) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("WriteUint24", i, buf, offset);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void WriteUint24(int dupParam0, JCORefOut dupParam1, int dupParam2) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("WriteUint24", dupParam0, dupParam1.getJCRefOut(), dupParam2);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void WriteUint24(int i, Stream output) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("WriteUint24", i, output == null ? null : output.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void WriteUint32(long i, byte[] buf, int offset) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("WriteUint32", i, buf, offset);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void WriteUint32(long dupParam0, JCORefOut dupParam1, int dupParam2) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("WriteUint32", dupParam0, dupParam1.getJCRefOut(), dupParam2);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void WriteUint32(long i, Stream output) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("WriteUint32", i, output == null ? null : output.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void WriteUint48(long i, byte[] buf, int offset) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("WriteUint48", i, buf, offset);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void WriteUint48(long dupParam0, JCORefOut dupParam1, int dupParam2) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("WriteUint48", dupParam0, dupParam1.getJCRefOut(), dupParam2);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void WriteUint48(long i, Stream output) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("WriteUint48", i, output == null ? null : output.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void WriteUint64(long i, byte[] buf, int offset) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("WriteUint64", i, buf, offset);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void WriteUint64(long dupParam0, JCORefOut dupParam1, int dupParam2) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("WriteUint64", dupParam0, dupParam1.getJCRefOut(), dupParam2);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void WriteUint64(long i, Stream output) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("WriteUint64", i, output == null ? null : output.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void WriteUint8(short i, byte[] buf, int offset) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("WriteUint8", i, buf, offset);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void WriteUint8(short dupParam0, JCORefOut dupParam1, int dupParam2) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("WriteUint8", dupParam0, dupParam1.getJCRefOut(), dupParam2);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void WriteUint8(short i, Stream output) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("WriteUint8", i, output == null ? null : output.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void WriteUint8(int i, byte[] buf, int offset) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("WriteUint8", i, buf, offset);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void WriteUint8(int dupParam0, JCORefOut dupParam1, int dupParam2) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("WriteUint8", dupParam0, dupParam1.getJCRefOut(), dupParam2);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void WriteUint8(int i, Stream output) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("WriteUint8", i, output == null ? null : output.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void WriteUint8Array(short[] u8s, byte[] buf, int offset) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("WriteUint8Array", u8s, buf, offset);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void WriteUint8Array(JCORefOut dupParam0, JCORefOut dupParam1, int dupParam2) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("WriteUint8Array", dupParam0.getJCRefOut(), dupParam1.getJCRefOut(), dupParam2);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void WriteUint8Array(short[] u8s, Stream output) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("WriteUint8Array", u8s, output == null ? null : output.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void WriteUint8Array(JCORefOut dupParam0, Stream dupParam1) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("WriteUint8Array", dupParam0.getJCRefOut(), dupParam1 == null ? null : dupParam1.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void WriteUint8ArrayWithUint8Length(short[] u8s, byte[] buf, int offset) throws Throwable, org.bouncycastle.tls.TlsFatalAlert {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("WriteUint8ArrayWithUint8Length", u8s, buf, offset);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void WriteUint8ArrayWithUint8Length(JCORefOut dupParam0, JCORefOut dupParam1, int dupParam2) throws Throwable, org.bouncycastle.tls.TlsFatalAlert {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("WriteUint8ArrayWithUint8Length", dupParam0.getJCRefOut(), dupParam1.getJCRefOut(), dupParam2);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void WriteUint8ArrayWithUint8Length(short[] u8s, Stream output) throws Throwable, org.bouncycastle.tls.TlsFatalAlert {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("WriteUint8ArrayWithUint8Length", u8s, output == null ? null : output.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void WriteUint8ArrayWithUint8Length(JCORefOut dupParam0, Stream dupParam1) throws Throwable, org.bouncycastle.tls.TlsFatalAlert {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("WriteUint8ArrayWithUint8Length", dupParam0.getJCRefOut(), dupParam1 == null ? null : dupParam1.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void WriteVersion(ProtocolVersion version, byte[] buf, int offset) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("WriteVersion", version == null ? null : version.getJCOInstance(), buf, offset);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void WriteVersion(ProtocolVersion dupParam0, JCORefOut dupParam1, int dupParam2) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("WriteVersion", dupParam0 == null ? null : dupParam0.getJCOInstance(), dupParam1.getJCRefOut(), dupParam2);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static void WriteVersion(ProtocolVersion version, Stream output) throws Throwable {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            classType.Invoke("WriteVersion", version == null ? null : version.getJCOInstance(), output == null ? null : output.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    


    // Instance Events section
    

}