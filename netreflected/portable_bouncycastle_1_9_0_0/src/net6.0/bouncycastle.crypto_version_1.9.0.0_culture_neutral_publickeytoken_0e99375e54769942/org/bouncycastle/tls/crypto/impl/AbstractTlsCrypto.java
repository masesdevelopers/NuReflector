/*
 *  MIT License
 *
 *  Copyright (c) 2022 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package org.bouncycastle.tls.crypto.impl;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import org.bouncycastle.tls.SignatureAndHashAlgorithm;
import org.bouncycastle.tls.crypto.TlsCertificate;
import org.bouncycastle.tls.crypto.TlsCertificateImplementation;
import org.bouncycastle.tls.crypto.TlsCipher;
import org.bouncycastle.tls.crypto.TlsCipherImplementation;
import org.bouncycastle.tls.crypto.TlsCryptoParameters;
import org.bouncycastle.tls.crypto.TlsDHDomain;
import org.bouncycastle.tls.crypto.TlsDHDomainImplementation;
import org.bouncycastle.tls.crypto.TlsDHConfig;
import org.bouncycastle.tls.crypto.TlsECDomain;
import org.bouncycastle.tls.crypto.TlsECDomainImplementation;
import org.bouncycastle.tls.crypto.TlsECConfig;
import org.bouncycastle.tls.crypto.TlsHash;
import org.bouncycastle.tls.crypto.TlsHashImplementation;
import org.bouncycastle.tls.crypto.TlsHmac;
import org.bouncycastle.tls.crypto.TlsHmacImplementation;
import org.bouncycastle.tls.crypto.TlsNonceGenerator;
import org.bouncycastle.tls.crypto.TlsNonceGeneratorImplementation;
import org.bouncycastle.tls.crypto.TlsSecret;
import org.bouncycastle.tls.crypto.TlsSecretImplementation;
import org.bouncycastle.tls.ProtocolVersion;
import org.bouncycastle.tls.crypto.TlsSrp6Client;
import org.bouncycastle.tls.crypto.TlsSrp6ClientImplementation;
import org.bouncycastle.tls.crypto.TlsSrpConfig;
import org.bouncycastle.tls.crypto.TlsSrp6Server;
import org.bouncycastle.tls.crypto.TlsSrp6ServerImplementation;
import org.bouncycastle.math.BigInteger;
import org.bouncycastle.tls.crypto.TlsSrp6VerifierGenerator;
import org.bouncycastle.tls.crypto.TlsSrp6VerifierGeneratorImplementation;
import org.bouncycastle.security.SecureRandom;


/**
 * The base .NET class managing Org.BouncyCastle.Tls.Crypto.Impl.AbstractTlsCrypto, BouncyCastle.Crypto, Version=1.9.0.0, Culture=neutral, PublicKeyToken=0e99375e54769942.
 * <p>
 * 
 * See: <a href="https://docs.microsoft.com/en-us/dotnet/api/Org.BouncyCastle.Tls.Crypto.Impl.AbstractTlsCrypto" target="_top">https://docs.microsoft.com/en-us/dotnet/api/Org.BouncyCastle.Tls.Crypto.Impl.AbstractTlsCrypto</a>
 */
public class AbstractTlsCrypto extends NetObject  {
    /**
     * Fully assembly qualified name: BouncyCastle.Crypto, Version=1.9.0.0, Culture=neutral, PublicKeyToken=0e99375e54769942
     */
    public static final String assemblyFullName = "BouncyCastle.Crypto, Version=1.9.0.0, Culture=neutral, PublicKeyToken=0e99375e54769942";
    /**
     * Assembly name: BouncyCastle.Crypto
     */
    public static final String assemblyShortName = "BouncyCastle.Crypto";
    /**
     * Qualified class name: Org.BouncyCastle.Tls.Crypto.Impl.AbstractTlsCrypto
     */
    public static final String className = "Org.BouncyCastle.Tls.Crypto.Impl.AbstractTlsCrypto";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    /**
     * The type managed from JCOBridge. See {@link JCType}
     */
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            String classToCreate = className + ", "
                    + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Creating %s", classToCreate);
            JCType typeCreated = bridge.GetType(classToCreate);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Created: %s",
                        (typeCreated != null) ? typeCreated.toString() : "Returned null value");
            return typeCreated;
        } catch (JCException e) {
            JCOReflector.writeLog(e);
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }
    /**
     * Internal constructor. Use with caution 
     */
    public AbstractTlsCrypto(java.lang.Object instance) throws Throwable {
        super(instance);
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public java.lang.Object getJCOInstance() {
        return classInstance;
    }

    public void setJCOInstance(JCObject instance) {
        classInstance = instance;
        super.setJCOInstance(classInstance);
    }

    public JCType getJCOType() {
        return classType;
    }
    /**
     * Try to cast the {@link IJCOBridgeReflected} instance into {@link AbstractTlsCrypto}, a cast assert is made to check if types are compatible.
     * @param from {@link IJCOBridgeReflected} instance to be casted
     * @return {@link AbstractTlsCrypto} instance
     * @throws java.lang.Throwable in case of error during cast operation
     */
    public static AbstractTlsCrypto cast(IJCOBridgeReflected from) throws Throwable {
        NetType.AssertCast(classType, from);
        return new AbstractTlsCrypto(from.getJCOInstance());
    }

    // Constructors section
    
    public AbstractTlsCrypto() throws Throwable {
    }

    
    // Methods section
    
    public boolean HasAllRawSignatureAlgorithms() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("HasAllRawSignatureAlgorithms");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean HasCryptoHashAlgorithm(int cryptoHashAlgorithm) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("HasCryptoHashAlgorithm", cryptoHashAlgorithm);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean HasCryptoSignatureAlgorithm(int cryptoSignatureAlgorithm) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("HasCryptoSignatureAlgorithm", cryptoSignatureAlgorithm);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean HasDHAgreement() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("HasDHAgreement");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean HasECDHAgreement() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("HasECDHAgreement");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean HasEncryptionAlgorithm(int encryptionAlgorithm) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("HasEncryptionAlgorithm", encryptionAlgorithm);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean HasMacAlgorithm(int macAlgorithm) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("HasMacAlgorithm", macAlgorithm);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean HasNamedGroup(int namedGroup) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("HasNamedGroup", namedGroup);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean HasRsaEncryption() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("HasRsaEncryption");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean HasSignatureAlgorithm(short signatureAlgorithm) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("HasSignatureAlgorithm", signatureAlgorithm);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean HasSignatureAndHashAlgorithm(SignatureAndHashAlgorithm sigAndHashAlgorithm) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("HasSignatureAndHashAlgorithm", sigAndHashAlgorithm == null ? null : sigAndHashAlgorithm.getJCOInstance());
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean HasSignatureScheme(int signatureScheme) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("HasSignatureScheme", signatureScheme);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public boolean HasSrpAuthentication() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            return (boolean)classInstance.Invoke("HasSrpAuthentication");
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public TlsCertificate CreateCertificate(byte[] encoding) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objCreateCertificate = (JCObject)classInstance.Invoke("CreateCertificate", (java.lang.Object)encoding);
            return new TlsCertificateImplementation(objCreateCertificate);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public TlsCertificate CreateCertificate(JCORefOut dupParam0) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objCreateCertificate = (JCObject)classInstance.Invoke("CreateCertificate", (java.lang.Object)dupParam0.getJCRefOut());
            return new TlsCertificateImplementation(objCreateCertificate);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public TlsCipher CreateCipher(TlsCryptoParameters cryptoParams, int encryptionAlgorithm, int macAlgorithm) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objCreateCipher = (JCObject)classInstance.Invoke("CreateCipher", cryptoParams == null ? null : cryptoParams.getJCOInstance(), encryptionAlgorithm, macAlgorithm);
            return new TlsCipherImplementation(objCreateCipher);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public TlsDHDomain CreateDHDomain(TlsDHConfig dhConfig) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objCreateDHDomain = (JCObject)classInstance.Invoke("CreateDHDomain", dhConfig == null ? null : dhConfig.getJCOInstance());
            return new TlsDHDomainImplementation(objCreateDHDomain);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public TlsECDomain CreateECDomain(TlsECConfig ecConfig) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objCreateECDomain = (JCObject)classInstance.Invoke("CreateECDomain", ecConfig == null ? null : ecConfig.getJCOInstance());
            return new TlsECDomainImplementation(objCreateECDomain);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public TlsHash CreateHash(int cryptoHashAlgorithm) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objCreateHash = (JCObject)classInstance.Invoke("CreateHash", cryptoHashAlgorithm);
            return new TlsHashImplementation(objCreateHash);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public TlsHmac CreateHmac(int macAlgorithm) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objCreateHmac = (JCObject)classInstance.Invoke("CreateHmac", macAlgorithm);
            return new TlsHmacImplementation(objCreateHmac);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public TlsHmac CreateHmacForHash(int cryptoHashAlgorithm) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objCreateHmacForHash = (JCObject)classInstance.Invoke("CreateHmacForHash", cryptoHashAlgorithm);
            return new TlsHmacImplementation(objCreateHmacForHash);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public TlsNonceGenerator CreateNonceGenerator(byte[] additionalSeedMaterial) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objCreateNonceGenerator = (JCObject)classInstance.Invoke("CreateNonceGenerator", (java.lang.Object)additionalSeedMaterial);
            return new TlsNonceGeneratorImplementation(objCreateNonceGenerator);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public TlsNonceGenerator CreateNonceGenerator(JCORefOut dupParam0) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objCreateNonceGenerator = (JCObject)classInstance.Invoke("CreateNonceGenerator", (java.lang.Object)dupParam0.getJCRefOut());
            return new TlsNonceGeneratorImplementation(objCreateNonceGenerator);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public TlsSecret AdoptSecret(TlsSecret secret) throws Throwable, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objAdoptSecret = (JCObject)classInstance.Invoke("AdoptSecret", secret == null ? null : secret.getJCOInstance());
            return new TlsSecretImplementation(objAdoptSecret);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public TlsSecret CreateSecret(byte[] data) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objCreateSecret = (JCObject)classInstance.Invoke("CreateSecret", (java.lang.Object)data);
            return new TlsSecretImplementation(objCreateSecret);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public TlsSecret CreateSecret(JCORefOut dupParam0) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objCreateSecret = (JCObject)classInstance.Invoke("CreateSecret", (java.lang.Object)dupParam0.getJCRefOut());
            return new TlsSecretImplementation(objCreateSecret);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public TlsSecret GenerateRsaPreMasterSecret(ProtocolVersion clientVersion) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objGenerateRsaPreMasterSecret = (JCObject)classInstance.Invoke("GenerateRsaPreMasterSecret", clientVersion == null ? null : clientVersion.getJCOInstance());
            return new TlsSecretImplementation(objGenerateRsaPreMasterSecret);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public TlsSecret HkdfInit(int cryptoHashAlgorithm) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objHkdfInit = (JCObject)classInstance.Invoke("HkdfInit", cryptoHashAlgorithm);
            return new TlsSecretImplementation(objHkdfInit);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public TlsSrp6Client CreateSrp6Client(TlsSrpConfig srpConfig) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objCreateSrp6Client = (JCObject)classInstance.Invoke("CreateSrp6Client", srpConfig == null ? null : srpConfig.getJCOInstance());
            return new TlsSrp6ClientImplementation(objCreateSrp6Client);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public TlsSrp6Server CreateSrp6Server(TlsSrpConfig srpConfig, BigInteger srpVerifier) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objCreateSrp6Server = (JCObject)classInstance.Invoke("CreateSrp6Server", srpConfig == null ? null : srpConfig.getJCOInstance(), srpVerifier == null ? null : srpVerifier.getJCOInstance());
            return new TlsSrp6ServerImplementation(objCreateSrp6Server);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public TlsSrp6VerifierGenerator CreateSrp6VerifierGenerator(TlsSrpConfig srpConfig) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objCreateSrp6VerifierGenerator = (JCObject)classInstance.Invoke("CreateSrp6VerifierGenerator", srpConfig == null ? null : srpConfig.getJCOInstance());
            return new TlsSrp6VerifierGeneratorImplementation(objCreateSrp6VerifierGenerator);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    
    public SecureRandom getSecureRandom() throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject val = (JCObject)classInstance.Get("SecureRandom");
            return new SecureRandom(val);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }



    // Instance Events section
    

}