/*
 *  MIT License
 *
 *  Copyright (c) 2022 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package org.bouncycastle.tls;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import org.bouncycastle.tls.TlsKeyExchange;
import org.bouncycastle.tls.TlsKeyExchangeImplementation;
import org.bouncycastle.tls.TlsDHGroupVerifier;
import org.bouncycastle.tls.TlsDHGroupVerifierImplementation;
import org.bouncycastle.tls.crypto.TlsDHConfig;
import org.bouncycastle.tls.crypto.TlsECConfig;
import org.bouncycastle.tls.TlsPskIdentity;
import org.bouncycastle.tls.TlsPskIdentityImplementation;
import org.bouncycastle.tls.TlsPskIdentityManager;
import org.bouncycastle.tls.TlsPskIdentityManagerImplementation;
import org.bouncycastle.tls.TlsSrpIdentity;
import org.bouncycastle.tls.TlsSrpIdentityImplementation;
import org.bouncycastle.tls.TlsSrpConfigVerifier;
import org.bouncycastle.tls.TlsSrpConfigVerifierImplementation;
import org.bouncycastle.tls.TlsSrpLoginParameters;


/**
 * The base .NET class managing Org.BouncyCastle.Tls.TlsKeyExchangeFactory, BouncyCastle.Crypto, Version=1.9.0.0, Culture=neutral, PublicKeyToken=0e99375e54769942.
 * <p>
 * 
 * See: <a href="https://docs.microsoft.com/en-us/dotnet/api/Org.BouncyCastle.Tls.TlsKeyExchangeFactory" target="_top">https://docs.microsoft.com/en-us/dotnet/api/Org.BouncyCastle.Tls.TlsKeyExchangeFactory</a>
 */
public class TlsKeyExchangeFactoryImplementation extends NetObject implements TlsKeyExchangeFactory {
    /**
     * Fully assembly qualified name: BouncyCastle.Crypto, Version=1.9.0.0, Culture=neutral, PublicKeyToken=0e99375e54769942
     */
    public static final String assemblyFullName = "BouncyCastle.Crypto, Version=1.9.0.0, Culture=neutral, PublicKeyToken=0e99375e54769942";
    /**
     * Assembly name: BouncyCastle.Crypto
     */
    public static final String assemblyShortName = "BouncyCastle.Crypto";
    /**
     * Qualified class name: Org.BouncyCastle.Tls.TlsKeyExchangeFactory
     */
    public static final String className = "Org.BouncyCastle.Tls.TlsKeyExchangeFactory";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    /**
     * The type managed from JCOBridge. See {@link JCType}
     */
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            String classToCreate = className + ", "
                    + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Creating %s", classToCreate);
            JCType typeCreated = bridge.GetType(classToCreate);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Created: %s",
                        (typeCreated != null) ? typeCreated.toString() : "Returned null value");
            return typeCreated;
        } catch (JCException e) {
            JCOReflector.writeLog(e);
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }
    /**
     * Internal constructor. Use with caution 
     */
    public TlsKeyExchangeFactoryImplementation(java.lang.Object instance) throws Throwable {
        super(instance);
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public java.lang.Object getJCOInstance() {
        return classInstance;
    }

    public JCType getJCOType() {
        return classType;
    }
    /**
     * Try to cast the {@link IJCOBridgeReflected} instance into {@link TlsKeyExchangeFactory}, a cast assert is made to check if types are compatible.
     * @param from {@link IJCOBridgeReflected} instance to be casted
     * @return {@link TlsKeyExchangeFactory} instance
     * @throws java.lang.Throwable in case of error during cast operation
     */
    public static TlsKeyExchangeFactory ToTlsKeyExchangeFactory(IJCOBridgeReflected from) throws Throwable {
        NetType.AssertCast(classType, from);
        return new TlsKeyExchangeFactoryImplementation(from.getJCOInstance());
    }

    // Methods section
    
    public TlsKeyExchange CreateDHanonKeyExchangeClient(int keyExchange, TlsDHGroupVerifier dhGroupVerifier) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objCreateDHanonKeyExchangeClient = (JCObject)classInstance.Invoke("CreateDHanonKeyExchangeClient", keyExchange, dhGroupVerifier == null ? null : dhGroupVerifier.getJCOInstance());
            return new TlsKeyExchangeImplementation(objCreateDHanonKeyExchangeClient);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public TlsKeyExchange CreateDHanonKeyExchangeServer(int keyExchange, TlsDHConfig dhConfig) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objCreateDHanonKeyExchangeServer = (JCObject)classInstance.Invoke("CreateDHanonKeyExchangeServer", keyExchange, dhConfig == null ? null : dhConfig.getJCOInstance());
            return new TlsKeyExchangeImplementation(objCreateDHanonKeyExchangeServer);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public TlsKeyExchange CreateDheKeyExchangeClient(int keyExchange, TlsDHGroupVerifier dhGroupVerifier) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objCreateDheKeyExchangeClient = (JCObject)classInstance.Invoke("CreateDheKeyExchangeClient", keyExchange, dhGroupVerifier == null ? null : dhGroupVerifier.getJCOInstance());
            return new TlsKeyExchangeImplementation(objCreateDheKeyExchangeClient);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public TlsKeyExchange CreateDheKeyExchangeServer(int keyExchange, TlsDHConfig dhConfig) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objCreateDheKeyExchangeServer = (JCObject)classInstance.Invoke("CreateDheKeyExchangeServer", keyExchange, dhConfig == null ? null : dhConfig.getJCOInstance());
            return new TlsKeyExchangeImplementation(objCreateDheKeyExchangeServer);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public TlsKeyExchange CreateDHKeyExchange(int keyExchange) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objCreateDHKeyExchange = (JCObject)classInstance.Invoke("CreateDHKeyExchange", keyExchange);
            return new TlsKeyExchangeImplementation(objCreateDHKeyExchange);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public TlsKeyExchange CreateECDHanonKeyExchangeClient(int keyExchange) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objCreateECDHanonKeyExchangeClient = (JCObject)classInstance.Invoke("CreateECDHanonKeyExchangeClient", keyExchange);
            return new TlsKeyExchangeImplementation(objCreateECDHanonKeyExchangeClient);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public TlsKeyExchange CreateECDHanonKeyExchangeServer(int keyExchange, TlsECConfig ecConfig) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objCreateECDHanonKeyExchangeServer = (JCObject)classInstance.Invoke("CreateECDHanonKeyExchangeServer", keyExchange, ecConfig == null ? null : ecConfig.getJCOInstance());
            return new TlsKeyExchangeImplementation(objCreateECDHanonKeyExchangeServer);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public TlsKeyExchange CreateECDheKeyExchangeClient(int keyExchange) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objCreateECDheKeyExchangeClient = (JCObject)classInstance.Invoke("CreateECDheKeyExchangeClient", keyExchange);
            return new TlsKeyExchangeImplementation(objCreateECDheKeyExchangeClient);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public TlsKeyExchange CreateECDheKeyExchangeServer(int keyExchange, TlsECConfig ecConfig) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objCreateECDheKeyExchangeServer = (JCObject)classInstance.Invoke("CreateECDheKeyExchangeServer", keyExchange, ecConfig == null ? null : ecConfig.getJCOInstance());
            return new TlsKeyExchangeImplementation(objCreateECDheKeyExchangeServer);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public TlsKeyExchange CreateECDHKeyExchange(int keyExchange) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objCreateECDHKeyExchange = (JCObject)classInstance.Invoke("CreateECDHKeyExchange", keyExchange);
            return new TlsKeyExchangeImplementation(objCreateECDHKeyExchange);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public TlsKeyExchange CreatePskKeyExchangeClient(int keyExchange, TlsPskIdentity pskIdentity, TlsDHGroupVerifier dhGroupVerifier) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objCreatePskKeyExchangeClient = (JCObject)classInstance.Invoke("CreatePskKeyExchangeClient", keyExchange, pskIdentity == null ? null : pskIdentity.getJCOInstance(), dhGroupVerifier == null ? null : dhGroupVerifier.getJCOInstance());
            return new TlsKeyExchangeImplementation(objCreatePskKeyExchangeClient);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public TlsKeyExchange CreatePskKeyExchangeServer(int keyExchange, TlsPskIdentityManager pskIdentityManager, TlsDHConfig dhConfig, TlsECConfig ecConfig) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objCreatePskKeyExchangeServer = (JCObject)classInstance.Invoke("CreatePskKeyExchangeServer", keyExchange, pskIdentityManager == null ? null : pskIdentityManager.getJCOInstance(), dhConfig == null ? null : dhConfig.getJCOInstance(), ecConfig == null ? null : ecConfig.getJCOInstance());
            return new TlsKeyExchangeImplementation(objCreatePskKeyExchangeServer);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public TlsKeyExchange CreateRsaKeyExchange(int keyExchange) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objCreateRsaKeyExchange = (JCObject)classInstance.Invoke("CreateRsaKeyExchange", keyExchange);
            return new TlsKeyExchangeImplementation(objCreateRsaKeyExchange);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public TlsKeyExchange CreateSrpKeyExchangeClient(int keyExchange, TlsSrpIdentity srpIdentity, TlsSrpConfigVerifier srpConfigVerifier) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objCreateSrpKeyExchangeClient = (JCObject)classInstance.Invoke("CreateSrpKeyExchangeClient", keyExchange, srpIdentity == null ? null : srpIdentity.getJCOInstance(), srpConfigVerifier == null ? null : srpConfigVerifier.getJCOInstance());
            return new TlsKeyExchangeImplementation(objCreateSrpKeyExchangeClient);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public TlsKeyExchange CreateSrpKeyExchangeServer(int keyExchange, TlsSrpLoginParameters loginParameters) throws Throwable {
        if (classInstance == null)
            throw new UnsupportedOperationException("classInstance is null.");
        try {
            JCObject objCreateSrpKeyExchangeServer = (JCObject)classInstance.Invoke("CreateSrpKeyExchangeServer", keyExchange, loginParameters == null ? null : loginParameters.getJCOInstance());
            return new TlsKeyExchangeImplementation(objCreateSrpKeyExchangeServer);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    


    // Instance Events section
    

}