/*
 *  MIT License
 *
 *  Copyright (c) 2022 MASES s.r.l.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

/**************************************************************************************
 * <auto-generated>
 *      This code was generated from a template using JCOReflector
 * 
 *      Manual changes to this file may cause unexpected behavior in your application.
 *      Manual changes to this file will be overwritten if the code is regenerated.
 * </auto-generated>
 *************************************************************************************/

package org.bouncycastle.security;

import org.mases.jcobridge.*;
import org.mases.jcobridge.netreflection.*;
import java.util.ArrayList;

// Import section
import org.bouncycastle.crypto.AsymmetricCipherKeyPair;
import system.security.cryptography.DSA;
import system.security.cryptography.DSAParameters;
import system.security.cryptography.AsymmetricAlgorithm;
import system.security.cryptography.RSA;
import system.security.cryptography.RSAParameters;
import org.bouncycastle.crypto.parameters.DsaPublicKeyParameters;
import org.bouncycastle.crypto.parameters.RsaKeyParameters;
import org.bouncycastle.x509.X509Certificate;
import system.security.cryptography.x509certificates.X509Certificate;
import org.bouncycastle.asn1.pkcs.RsaPrivateKeyStructure;
import system.security.cryptography.CspParameters;
import org.bouncycastle.crypto.parameters.RsaPrivateCrtKeyParameters;
import org.bouncycastle.asn1.x509.X509CertificateStructure;


/**
 * The base .NET class managing Org.BouncyCastle.Security.DotNetUtilities, BouncyCastle.Crypto, Version=1.9.0.0, Culture=neutral, PublicKeyToken=0e99375e54769942.
 * <p>
 * 
 * See: <a href="https://docs.microsoft.com/en-us/dotnet/api/Org.BouncyCastle.Security.DotNetUtilities" target="_top">https://docs.microsoft.com/en-us/dotnet/api/Org.BouncyCastle.Security.DotNetUtilities</a>
 */
public class DotNetUtilities extends NetObject  {
    /**
     * Fully assembly qualified name: BouncyCastle.Crypto, Version=1.9.0.0, Culture=neutral, PublicKeyToken=0e99375e54769942
     */
    public static final String assemblyFullName = "BouncyCastle.Crypto, Version=1.9.0.0, Culture=neutral, PublicKeyToken=0e99375e54769942";
    /**
     * Assembly name: BouncyCastle.Crypto
     */
    public static final String assemblyShortName = "BouncyCastle.Crypto";
    /**
     * Qualified class name: Org.BouncyCastle.Security.DotNetUtilities
     */
    public static final String className = "Org.BouncyCastle.Security.DotNetUtilities";
    static JCOBridge bridge = JCOBridgeInstance.getInstance(assemblyFullName);
    /**
     * The type managed from JCOBridge. See {@link JCType}
     */
    public static JCType classType = createType();
    static JCEnum enumInstance = null;
    JCObject classInstance = null;

    static JCType createType() {
        try {
            String classToCreate = className + ", "
                    + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Creating %s", classToCreate);
            JCType typeCreated = bridge.GetType(classToCreate);
            if (JCOReflector.getDebug())
                JCOReflector.writeLog("Created: %s",
                        (typeCreated != null) ? typeCreated.toString() : "Returned null value");
            return typeCreated;
        } catch (JCException e) {
            JCOReflector.writeLog(e);
            return null;
        }
    }

    void addReference(String ref) throws Throwable {
        try {
            bridge.AddReference(ref);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }
    /**
     * Internal constructor. Use with caution 
     */
    public DotNetUtilities(java.lang.Object instance) throws Throwable {
        super(instance);
        if (instance instanceof JCObject) {
            classInstance = (JCObject) instance;
        } else
            throw new Exception("Cannot manage object, it is not a JCObject");
    }

    public String getJCOAssemblyName() {
        return assemblyFullName;
    }

    public String getJCOClassName() {
        return className;
    }

    public String getJCOObjectName() {
        return className + ", " + (JCOReflector.getUseFullAssemblyName() ? assemblyFullName : assemblyShortName);
    }

    public java.lang.Object getJCOInstance() {
        return classInstance;
    }

    public void setJCOInstance(JCObject instance) {
        classInstance = instance;
        super.setJCOInstance(classInstance);
    }

    public JCType getJCOType() {
        return classType;
    }
    /**
     * Try to cast the {@link IJCOBridgeReflected} instance into {@link DotNetUtilities}, a cast assert is made to check if types are compatible.
     * @param from {@link IJCOBridgeReflected} instance to be casted
     * @return {@link DotNetUtilities} instance
     * @throws java.lang.Throwable in case of error during cast operation
     */
    public static DotNetUtilities cast(IJCOBridgeReflected from) throws Throwable {
        NetType.AssertCast(classType, from);
        return new DotNetUtilities(from.getJCOInstance());
    }

    // Constructors section
    
    public DotNetUtilities() throws Throwable {
    }



    
    // Methods section
    
    public static AsymmetricCipherKeyPair GetDsaKeyPair(DSA dsa) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.FormatException, system.IndexOutOfRangeException, system.ArithmeticException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objGetDsaKeyPair = (JCObject)classType.Invoke("GetDsaKeyPair", dsa == null ? null : dsa.getJCOInstance());
            return new AsymmetricCipherKeyPair(objGetDsaKeyPair);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static AsymmetricCipherKeyPair GetDsaKeyPair(DSAParameters dp) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.FormatException, system.ArithmeticException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objGetDsaKeyPair = (JCObject)classType.Invoke("GetDsaKeyPair", dp == null ? null : dp.getJCOInstance());
            return new AsymmetricCipherKeyPair(objGetDsaKeyPair);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static AsymmetricCipherKeyPair GetKeyPair(AsymmetricAlgorithm privateKey) throws Throwable, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.PlatformNotSupportedException, system.FormatException, system.IndexOutOfRangeException, system.ArithmeticException, system.InvalidOperationException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objGetKeyPair = (JCObject)classType.Invoke("GetKeyPair", privateKey == null ? null : privateKey.getJCOInstance());
            return new AsymmetricCipherKeyPair(objGetKeyPair);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static AsymmetricCipherKeyPair GetRsaKeyPair(RSA rsa) throws Throwable, system.FormatException, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.ArithmeticException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objGetRsaKeyPair = (JCObject)classType.Invoke("GetRsaKeyPair", rsa == null ? null : rsa.getJCOInstance());
            return new AsymmetricCipherKeyPair(objGetRsaKeyPair);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static AsymmetricCipherKeyPair GetRsaKeyPair(RSAParameters rp) throws Throwable, system.FormatException, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.NotSupportedException, system.ObjectDisposedException, system.RankException, system.ArithmeticException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objGetRsaKeyPair = (JCObject)classType.Invoke("GetRsaKeyPair", rp == null ? null : rp.getJCOInstance());
            return new AsymmetricCipherKeyPair(objGetRsaKeyPair);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static DsaPublicKeyParameters GetDsaPublicKey(DSA dsa) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.FormatException, system.IndexOutOfRangeException, system.ArithmeticException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objGetDsaPublicKey = (JCObject)classType.Invoke("GetDsaPublicKey", dsa == null ? null : dsa.getJCOInstance());
            return new DsaPublicKeyParameters(objGetDsaPublicKey);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static DsaPublicKeyParameters GetDsaPublicKey(DSAParameters dp) throws Throwable, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.FormatException, system.ArithmeticException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objGetDsaPublicKey = (JCObject)classType.Invoke("GetDsaPublicKey", dp == null ? null : dp.getJCOInstance());
            return new DsaPublicKeyParameters(objGetDsaPublicKey);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static RsaKeyParameters GetRsaPublicKey(RSA rsa) throws Throwable, system.FormatException, system.ArgumentException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.ObjectDisposedException, system.InvalidOperationException, system.RankException, system.ArrayTypeMismatchException, system.ArithmeticException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objGetRsaPublicKey = (JCObject)classType.Invoke("GetRsaPublicKey", rsa == null ? null : rsa.getJCOInstance());
            return new RsaKeyParameters(objGetRsaPublicKey);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static RsaKeyParameters GetRsaPublicKey(RSAParameters rp) throws Throwable, system.FormatException, system.ArgumentException, system.ArgumentOutOfRangeException, system.ArgumentNullException, system.InvalidOperationException, system.PlatformNotSupportedException, system.ArrayTypeMismatchException, system.IndexOutOfRangeException, system.NotSupportedException, system.ObjectDisposedException, system.RankException, system.ArithmeticException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objGetRsaPublicKey = (JCObject)classType.Invoke("GetRsaPublicKey", rp == null ? null : rp.getJCOInstance());
            return new RsaKeyParameters(objGetRsaPublicKey);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static X509Certificate FromX509Certificate(X509Certificate x509Cert) throws Throwable, system.ArgumentNullException, system.ArgumentException, system.globalization.CultureNotFoundException, system.ObjectDisposedException, system.InvalidOperationException, system.security.cryptography.CryptographicException, system.PlatformNotSupportedException, system.io.IOException, system.io.EndOfStreamException, org.bouncycastle.asn1.Asn1Exception, org.bouncycastle.asn1.Asn1ParsingException, org.bouncycastle.security.certificates.CertificateParsingException, system.IndexOutOfRangeException, system.FormatException, system.RankException, system.ArgumentOutOfRangeException, system.ArrayTypeMismatchException, system.OutOfMemoryException, org.bouncycastle.security.certificates.CertificateException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objFromX509Certificate = (JCObject)classType.Invoke("FromX509Certificate", x509Cert == null ? null : x509Cert.getJCOInstance());
            return new X509Certificate(objFromX509Certificate);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static RSA ToRSA(RsaPrivateKeyStructure privKey, CspParameters csp) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.ArgumentNullException, system.RankException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.ArrayTypeMismatchException, system.security.cryptography.CryptographicException, system.ObjectDisposedException, system.OutOfMemoryException, system.InvalidOperationException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objToRSA = (JCObject)classType.Invoke("ToRSA", privKey == null ? null : privKey.getJCOInstance(), csp == null ? null : csp.getJCOInstance());
            return new RSA(objToRSA);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static RSA ToRSA(RsaPrivateKeyStructure privKey) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.ArgumentNullException, system.RankException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.ArrayTypeMismatchException, system.FormatException, system.security.cryptography.CryptographicException, system.ObjectDisposedException, system.OutOfMemoryException, system.InvalidOperationException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objToRSA = (JCObject)classType.Invoke("ToRSA", privKey == null ? null : privKey.getJCOInstance());
            return new RSA(objToRSA);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static RSA ToRSA(RsaKeyParameters rsaKey, CspParameters csp) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.ArgumentNullException, system.RankException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.ArrayTypeMismatchException, system.security.cryptography.CryptographicException, system.ObjectDisposedException, system.OutOfMemoryException, system.InvalidOperationException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objToRSA = (JCObject)classType.Invoke("ToRSA", rsaKey == null ? null : rsaKey.getJCOInstance(), csp == null ? null : csp.getJCOInstance());
            return new RSA(objToRSA);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static RSA ToRSA(RsaKeyParameters rsaKey) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.ArgumentNullException, system.RankException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.ArrayTypeMismatchException, system.FormatException, system.security.cryptography.CryptographicException, system.ObjectDisposedException, system.OutOfMemoryException, system.InvalidOperationException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objToRSA = (JCObject)classType.Invoke("ToRSA", rsaKey == null ? null : rsaKey.getJCOInstance());
            return new RSA(objToRSA);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static RSA ToRSA(RsaPrivateCrtKeyParameters privKey, CspParameters csp) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.ArgumentNullException, system.RankException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.ArrayTypeMismatchException, system.security.cryptography.CryptographicException, system.ObjectDisposedException, system.OutOfMemoryException, system.InvalidOperationException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objToRSA = (JCObject)classType.Invoke("ToRSA", privKey == null ? null : privKey.getJCOInstance(), csp == null ? null : csp.getJCOInstance());
            return new RSA(objToRSA);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static RSA ToRSA(RsaPrivateCrtKeyParameters privKey) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.ArgumentNullException, system.RankException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.ArrayTypeMismatchException, system.FormatException, system.security.cryptography.CryptographicException, system.ObjectDisposedException, system.OutOfMemoryException, system.InvalidOperationException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objToRSA = (JCObject)classType.Invoke("ToRSA", privKey == null ? null : privKey.getJCOInstance());
            return new RSA(objToRSA);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static RSAParameters ToRSAParameters(RsaPrivateKeyStructure privKey) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.ArgumentNullException, system.RankException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.ArrayTypeMismatchException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objToRSAParameters = (JCObject)classType.Invoke("ToRSAParameters", privKey == null ? null : privKey.getJCOInstance());
            return new RSAParameters(objToRSAParameters);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static RSAParameters ToRSAParameters(RsaKeyParameters rsaKey) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.ArgumentNullException, system.RankException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.ArrayTypeMismatchException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objToRSAParameters = (JCObject)classType.Invoke("ToRSAParameters", rsaKey == null ? null : rsaKey.getJCOInstance());
            return new RSAParameters(objToRSAParameters);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static RSAParameters ToRSAParameters(RsaPrivateCrtKeyParameters privKey) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.ArgumentNullException, system.RankException, system.ArgumentOutOfRangeException, system.IndexOutOfRangeException, system.ArrayTypeMismatchException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objToRSAParameters = (JCObject)classType.Invoke("ToRSAParameters", privKey == null ? null : privKey.getJCOInstance());
            return new RSAParameters(objToRSAParameters);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static X509Certificate ToX509Certificate(X509CertificateStructure x509Struct) throws Throwable, system.ArgumentException, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.ArrayTypeMismatchException, system.OutOfMemoryException, system.security.cryptography.CryptographicException, system.io.IOException, system.MissingMethodException, system.reflection.TargetInvocationException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objToX509Certificate = (JCObject)classType.Invoke("ToX509Certificate", x509Struct == null ? null : x509Struct.getJCOInstance());
            return new X509Certificate(objToX509Certificate);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }

    public static X509Certificate ToX509Certificate(X509Certificate x509Cert) throws Throwable, system.PlatformNotSupportedException, system.NotSupportedException, system.ArgumentException, system.ArgumentNullException, system.InvalidOperationException, system.ArgumentOutOfRangeException, system.ArrayTypeMismatchException, org.bouncycastle.security.certificates.CertificateEncodingException, system.OutOfMemoryException, system.security.cryptography.CryptographicException, system.io.IOException, system.MissingMethodException, system.reflection.TargetInvocationException {
        if (classType == null)
            throw new UnsupportedOperationException("classType is null.");
        try {
            JCObject objToX509Certificate = (JCObject)classType.Invoke("ToX509Certificate", x509Cert == null ? null : x509Cert.getJCOInstance());
            return new X509Certificate(objToX509Certificate);
        } catch (JCNativeException jcne) {
            throw translateException(jcne);
        }
    }


    
    // Properties section
    


    // Instance Events section
    

}